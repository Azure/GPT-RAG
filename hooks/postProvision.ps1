#!/usr/bin/env pwsh
# Stop on errors and enforce strict mode
$ErrorActionPreference = 'Stop'
Set-StrictMode -Version Latest

# -----------------------------------------------------------------------------
# Default environment-variable values (override by setting $env:DEPLOY*)
# -----------------------------------------------------------------------------
$deployAppConfig     = $env:deployAppConfig     ?? 'true'
$deploySearchService = $env:deploySearchService ?? 'true'
$networkIsolation    = $env:networkIsolation    ?? 'false'

Write-Host "üîß Running post-provision steps‚Ä¶`n"
Write-Host "üìã Current environment variables:"
foreach ($v in 'deployAppConfig','deploySearchService','networkIsolation') {
    $value = Get-Variable -Name $v -ValueOnly
    Write-Host "  $v = $value"
}

# -----------------------------------------------------------------------------
# Find the Python executable
# -----------------------------------------------------------------------------
$python = (Get-Command python3 -ErrorAction SilentlyContinue)?.Name
if (-not $python) { $python = (Get-Command python -ErrorAction Stop).Name }

# -----------------------------------------------------------------------------
# 0) Setup Python environment
# -----------------------------------------------------------------------------
Write-Host "`nüì¶ Creating temporary venv‚Ä¶"
& $python -m venv --without-pip config/.venv_temp

# Activate it (cross-platform)
if (Test-Path 'config/.venv_temp/Scripts/Activate.ps1') {
    & 'config/.venv_temp/Scripts/Activate.ps1'
} elseif (Test-Path 'config/.venv_temp/bin/Activate.ps1') {
    & 'config/.venv_temp/bin/Activate.ps1'
} else {
    Throw "Activation script not found in config/.venv_temp"
}

Write-Host "‚¨áÔ∏è Manually bootstrapping pip‚Ä¶"
Invoke-WebRequest https://bootstrap.pypa.io/get-pip.py -UseBasicParsing |
    & $python

Write-Host "‚¨áÔ∏è Installing requirements‚Ä¶"
pip install --upgrade pip
pip install -r config/requirements.txt

# -----------------------------------------------------------------------------
# 1) App Configuration Setup
# -----------------------------------------------------------------------------
Write-Host "`nüìë Seeding App Configuration‚Ä¶"
try {
    Write-Host "üöÄ Running config.appconfig.setup‚Ä¶"
    & $python -m config.appconfig.setup
    Write-Host "‚úÖ App Configuration script finished."
} catch {
    Write-Warning "‚ùóÔ∏è Error during App Configuration Setup. Skipping it."
}

# -----------------------------------------------------------------------------
# 2) AI Foundry Setup
# -----------------------------------------------------------------------------
Write-Host ""
Write-Host "üìë AI Foundry Setup‚Ä¶"
try {
    Write-Host "üöÄ Running config.aifoundry.setup‚Ä¶"
    & $python -m config.aifoundry.setup
    Write-Host "‚úÖ AI Foundry setup script finished."
} catch {
    Write-Warning "‚ùóÔ∏è Error during AI Foundry setup. Skipping it."
}


# -----------------------------------------------------------------------------
# 3) AI Search Setup
# -----------------------------------------------------------------------------
Write-Host ""
if ($deploySearchService.ToLower() -eq 'true') {
    Write-Host "üîç AI Search setup‚Ä¶"
    try {
        Write-Host "üöÄ Running config.search.setup‚Ä¶"
        & $python -m config.search.setup
        Write-Host "‚úÖ Search setup script finished."
    } catch {
        Write-Warning "‚ùóÔ∏è Error during Search setup. Skipping it."
    }
} else {
    Write-Warning "‚ö†Ô∏è Skipping AI Search setup (deploySearchService is not 'true')."
}

# -----------------------------------------------------------------------------
# 4) Zero Trust Information
# -----------------------------------------------------------------------------
Write-Host ""
if ($networkIsolation.ToLower() -eq 'true') {
    Write-Host "üîí Access the Zero Trust bastion"
} else {
    Write-Host "üöß Zero Trust not enabled; provisioning Basic architecture."
}

Write-Host "`n‚úÖ postProvisioning completed.`n"

# -----------------------------------------------------------------------------
# Cleaning up
# -----------------------------------------------------------------------------
Write-Host "üßπ Cleaning Python environment up‚Ä¶"
# 'deactivate' is defined by the Activate.ps1 script
if (Get-Command deactivate -ErrorAction SilentlyContinue) {
    deactivate
}
Remove-Item -Recurse -Force config/.venv_temp
