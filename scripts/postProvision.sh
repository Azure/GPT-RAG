#!/usr/bin/env bash
set -euo pipefail
echo "üîß Running post-provision steps‚Ä¶"
echo

#-------------------------------------------------------------------------------
# Mirror azd environment variables into your shell environment
#-------------------------------------------------------------------------------

azd env get-values | while IFS='=' read -r key value; do
  # Skip empty keys
  [[ -z "$key" ]] && continue

  # Strip leading and trailing double quotes
  value="${value%\"}"
  value="${value#\"}"

  # Export into the current shell session
  export "$key=$value"

  # Show the mirrored pair
  echo "$key=$value"
done


###############################################################################
# Container APP API Keys Warning
###############################################################################
echo
if [[ "${USE_CAPP_API_KEY,,}" == "true" ]]; then
  echo "üîë Using API Key for Container Apps access."
  echo "‚ö†Ô∏è IMPORTANT: Each App API Key was initialized with resourceToken."
  echo "    Please update to a custom API key ASAP."
fi

###############################################################################
# Zero Trust Information
###############################################################################
echo
if [[ "$(echo "${NETWORK_ISOLATION:-false}" | tr '[:upper:]' '[:lower:]')" == "true" ]]; then
  echo "üîí Zero Trust enabled."
  echo "üöß NOTE: If app config failed, run the azd provision again - this is due to token timeout restrictions."
  echo "Access to Azure resources is restricted to the VNet."
  echo "Ensure you run scripts/postProvision.sh from within the VNet."
  echo "If you‚Äôre using a local machine, make sure you have a VPN connection to the VNet."
  echo "You can also use the Test VM to access the environment and complete the setup."
  read -p "Are you running this script from inside the VNet or via VPN? [Y/n]: " answer
  if [[ ! "$(echo "${answer:-n}" | tr '[:upper:]' '[:lower:]')" =~ ^y ]]; then
    echo "‚ùå Please run this script from inside the VNet or with VPN access. Exiting."
    exit 0
  fi
else
  echo "üöß Provisioning basic architecture."
fi

###############################################################################
# Check required environment variable
###############################################################################
echo "üìã Current environment variables:"
for v in APP_CONFIG_ENDPOINT ; do
  printf "  %s=%s\n" "$v" "${!v:-<unset>}"
done

if [[ -z "${APP_CONFIG_ENDPOINT:-}" ]]; then
  echo "‚ùóÔ∏è APP_CONFIG_ENDPOINT environment variable must be set before running this script."
  exit 1
fi

###############################################################################
# Setup Python environment
###############################################################################
echo "üì¶ Creating temporary venv‚Ä¶"
python3 -m venv --without-pip config/.venv_temp
source config/.venv_temp/bin/activate
echo "‚¨áÔ∏è Manually bootstrapping pip‚Ä¶"
curl -sS https://bootstrap.pypa.io/get-pip.py | python

echo "‚¨áÔ∏è  Installing requirements‚Ä¶"
pip install --upgrade pip
pip install -r config/requirements.txt

###############################################################################
# 1) AI Foundry Setup
###############################################################################
echo
echo "üìë AI Foundry Setup‚Ä¶"
{
  echo "üöÄ Running config.aifoundry.aifoundry_setup‚Ä¶"
  python -m config.aifoundry.setup
  echo "‚úÖ AI Foundry setup script finished."
} || {
  echo "‚ùóÔ∏è Error during AI Foundry setup. Skipping it."
}

###############################################################################
# 2) Container Apps Setup
# ###############################################################################
echo
echo "üîç ContainerApp setup‚Ä¶"
{
  echo "üöÄ Running config.containerapps.setup‚Ä¶"
  python -m config.containerapps.setup
  echo "‚úÖ Container Apps setup script finished."
} || {
  echo "‚ùóÔ∏è Error during Container Apps setup. Skipping it."
}

###############################################################################
# 3) AI Search Setup
###############################################################################
echo "üîç AI Search setup‚Ä¶"
{
  echo "üöÄ Running config.search.setup‚Ä¶"
  python -m config.search.setup
  echo "‚úÖ Search setup script finished."
} || {
  echo "‚ùóÔ∏è Error during Search setup. Skipping it."
}

###############################################################################
# Cleaning up
###############################################################################
echo
echo "üßπ Cleaning Python environment up‚Ä¶"
deactivate
rm -rf config/.venv_temp

echo
echo "‚úÖ postProvisioning completed."
