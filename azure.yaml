# yaml-language-server: $schema=https://raw.githubusercontent.com/Azure/azure-dev/main/schemas/v1.0/azure.yaml.json

name: azure-gpt-rag
metadata:
  template: azure-gpt-rag
services:
  # dataIngest:
  #   # project is temporally pulled fro its repo during deployment.
  #   project: ./.salesfactory/gpt-rag-ingestion
  #   language: python
  #   host: function
  #   hooks:
  #     postdeploy:
  #       posix:
  #         # this path is relative to ./.salesfactory/gpt-rag-ingestion
  #         run: scripts/postdeploy.sh
  #         interactive: false
  #       windows:
  #         # this path is relative to ./.salesfactory/gpt-rag-ingestion
  #         run: scripts/postdeploy.ps1
  #         interactive: false
  orchestrator:
    project: ./.salesfactory/gpt-rag-orchestrator
    language: python
    host: function
    hooks:
      postdeploy:
        posix:
          # this path is relative to ./.salesfactory/gpt-rag-orchestrator
          run: scripts/postdeploy.sh
          interactive: false
        windows:
          # this path is relative to ./.salesfactory/gpt-rag-orchestrator
          run: scripts/postdeploy.ps1
          interactive: false
  mcpServer:
    project: ./.salesfactory/freddAid-MCP-server
    language: python
    host: function
    hooks:
      postdeploy:
        posix:
          run: scripts/postdeploy.sh
          interactive: false
        windows:
          run: scripts/postdeploy.ps1
          interactive: false
  frontend:
    # backend is python and frontend is Vite app. The frontend is built with Vite settings to output into the backend's static folder.
    project: ./.salesfactory/gpt-rag-frontend/backend
    language: python
    host: appservice
    hooks:
      prepackage:
        windows:
          shell: pwsh
          run: cd ../frontend;npm install;npm run build
          interactive: false
          continueOnError: false
        posix:
          shell: sh
          run: cd ../frontend;npm install;npm run build
          interactive: false
          continueOnError: false
hooks:
  # Components are pulled from their own repo for deployment but are not persisted to this repo.
  prepackage:
    posix:
      run: scripts/fetchComponents.sh
      interactive: false
    windows:
      run: scripts/fetchComponents.ps1
      interactive: false
  preprovision:
    windows:
      run: scripts/zeroTrustHeadsUp.ps1
      interactive: true
    posix:
      run: scripts/zeroTrustHeadsUp.sh
      interactive: true
  postprovision:
    posix:
      run: scripts/postprovision.sh
      interactive: true
    windows:
      run: scripts/postprovision.ps1
      interactive: true
  predeploy:
    posix:
      run: scripts/preDeploy.sh
      interactive: true
    windows:
      run: scripts/preDeploy.ps1
      interactive: true
  postdeploy:
    posix:
      run: scripts/cleanComponents.sh
      interactive: false
    windows:
      run: scripts/cleanComponents.ps1
      interactive: false
