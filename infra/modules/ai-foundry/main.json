{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "languageVersion": "2.0",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.37.4.10188",
      "templateHash": "15287758671053680608"
    },
    "name": "ai-foundry",
    "description": "Creates an AI Foundry account and project with Standard Agent Services."
  },
  "definitions": {
    "resourceConfigurationType": {
      "type": "object",
      "properties": {
        "existingResourceId": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. Resource ID of an existing resource to use instead of creating a new one. If provided, other parameters are ignored."
          }
        },
        "name": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. Name to be used when creating the resource. This is ignored if an existingResourceId is provided."
          }
        },
        "privateDnsZoneResourceId": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. The Resource ID of the Private DNS Zone that associates with the resource. This is required to establish a Private Endpoint and when 'privateEndpointSubnetResourceId' is provided."
          }
        },
        "roleAssignments": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/roleAssignmentType"
          },
          "nullable": true,
          "metadata": {
            "description": "Optional. Role assignments to apply to the resource when creating it. This is ignored if an existingResourceId is provided."
          }
        }
      },
      "metadata": {
        "__bicep_export!": true,
        "description": "Custom configuration for a resource, including optional name, existing resource ID, and role assignments."
      }
    },
    "storageAccountConfigurationType": {
      "type": "object",
      "properties": {
        "existingResourceId": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. Resource Id of an existing Storage Account to use instead of creating a new one. If provided, other parameters are ignored."
          }
        },
        "name": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. Name to be used when creating the Storage Account. This is ignored if an existingResourceId is provided."
          }
        },
        "blobPrivateDnsZoneResourceId": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. The Resource ID of the DNS zone \"blob\" for the Azure Storage Account. This is required to establish a Private Endpoint and when 'privateEndpointSubnetResourceId' is provided."
          }
        },
        "roleAssignments": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/roleAssignmentType"
          },
          "nullable": true,
          "metadata": {
            "description": "Optional. Role assignments to apply to the resource when creating it. This is ignored if an existingResourceId is provided."
          }
        }
      },
      "metadata": {
        "__bicep_export!": true,
        "description": "Custom configuration for a Storage Account, including optional name, existing resource ID, containers, and role assignments."
      }
    },
    "foundryConfigurationType": {
      "type": "object",
      "properties": {
        "accountName": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. The name of the AI Foundry account."
          }
        },
        "location": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. The location of the AI Foundry account. Will default to the resource group location if not specified."
          }
        },
        "sku": {
          "type": "string",
          "allowedValues": [
            "C2",
            "C3",
            "C4",
            "DC0",
            "F0",
            "F1",
            "S",
            "S0",
            "S1",
            "S10",
            "S2",
            "S3",
            "S4",
            "S5",
            "S6",
            "S7",
            "S8",
            "S9"
          ],
          "nullable": true,
          "metadata": {
            "description": "Optional. SKU of the AI Foundry / Cognitive Services account. Use 'Get-AzCognitiveServicesAccountSku' to determine a valid combinations of 'kind' and 'SKU' for your Azure region. Defaults to 'S0'."
          }
        },
        "createCapabilityHosts": {
          "type": "bool",
          "nullable": true,
          "metadata": {
            "description": "Optional. Whether to create Capability Hosts for the AI Agent Service. If true, the AI Foundry Account and default Project will be created with the capability host for the associated resources. Can only be true if 'includeAssociatedResources' is true. Defaults to false."
          }
        },
        "allowProjectManagement": {
          "type": "bool",
          "nullable": true,
          "metadata": {
            "description": "Optional. Whether to allow project management in the AI Foundry account. If true, users can create and manage projects within the AI Foundry account. Defaults to true."
          }
        },
        "networking": {
          "$ref": "#/definitions/foundryNetworkConfigurationType",
          "nullable": true,
          "metadata": {
            "description": "Optional. Values to establish private networking for the AI Foundry account and project."
          }
        },
        "project": {
          "$ref": "#/definitions/foundryProjectConfigurationType",
          "nullable": true,
          "metadata": {
            "description": "Optional. AI Foundry default project."
          }
        },
        "roleAssignments": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/roleAssignmentType"
          },
          "nullable": true,
          "metadata": {
            "description": "Optional. Role assignments to apply to the AI Foundry resource when creating it."
          }
        }
      },
      "metadata": {
        "__bicep_export!": true,
        "description": "Custom configuration for a AI Foundry, including optional account name and project configuration."
      }
    },
    "foundryNetworkConfigurationType": {
      "type": "object",
      "properties": {
        "agentServiceSubnetResourceId": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. The Resource ID of the subnet for the Azure AI Services account. This is required if 'createAIAgentService' is true."
          }
        },
        "cognitiveServicesPrivateDnsZoneResourceId": {
          "type": "string",
          "metadata": {
            "description": "Required. The Resource ID of the Private DNS Zone for the Azure AI Services account."
          }
        },
        "openAiPrivateDnsZoneResourceId": {
          "type": "string",
          "metadata": {
            "description": "Required. The Resource ID of the Private DNS Zone for the OpenAI account."
          }
        },
        "aiServicesPrivateDnsZoneResourceId": {
          "type": "string",
          "metadata": {
            "description": "Required. The Resource ID of the Private DNS Zone for the Azure AI Services account."
          }
        }
      },
      "metadata": {
        "__bicep_export!": true,
        "description": "Values to establish private networking for the AI Foundry service."
      }
    },
    "foundryProjectConfigurationType": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. The name of the AI Foundry project."
          }
        },
        "displayName": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. The friendly/display name of the AI Foundry project."
          }
        },
        "desc": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. The description of the AI Foundry project."
          }
        }
      },
      "metadata": {
        "__bicep_export!": true,
        "description": "Custom configuration for an AI Foundry project, including optional name, friendly name, and description."
      }
    },
    "deploymentType": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. Specify the name of cognitive service account deployment."
          }
        },
        "model": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "metadata": {
                "description": "Required. The name of Cognitive Services account deployment model."
              }
            },
            "format": {
              "type": "string",
              "metadata": {
                "description": "Required. The format of Cognitive Services account deployment model."
              }
            },
            "version": {
              "type": "string",
              "metadata": {
                "description": "Required. The version of Cognitive Services account deployment model."
              }
            }
          },
          "metadata": {
            "description": "Required. Properties of Cognitive Services account deployment model."
          }
        },
        "sku": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "metadata": {
                "description": "Required. The name of the resource model definition representing SKU."
              }
            },
            "capacity": {
              "type": "int",
              "nullable": true,
              "metadata": {
                "description": "Optional. The capacity of the resource model definition representing SKU."
              }
            },
            "tier": {
              "type": "string",
              "nullable": true,
              "metadata": {
                "description": "Optional. The tier of the resource model definition representing SKU."
              }
            },
            "size": {
              "type": "string",
              "nullable": true,
              "metadata": {
                "description": "Optional. The size of the resource model definition representing SKU."
              }
            },
            "family": {
              "type": "string",
              "nullable": true,
              "metadata": {
                "description": "Optional. The family of the resource model definition representing SKU."
              }
            }
          },
          "nullable": true,
          "metadata": {
            "description": "Optional. The resource model definition representing SKU."
          }
        },
        "raiPolicyName": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. The name of RAI policy."
          }
        },
        "versionUpgradeOption": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. The version upgrade option."
          }
        }
      },
      "metadata": {
        "description": "The type for a cognitive services account deployment.",
        "__bicep_imported_from!": {
          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/res/cognitive-services/account:0.12.0"
        }
      }
    },
    "lockType": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. Specify the name of lock."
          }
        },
        "kind": {
          "type": "string",
          "allowedValues": [
            "CanNotDelete",
            "None",
            "ReadOnly"
          ],
          "nullable": true,
          "metadata": {
            "description": "Optional. Specify the type of lock."
          }
        },
        "notes": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. Specify the notes of the lock."
          }
        }
      },
      "metadata": {
        "description": "An AVM-aligned type for a lock.",
        "__bicep_imported_from!": {
          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.6.1"
        }
      }
    },
    "roleAssignmentType": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. The name (as GUID) of the role assignment. If not provided, a GUID will be generated."
          }
        },
        "roleDefinitionIdOrName": {
          "type": "string",
          "metadata": {
            "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
          }
        },
        "principalId": {
          "type": "string",
          "metadata": {
            "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
          }
        },
        "principalType": {
          "type": "string",
          "allowedValues": [
            "Device",
            "ForeignGroup",
            "Group",
            "ServicePrincipal",
            "User"
          ],
          "nullable": true,
          "metadata": {
            "description": "Optional. The principal type of the assigned principal ID."
          }
        },
        "description": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. The description of the role assignment."
          }
        },
        "condition": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
          }
        },
        "conditionVersion": {
          "type": "string",
          "allowedValues": [
            "2.0"
          ],
          "nullable": true,
          "metadata": {
            "description": "Optional. Version of the condition."
          }
        },
        "delegatedManagedIdentityResourceId": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. The Resource Id of the delegated managed identity resource."
          }
        }
      },
      "metadata": {
        "description": "An AVM-aligned type for a role assignment.",
        "__bicep_imported_from!": {
          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.6.0"
        }
      }
    }
  },
  "parameters": {
    "baseName": {
      "type": "string",
      "minLength": 3,
      "maxLength": 12,
      "metadata": {
        "description": "Required. A friendly application/environment name to serve as the \"base\" when using the default naming for all resources in this deployment."
      }
    },
    "baseUniqueName": {
      "type": "string",
      "defaultValue": "[substring(uniqueString(subscription().id, resourceGroup().name, parameters('baseName')), 0, 5)]",
      "maxLength": 5,
      "metadata": {
        "description": "Optional. A unique text value for the application/environment. This is used to ensure resource names are unique for global resources. Defaults to a 5-character substring of the unique string generated from the subscription ID, resource group name, and base name."
      }
    },
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "Optional. Location for all Resources. Defaults to the location of the resource group."
      }
    },
    "enableTelemetry": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Optional. Enable/Disable usage telemetry for module."
      }
    },
    "aiModelDeployments": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/deploymentType"
      },
      "defaultValue": [],
      "metadata": {
        "description": "Optional. Specifies the OpenAI deployments to create."
      }
    },
    "tags": {
      "type": "object",
      "metadata": {
        "__bicep_resource_derived_type!": {
          "source": "Microsoft.Resources/resourceGroups@2025-04-01#properties/tags"
        },
        "description": "Optional. Specifies the resource tags for all the resources."
      },
      "defaultValue": {}
    },
    "lock": {
      "$ref": "#/definitions/lockType",
      "nullable": true,
      "metadata": {
        "description": "Optional. The lock settings of the AI resources."
      }
    },
    "includeAssociatedResources": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Optional. Whether to include associated resources: Key Vault, AI Search, Storage Account, and Cosmos DB. If true, these resources will be created. Optionally, existing resources of these types can be supplied in their respective parameters. Defaults to false."
      }
    },
    "privateEndpointSubnetResourceId": {
      "type": "string",
      "nullable": true,
      "metadata": {
        "description": "Optional. The Resource ID of the subnet to establish Private Endpoint(s). If provided, private endpoints will be created for the AI Foundry account and associated resources when creating those resource. Each resource will also require supplied private DNS zone resource ID(s) to establish those private endpoints."
      }
    },
    "aiFoundryConfiguration": {
      "$ref": "#/definitions/foundryConfigurationType",
      "nullable": true,
      "metadata": {
        "description": "Optional. Custom configuration for the AI Foundry."
      }
    },
    "keyVaultConfiguration": {
      "$ref": "#/definitions/resourceConfigurationType",
      "nullable": true,
      "metadata": {
        "description": "Optional. Custom configuration for the Key Vault."
      }
    },
    "aiSearchConfiguration": {
      "$ref": "#/definitions/resourceConfigurationType",
      "nullable": true,
      "metadata": {
        "description": "Optional. Custom configuration for the AI Search resource."
      }
    },
    "storageAccountConfiguration": {
      "$ref": "#/definitions/storageAccountConfigurationType",
      "nullable": true,
      "metadata": {
        "description": "Optional. Custom configuration for the Storage Account."
      }
    },
    "cosmosDbConfiguration": {
      "$ref": "#/definitions/resourceConfigurationType",
      "nullable": true,
      "metadata": {
        "description": "Optional. Custom configuration for the Cosmos DB Account."
      }
    }
  },
  "variables": {
    "resourcesName": "[toLower(trim(replace(replace(replace(replace(replace(replace(format('{0}{1}', parameters('baseName'), parameters('baseUniqueName')), '-', ''), '_', ''), '.', ''), '/', ''), ' ', ''), '*', '')))]",
    "projectName": "[if(not(empty(tryGet(tryGet(parameters('aiFoundryConfiguration'), 'project'), 'name'))), parameters('aiFoundryConfiguration').project.name, format('proj-{0}', variables('resourcesName')))]",
    "createCapabilityHosts": "[and(coalesce(tryGet(parameters('aiFoundryConfiguration'), 'createCapabilityHosts'), false()), parameters('includeAssociatedResources'))]"
  },
  "resources": {
    "avmTelemetry": {
      "condition": "[parameters('enableTelemetry')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2024-03-01",
      "name": "[format('46d3xbcp.ptn.aiml-aifoundry.{0}.{1}', replace('-..--..-', '.', '-'), substring(uniqueString(deployment().name, parameters('location')), 0, 4))]",
      "properties": {
        "mode": "Incremental",
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "resources": [],
          "outputs": {
            "telemetry": {
              "type": "String",
              "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
            }
          }
        }
      }
    },
    "foundryAccount": {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[take(format('module.account.{0}', variables('resourcesName')), 64)]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "name": "[if(not(empty(tryGet(parameters('aiFoundryConfiguration'), 'accountName'))), createObject('value', parameters('aiFoundryConfiguration').accountName), createObject('value', format('ai{0}', variables('resourcesName'))))]",
          "location": "[if(not(empty(tryGet(parameters('aiFoundryConfiguration'), 'location'))), createObject('value', parameters('aiFoundryConfiguration').location), createObject('value', parameters('location')))]",
          "sku": "[if(not(empty(tryGet(parameters('aiFoundryConfiguration'), 'sku'))), createObject('value', parameters('aiFoundryConfiguration').sku), createObject('value', 'S0'))]",
          "allowProjectManagement": {
            "value": "[coalesce(tryGet(parameters('aiFoundryConfiguration'), 'allowProjectManagement'), true())]"
          },
          "aiModelDeployments": {
            "value": "[parameters('aiModelDeployments')]"
          },
          "privateEndpointSubnetResourceId": {
            "value": "[parameters('privateEndpointSubnetResourceId')]"
          },
          "agentSubnetResourceId": {
            "value": "[tryGet(tryGet(parameters('aiFoundryConfiguration'), 'networking'), 'agentServiceSubnetResourceId')]"
          },
          "privateDnsZoneResourceIds": "[if(and(not(empty(parameters('privateEndpointSubnetResourceId'))), not(empty(tryGet(parameters('aiFoundryConfiguration'), 'networking')))), createObject('value', createArray(parameters('aiFoundryConfiguration').networking.cognitiveServicesPrivateDnsZoneResourceId, parameters('aiFoundryConfiguration').networking.openAiPrivateDnsZoneResourceId, parameters('aiFoundryConfiguration').networking.aiServicesPrivateDnsZoneResourceId)), createObject('value', createArray()))]",
          "roleAssignments": {
            "value": "[tryGet(parameters('aiFoundryConfiguration'), 'roleAssignments')]"
          },
          "tags": {
            "value": "[parameters('tags')]"
          },
          "enableTelemetry": {
            "value": "[parameters('enableTelemetry')]"
          },
          "lock": {
            "value": "[parameters('lock')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "languageVersion": "2.0",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "7176206729749411912"
            }
          },
          "definitions": {
            "deploymentType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Specify the name of cognitive service account deployment."
                  }
                },
                "model": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The name of Cognitive Services account deployment model."
                      }
                    },
                    "format": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The format of Cognitive Services account deployment model."
                      }
                    },
                    "version": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The version of Cognitive Services account deployment model."
                      }
                    }
                  },
                  "metadata": {
                    "description": "Required. Properties of Cognitive Services account deployment model."
                  }
                },
                "sku": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The name of the resource model definition representing SKU."
                      }
                    },
                    "capacity": {
                      "type": "int",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The capacity of the resource model definition representing SKU."
                      }
                    },
                    "tier": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The tier of the resource model definition representing SKU."
                      }
                    },
                    "size": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The size of the resource model definition representing SKU."
                      }
                    },
                    "family": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The family of the resource model definition representing SKU."
                      }
                    }
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The resource model definition representing SKU."
                  }
                },
                "raiPolicyName": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The name of RAI policy."
                  }
                },
                "versionUpgradeOption": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The version upgrade option."
                  }
                }
              },
              "metadata": {
                "description": "The type for a cognitive services account deployment.",
                "__bicep_imported_from!": {
                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/res/cognitive-services/account:0.12.0"
                }
              }
            },
            "lockType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Specify the name of lock."
                  }
                },
                "kind": {
                  "type": "string",
                  "allowedValues": [
                    "CanNotDelete",
                    "None",
                    "ReadOnly"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Specify the type of lock."
                  }
                },
                "notes": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Specify the notes of the lock."
                  }
                }
              },
              "metadata": {
                "description": "An AVM-aligned type for a lock.",
                "__bicep_imported_from!": {
                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.6.0"
                }
              }
            },
            "roleAssignmentType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The name (as GUID) of the role assignment. If not provided, a GUID will be generated."
                  }
                },
                "roleDefinitionIdOrName": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                  }
                },
                "principalId": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                  }
                },
                "principalType": {
                  "type": "string",
                  "allowedValues": [
                    "Device",
                    "ForeignGroup",
                    "Group",
                    "ServicePrincipal",
                    "User"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The principal type of the assigned principal ID."
                  }
                },
                "description": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The description of the role assignment."
                  }
                },
                "condition": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                  }
                },
                "conditionVersion": {
                  "type": "string",
                  "allowedValues": [
                    "2.0"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Version of the condition."
                  }
                },
                "delegatedManagedIdentityResourceId": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The Resource Id of the delegated managed identity resource."
                  }
                }
              },
              "metadata": {
                "description": "An AVM-aligned type for a role assignment.",
                "__bicep_imported_from!": {
                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.6.0"
                }
              }
            }
          },
          "parameters": {
            "name": {
              "type": "string",
              "metadata": {
                "description": "Required. The name of the AI Foundry resource."
              }
            },
            "location": {
              "type": "string",
              "metadata": {
                "description": "Required. The location for the AI Foundry resource."
              }
            },
            "sku": {
              "type": "string",
              "defaultValue": "S0",
              "allowedValues": [
                "C2",
                "C3",
                "C4",
                "F0",
                "F1",
                "S",
                "S0",
                "S1",
                "S10",
                "S2",
                "S3",
                "S4",
                "S5",
                "S6",
                "S7",
                "S8",
                "S9",
                "DC0"
              ],
              "metadata": {
                "description": "Optional. SKU of the AI Foundry / Cognitive Services account. Use 'Get-AzCognitiveServicesAccountSku' to determine a valid combinations of 'kind' and 'SKU' for your Azure region."
              }
            },
            "allowProjectManagement": {
              "type": "bool",
              "metadata": {
                "description": "Required. Whether to allow project management in AI Foundry. This is required to enable the AI Foundry UI and project management features."
              }
            },
            "privateEndpointSubnetResourceId": {
              "type": "string",
              "nullable": true,
              "metadata": {
                "description": "Optional. Resource Id of an existing subnet to use for private connectivity. This is required along with 'privateDnsZoneResourceIds' to establish private endpoints."
              }
            },
            "agentSubnetResourceId": {
              "type": "string",
              "nullable": true,
              "metadata": {
                "description": "Optional. Resource Id of an existing subnet to use for agent connectivity. This is required when using agents with private endpoints."
              }
            },
            "roleAssignments": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/roleAssignmentType"
              },
              "nullable": true,
              "metadata": {
                "description": "Optional. Specifies the role assignments for the AI Foundry resource."
              }
            },
            "lock": {
              "$ref": "#/definitions/lockType",
              "nullable": true,
              "metadata": {
                "description": "Optional. The lock settings of AI Foundry resources."
              }
            },
            "aiModelDeployments": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/deploymentType"
              },
              "defaultValue": [],
              "metadata": {
                "description": "Optional. Specifies the OpenAI deployments to create."
              }
            },
            "privateDnsZoneResourceIds": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "nullable": true,
              "metadata": {
                "description": "Optional. List of private DNS zone resource IDs to use for the AI Foundry resource. This is required when using private endpoints."
              }
            },
            "enableTelemetry": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Optional. Enable/Disable usage telemetry for module."
              }
            },
            "tags": {
              "type": "object",
              "metadata": {
                "__bicep_resource_derived_type!": {
                  "source": "Microsoft.Resources/resourceGroups@2025-04-01#properties/tags"
                },
                "description": "Optional. Specifies the resource tags for all the resources."
              },
              "defaultValue": {}
            }
          },
          "variables": {
            "copy": [
              {
                "name": "privateDnsZoneResourceIdValues",
                "count": "[length(coalesce(parameters('privateDnsZoneResourceIds'), createArray()))]",
                "input": {
                  "privateDnsZoneResourceId": "[coalesce(parameters('privateDnsZoneResourceIds'), createArray())[copyIndex('privateDnsZoneResourceIdValues')]]"
                }
              }
            ],
            "privateNetworkingEnabled": "[and(not(empty(variables('privateDnsZoneResourceIdValues'))), not(empty(parameters('privateEndpointSubnetResourceId'))))]"
          },
          "resources": {
            "foundryAccount": {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[take(format('avm.res.cognitive-services.account.{0}', parameters('name')), 64)]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "[parameters('name')]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  },
                  "sku": {
                    "value": "[parameters('sku')]"
                  },
                  "kind": {
                    "value": "AIServices"
                  },
                  "lock": {
                    "value": "[parameters('lock')]"
                  },
                  "allowProjectManagement": {
                    "value": "[parameters('allowProjectManagement')]"
                  },
                  "managedIdentities": {
                    "value": {
                      "systemAssigned": true
                    }
                  },
                  "deployments": {
                    "value": "[parameters('aiModelDeployments')]"
                  },
                  "customSubDomainName": {
                    "value": "[parameters('name')]"
                  },
                  "disableLocalAuth": {
                    "value": false
                  },
                  "publicNetworkAccess": "[if(variables('privateNetworkingEnabled'), createObject('value', 'Disabled'), createObject('value', 'Enabled'))]",
                  "networkAcls": {
                    "value": {
                      "defaultAction": "Allow",
                      "bypass": "AzureServices"
                    }
                  },
                  "networkInjections": "[if(and(variables('privateNetworkingEnabled'), not(empty(parameters('agentSubnetResourceId')))), createObject('value', createObject('scenario', 'agent', 'subnetResourceId', parameters('agentSubnetResourceId'), 'useMicrosoftManagedNetwork', false())), createObject('value', null()))]",
                  "privateEndpoints": "[if(variables('privateNetworkingEnabled'), createObject('value', createArray(createObject('privateDnsZoneGroup', createObject('privateDnsZoneGroupConfigs', variables('privateDnsZoneResourceIdValues')), 'subnetResourceId', parameters('privateEndpointSubnetResourceId')))), createObject('value', createArray()))]",
                  "enableTelemetry": {
                    "value": "[parameters('enableTelemetry')]"
                  },
                  "roleAssignments": {
                    "value": "[parameters('roleAssignments')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "languageVersion": "2.0",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.37.4.10188",
                      "templateHash": "18408784030873090876"
                    },
                    "name": "Cognitive Services",
                    "description": "This module deploys a Cognitive Service."
                  },
                  "definitions": {
                    "privateEndpointOutputType": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "metadata": {
                            "description": "The name of the private endpoint."
                          }
                        },
                        "resourceId": {
                          "type": "string",
                          "metadata": {
                            "description": "The resource ID of the private endpoint."
                          }
                        },
                        "groupId": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "The group Id for the private endpoint Group."
                          }
                        },
                        "customDnsConfigs": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "fqdn": {
                                "type": "string",
                                "nullable": true,
                                "metadata": {
                                  "description": "FQDN that resolves to private endpoint IP address."
                                }
                              },
                              "ipAddresses": {
                                "type": "array",
                                "items": {
                                  "type": "string"
                                },
                                "metadata": {
                                  "description": "A list of private IP addresses of the private endpoint."
                                }
                              }
                            }
                          },
                          "metadata": {
                            "description": "The custom DNS configurations of the private endpoint."
                          }
                        },
                        "networkInterfaceResourceIds": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "metadata": {
                            "description": "The IDs of the network interfaces associated with the private endpoint."
                          }
                        }
                      },
                      "metadata": {
                        "__bicep_export!": true,
                        "description": "The type for the private endpoint output."
                      }
                    },
                    "deploymentType": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Specify the name of cognitive service account deployment."
                          }
                        },
                        "model": {
                          "type": "object",
                          "properties": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The name of Cognitive Services account deployment model."
                              }
                            },
                            "format": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The format of Cognitive Services account deployment model."
                              }
                            },
                            "version": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The version of Cognitive Services account deployment model."
                              }
                            }
                          },
                          "metadata": {
                            "description": "Required. Properties of Cognitive Services account deployment model."
                          }
                        },
                        "sku": {
                          "type": "object",
                          "properties": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The name of the resource model definition representing SKU."
                              }
                            },
                            "capacity": {
                              "type": "int",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The capacity of the resource model definition representing SKU."
                              }
                            },
                            "tier": {
                              "type": "string",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The tier of the resource model definition representing SKU."
                              }
                            },
                            "size": {
                              "type": "string",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The size of the resource model definition representing SKU."
                              }
                            },
                            "family": {
                              "type": "string",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The family of the resource model definition representing SKU."
                              }
                            }
                          },
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The resource model definition representing SKU."
                          }
                        },
                        "raiPolicyName": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The name of RAI policy."
                          }
                        },
                        "versionUpgradeOption": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The version upgrade option."
                          }
                        }
                      },
                      "metadata": {
                        "__bicep_export!": true,
                        "description": "The type for a cognitive services account deployment."
                      }
                    },
                    "endpointType": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Type of the endpoint."
                          }
                        },
                        "endpoint": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "The endpoint URI."
                          }
                        }
                      },
                      "metadata": {
                        "__bicep_export!": true,
                        "description": "The type for a cognitive services account endpoint."
                      }
                    },
                    "secretsExportConfigurationType": {
                      "type": "object",
                      "properties": {
                        "keyVaultResourceId": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The key vault name where to store the keys and connection strings generated by the modules."
                          }
                        },
                        "accessKey1Name": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The name for the accessKey1 secret to create."
                          }
                        },
                        "accessKey2Name": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The name for the accessKey2 secret to create."
                          }
                        }
                      },
                      "metadata": {
                        "__bicep_export!": true,
                        "description": "The type of the secrets exported to the provided Key Vault."
                      }
                    },
                    "commitmentPlanType": {
                      "type": "object",
                      "properties": {
                        "autoRenew": {
                          "type": "bool",
                          "metadata": {
                            "description": "Required. Whether the plan should auto-renew at the end of the current commitment period."
                          }
                        },
                        "current": {
                          "type": "object",
                          "properties": {
                            "count": {
                              "type": "int",
                              "metadata": {
                                "description": "Required. The number of committed instances (e.g., number of containers or cores)."
                              }
                            },
                            "tier": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The tier of the commitment plan (e.g., T1, T2)."
                              }
                            }
                          },
                          "metadata": {
                            "description": "Required. The current commitment configuration."
                          }
                        },
                        "hostingModel": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The hosting model for the commitment plan. (e.g., DisconnectedContainer, ConnectedContainer, ProvisionedWeb, Web)."
                          }
                        },
                        "planType": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The plan type indicating which capability the plan applies to (e.g., NTTS, STT, CUSTOMSTT, ADDON)."
                          }
                        },
                        "commitmentPlanGuid": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The unique identifier of an existing commitment plan to update. Set to null to create a new plan."
                          }
                        },
                        "next": {
                          "type": "object",
                          "properties": {
                            "count": {
                              "type": "int",
                              "metadata": {
                                "description": "Required. The number of committed instances for the next period."
                              }
                            },
                            "tier": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The tier for the next commitment period."
                              }
                            }
                          },
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The configuration of the next commitment period, if scheduled."
                          }
                        }
                      },
                      "metadata": {
                        "__bicep_export!": true,
                        "description": "The type for a disconnected container commitment plan."
                      }
                    },
                    "networkInjectionType": {
                      "type": "object",
                      "properties": {
                        "scenario": {
                          "type": "string",
                          "allowedValues": [
                            "agent",
                            "none"
                          ],
                          "metadata": {
                            "description": "Required. The scenario for the network injection."
                          }
                        },
                        "subnetResourceId": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The Resource ID of the subnet on the Virtual Network on which to inject."
                          }
                        },
                        "useMicrosoftManagedNetwork": {
                          "type": "bool",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Whether to use Microsoft Managed Network. Defaults to false."
                          }
                        }
                      },
                      "metadata": {
                        "__bicep_export!": true,
                        "description": "Type for network configuration in AI Foundry where virtual network injection occurs to secure scenarios like Agents entirely within a private network."
                      }
                    },
                    "_1.privateEndpointCustomDnsConfigType": {
                      "type": "object",
                      "properties": {
                        "fqdn": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. FQDN that resolves to private endpoint IP address."
                          }
                        },
                        "ipAddresses": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "metadata": {
                            "description": "Required. A list of private IP addresses of the private endpoint."
                          }
                        }
                      },
                      "metadata": {
                        "__bicep_imported_from!": {
                          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.6.0"
                        }
                      }
                    },
                    "_1.privateEndpointIpConfigurationType": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The name of the resource that is unique within a resource group."
                          }
                        },
                        "properties": {
                          "type": "object",
                          "properties": {
                            "groupId": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The ID of a group obtained from the remote resource that this private endpoint should connect to."
                              }
                            },
                            "memberName": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The member name of a group obtained from the remote resource that this private endpoint should connect to."
                              }
                            },
                            "privateIPAddress": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. A private IP address obtained from the private endpoint's subnet."
                              }
                            }
                          },
                          "metadata": {
                            "description": "Required. Properties of private endpoint IP configurations."
                          }
                        }
                      },
                      "metadata": {
                        "__bicep_imported_from!": {
                          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.6.0"
                        }
                      }
                    },
                    "_1.privateEndpointPrivateDnsZoneGroupType": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The name of the Private DNS Zone Group."
                          }
                        },
                        "privateDnsZoneGroupConfigs": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "name": {
                                "type": "string",
                                "nullable": true,
                                "metadata": {
                                  "description": "Optional. The name of the private DNS Zone Group config."
                                }
                              },
                              "privateDnsZoneResourceId": {
                                "type": "string",
                                "metadata": {
                                  "description": "Required. The resource id of the private DNS zone."
                                }
                              }
                            }
                          },
                          "metadata": {
                            "description": "Required. The private DNS Zone Groups to associate the Private Endpoint. A DNS Zone Group can support up to 5 DNS zones."
                          }
                        }
                      },
                      "metadata": {
                        "__bicep_imported_from!": {
                          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.6.0"
                        }
                      }
                    },
                    "_1.secretSetOutputType": {
                      "type": "object",
                      "properties": {
                        "secretResourceId": {
                          "type": "string",
                          "metadata": {
                            "description": "The resourceId of the exported secret."
                          }
                        },
                        "secretUri": {
                          "type": "string",
                          "metadata": {
                            "description": "The secret URI of the exported secret."
                          }
                        },
                        "secretUriWithVersion": {
                          "type": "string",
                          "metadata": {
                            "description": "The secret URI with version of the exported secret."
                          }
                        }
                      },
                      "metadata": {
                        "description": "An AVM-aligned type for the output of the secret set via the secrets export feature.",
                        "__bicep_imported_from!": {
                          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.6.0"
                        }
                      }
                    },
                    "customerManagedKeyType": {
                      "type": "object",
                      "properties": {
                        "keyVaultResourceId": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The resource ID of a key vault to reference a customer managed key for encryption from."
                          }
                        },
                        "keyName": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The name of the customer managed key to use for encryption."
                          }
                        },
                        "keyVersion": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The version of the customer managed key to reference for encryption. If not provided, the deployment will use the latest version available at deployment time."
                          }
                        },
                        "userAssignedIdentityResourceId": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. User assigned identity to use when fetching the customer managed key. Required if no system assigned identity is available for use."
                          }
                        }
                      },
                      "metadata": {
                        "description": "An AVM-aligned type for a customer-managed key. To be used if the resource type does not support auto-rotation of the customer-managed key.",
                        "__bicep_imported_from!": {
                          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.6.0"
                        }
                      }
                    },
                    "diagnosticSettingFullType": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The name of the diagnostic setting."
                          }
                        },
                        "logCategoriesAndGroups": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "category": {
                                "type": "string",
                                "nullable": true,
                                "metadata": {
                                  "description": "Optional. Name of a Diagnostic Log category for a resource type this setting is applied to. Set the specific logs to collect here."
                                }
                              },
                              "categoryGroup": {
                                "type": "string",
                                "nullable": true,
                                "metadata": {
                                  "description": "Optional. Name of a Diagnostic Log category group for a resource type this setting is applied to. Set to `allLogs` to collect all logs."
                                }
                              },
                              "enabled": {
                                "type": "bool",
                                "nullable": true,
                                "metadata": {
                                  "description": "Optional. Enable or disable the category explicitly. Default is `true`."
                                }
                              }
                            }
                          },
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The name of logs that will be streamed. \"allLogs\" includes all possible logs for the resource. Set to `[]` to disable log collection."
                          }
                        },
                        "metricCategories": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "category": {
                                "type": "string",
                                "metadata": {
                                  "description": "Required. Name of a Diagnostic Metric category for a resource type this setting is applied to. Set to `AllMetrics` to collect all metrics."
                                }
                              },
                              "enabled": {
                                "type": "bool",
                                "nullable": true,
                                "metadata": {
                                  "description": "Optional. Enable or disable the category explicitly. Default is `true`."
                                }
                              }
                            }
                          },
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The name of metrics that will be streamed. \"allMetrics\" includes all possible metrics for the resource. Set to `[]` to disable metric collection."
                          }
                        },
                        "logAnalyticsDestinationType": {
                          "type": "string",
                          "allowedValues": [
                            "AzureDiagnostics",
                            "Dedicated"
                          ],
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. A string indicating whether the export to Log Analytics should use the default destination type, i.e. AzureDiagnostics, or use a destination type."
                          }
                        },
                        "workspaceResourceId": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Resource ID of the diagnostic log analytics workspace. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                          }
                        },
                        "storageAccountResourceId": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Resource ID of the diagnostic storage account. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                          }
                        },
                        "eventHubAuthorizationRuleResourceId": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
                          }
                        },
                        "eventHubName": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                          }
                        },
                        "marketplacePartnerResourceId": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The full ARM resource ID of the Marketplace resource to which you would like to send Diagnostic Logs."
                          }
                        }
                      },
                      "metadata": {
                        "description": "An AVM-aligned type for a diagnostic setting. To be used if both logs & metrics are supported by the resource provider.",
                        "__bicep_imported_from!": {
                          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.6.0"
                        }
                      }
                    },
                    "lockType": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Specify the name of lock."
                          }
                        },
                        "kind": {
                          "type": "string",
                          "allowedValues": [
                            "CanNotDelete",
                            "None",
                            "ReadOnly"
                          ],
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Specify the type of lock."
                          }
                        },
                        "notes": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Specify the notes of the lock."
                          }
                        }
                      },
                      "metadata": {
                        "description": "An AVM-aligned type for a lock.",
                        "__bicep_imported_from!": {
                          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.6.0"
                        }
                      }
                    },
                    "managedIdentityAllType": {
                      "type": "object",
                      "properties": {
                        "systemAssigned": {
                          "type": "bool",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Enables system assigned managed identity on the resource."
                          }
                        },
                        "userAssignedResourceIds": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The resource ID(s) to assign to the resource. Required if a user assigned identity is used for encryption."
                          }
                        }
                      },
                      "metadata": {
                        "description": "An AVM-aligned type for a managed identity configuration. To be used if both a system-assigned & user-assigned identities are supported by the resource provider.",
                        "__bicep_imported_from!": {
                          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.6.0"
                        }
                      }
                    },
                    "privateEndpointSingleServiceType": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The name of the Private Endpoint."
                          }
                        },
                        "location": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The location to deploy the Private Endpoint to."
                          }
                        },
                        "privateLinkServiceConnectionName": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The name of the private link connection to create."
                          }
                        },
                        "service": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The subresource to deploy the Private Endpoint for. For example \"vault\" for a Key Vault Private Endpoint."
                          }
                        },
                        "subnetResourceId": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. Resource ID of the subnet where the endpoint needs to be created."
                          }
                        },
                        "resourceGroupResourceId": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The resource ID of the Resource Group the Private Endpoint will be created in. If not specified, the Resource Group of the provided Virtual Network Subnet is used."
                          }
                        },
                        "privateDnsZoneGroup": {
                          "$ref": "#/definitions/_1.privateEndpointPrivateDnsZoneGroupType",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The private DNS Zone Group to configure for the Private Endpoint."
                          }
                        },
                        "isManualConnection": {
                          "type": "bool",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. If Manual Private Link Connection is required."
                          }
                        },
                        "manualConnectionRequestMessage": {
                          "type": "string",
                          "nullable": true,
                          "maxLength": 140,
                          "metadata": {
                            "description": "Optional. A message passed to the owner of the remote resource with the manual connection request."
                          }
                        },
                        "customDnsConfigs": {
                          "type": "array",
                          "items": {
                            "$ref": "#/definitions/_1.privateEndpointCustomDnsConfigType"
                          },
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Custom DNS configurations."
                          }
                        },
                        "ipConfigurations": {
                          "type": "array",
                          "items": {
                            "$ref": "#/definitions/_1.privateEndpointIpConfigurationType"
                          },
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. A list of IP configurations of the Private Endpoint. This will be used to map to the first-party Service endpoints."
                          }
                        },
                        "applicationSecurityGroupResourceIds": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Application security groups in which the Private Endpoint IP configuration is included."
                          }
                        },
                        "customNetworkInterfaceName": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The custom name of the network interface attached to the Private Endpoint."
                          }
                        },
                        "lock": {
                          "$ref": "#/definitions/lockType",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Specify the type of lock."
                          }
                        },
                        "roleAssignments": {
                          "type": "array",
                          "items": {
                            "$ref": "#/definitions/roleAssignmentType"
                          },
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Array of role assignments to create."
                          }
                        },
                        "tags": {
                          "type": "object",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Tags to be applied on all resources/Resource Groups in this deployment."
                          }
                        },
                        "enableTelemetry": {
                          "type": "bool",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Enable/Disable usage telemetry for module."
                          }
                        }
                      },
                      "metadata": {
                        "description": "An AVM-aligned type for a private endpoint. To be used if the private endpoint's default service / groupId can be assumed (i.e., for services that only have one Private Endpoint type like 'vault' for key vault).",
                        "__bicep_imported_from!": {
                          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.6.0"
                        }
                      }
                    },
                    "roleAssignmentType": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The name (as GUID) of the role assignment. If not provided, a GUID will be generated."
                          }
                        },
                        "roleDefinitionIdOrName": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                          }
                        },
                        "principalId": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                          }
                        },
                        "principalType": {
                          "type": "string",
                          "allowedValues": [
                            "Device",
                            "ForeignGroup",
                            "Group",
                            "ServicePrincipal",
                            "User"
                          ],
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The principal type of the assigned principal ID."
                          }
                        },
                        "description": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The description of the role assignment."
                          }
                        },
                        "condition": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                          }
                        },
                        "conditionVersion": {
                          "type": "string",
                          "allowedValues": [
                            "2.0"
                          ],
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Version of the condition."
                          }
                        },
                        "delegatedManagedIdentityResourceId": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The Resource Id of the delegated managed identity resource."
                          }
                        }
                      },
                      "metadata": {
                        "description": "An AVM-aligned type for a role assignment.",
                        "__bicep_imported_from!": {
                          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.6.0"
                        }
                      }
                    },
                    "secretsOutputType": {
                      "type": "object",
                      "properties": {},
                      "additionalProperties": {
                        "$ref": "#/definitions/_1.secretSetOutputType",
                        "metadata": {
                          "description": "An exported secret's references."
                        }
                      },
                      "metadata": {
                        "description": "A map of the exported secrets",
                        "__bicep_imported_from!": {
                          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.6.0"
                        }
                      }
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The name of Cognitive Services account."
                      }
                    },
                    "kind": {
                      "type": "string",
                      "allowedValues": [
                        "AIServices",
                        "AnomalyDetector",
                        "CognitiveServices",
                        "ComputerVision",
                        "ContentModerator",
                        "ContentSafety",
                        "ConversationalLanguageUnderstanding",
                        "CustomVision.Prediction",
                        "CustomVision.Training",
                        "Face",
                        "FormRecognizer",
                        "HealthInsights",
                        "ImmersiveReader",
                        "Internal.AllInOne",
                        "LUIS",
                        "LUIS.Authoring",
                        "LanguageAuthoring",
                        "MetricsAdvisor",
                        "OpenAI",
                        "Personalizer",
                        "QnAMaker.v2",
                        "SpeechServices",
                        "TextAnalytics",
                        "TextTranslation"
                      ],
                      "metadata": {
                        "description": "Required. Kind of the Cognitive Services account. Use 'Get-AzCognitiveServicesAccountSku' to determine a valid combinations of 'kind' and 'SKU' for your Azure region."
                      }
                    },
                    "sku": {
                      "type": "string",
                      "defaultValue": "S0",
                      "allowedValues": [
                        "C2",
                        "C3",
                        "C4",
                        "F0",
                        "F1",
                        "S",
                        "S0",
                        "S1",
                        "S10",
                        "S2",
                        "S3",
                        "S4",
                        "S5",
                        "S6",
                        "S7",
                        "S8",
                        "S9",
                        "DC0"
                      ],
                      "metadata": {
                        "description": "Optional. SKU of the Cognitive Services account. Use 'Get-AzCognitiveServicesAccountSku' to determine a valid combinations of 'kind' and 'SKU' for your Azure region."
                      }
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]",
                      "metadata": {
                        "description": "Optional. Location for all Resources."
                      }
                    },
                    "diagnosticSettings": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/diagnosticSettingFullType"
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The diagnostic settings of the service."
                      }
                    },
                    "publicNetworkAccess": {
                      "type": "string",
                      "nullable": true,
                      "allowedValues": [
                        "Enabled",
                        "Disabled"
                      ],
                      "metadata": {
                        "description": "Optional. Whether or not public network access is allowed for this resource. For security reasons it should be disabled. If not specified, it will be disabled by default if private endpoints are set and networkAcls are not set."
                      }
                    },
                    "customSubDomainName": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Conditional. Subdomain name used for token-based authentication. Required if 'networkAcls' or 'privateEndpoints' are set."
                      }
                    },
                    "networkAcls": {
                      "type": "object",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. A collection of rules governing the accessibility from specific network locations."
                      }
                    },
                    "networkInjections": {
                      "$ref": "#/definitions/networkInjectionType",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Specifies in AI Foundry where virtual network injection occurs to secure scenarios like Agents entirely within a private network."
                      }
                    },
                    "privateEndpoints": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/privateEndpointSingleServiceType"
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Configuration details for private endpoints. For security reasons, it is recommended to use private endpoints whenever possible."
                      }
                    },
                    "lock": {
                      "$ref": "#/definitions/lockType",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The lock settings of the service."
                      }
                    },
                    "roleAssignments": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/roleAssignmentType"
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Array of role assignments to create."
                      }
                    },
                    "tags": {
                      "type": "object",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Tags of the resource."
                      }
                    },
                    "allowedFqdnList": {
                      "type": "array",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. List of allowed FQDN."
                      }
                    },
                    "apiProperties": {
                      "type": "object",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The API properties for special APIs."
                      }
                    },
                    "disableLocalAuth": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. Allow only Azure AD authentication. Should be enabled for security reasons."
                      }
                    },
                    "customerManagedKey": {
                      "$ref": "#/definitions/customerManagedKeyType",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The customer managed key definition."
                      }
                    },
                    "dynamicThrottlingEnabled": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. The flag to enable dynamic throttling."
                      }
                    },
                    "migrationToken": {
                      "type": "securestring",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Resource migration token."
                      }
                    },
                    "restore": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. Restore a soft-deleted cognitive service at deployment time. Will fail if no such soft-deleted resource exists."
                      }
                    },
                    "restrictOutboundNetworkAccess": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. Restrict outbound network access."
                      }
                    },
                    "userOwnedStorage": {
                      "type": "array",
                      "metadata": {
                        "__bicep_resource_derived_type!": {
                          "source": "Microsoft.CognitiveServices/accounts@2025-04-01-preview#properties/properties/properties/userOwnedStorage"
                        },
                        "description": "Optional. The storage accounts for this resource."
                      },
                      "nullable": true
                    },
                    "managedIdentities": {
                      "$ref": "#/definitions/managedIdentityAllType",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The managed identity definition for this resource."
                      }
                    },
                    "enableTelemetry": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. Enable/Disable usage telemetry for module."
                      }
                    },
                    "deployments": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/deploymentType"
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Array of deployments about cognitive service accounts to create."
                      }
                    },
                    "secretsExportConfiguration": {
                      "$ref": "#/definitions/secretsExportConfigurationType",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Key vault reference and secret settings for the module's secrets export."
                      }
                    },
                    "allowProjectManagement": {
                      "type": "bool",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Enable/Disable project management feature for AI Foundry."
                      }
                    },
                    "commitmentPlans": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/commitmentPlanType"
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Commitment plans to deploy for the cognitive services account."
                      }
                    }
                  },
                  "variables": {
                    "copy": [
                      {
                        "name": "formattedRoleAssignments",
                        "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]",
                        "input": "[union(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')], createObject('roleDefinitionId', coalesce(tryGet(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName), if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName)))))]"
                      }
                    ],
                    "enableReferencedModulesTelemetry": false,
                    "formattedUserAssignedIdentities": "[reduce(map(coalesce(tryGet(parameters('managedIdentities'), 'userAssignedResourceIds'), createArray()), lambda('id', createObject(format('{0}', lambdaVariables('id')), createObject()))), createObject(), lambda('cur', 'next', union(lambdaVariables('cur'), lambdaVariables('next'))))]",
                    "identity": "[if(not(empty(parameters('managedIdentities'))), createObject('type', if(coalesce(tryGet(parameters('managedIdentities'), 'systemAssigned'), false()), if(not(empty(coalesce(tryGet(parameters('managedIdentities'), 'userAssignedResourceIds'), createObject()))), 'SystemAssigned, UserAssigned', 'SystemAssigned'), if(not(empty(coalesce(tryGet(parameters('managedIdentities'), 'userAssignedResourceIds'), createObject()))), 'UserAssigned', null())), 'userAssignedIdentities', if(not(empty(variables('formattedUserAssignedIdentities'))), variables('formattedUserAssignedIdentities'), null())), null())]",
                    "builtInRoleNames": {
                      "Cognitive Services Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '25fbc0a9-bd7c-42a3-aa1a-3b75d497ee68')]",
                      "Cognitive Services Custom Vision Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'c1ff6cc2-c111-46fe-8896-e0ef812ad9f3')]",
                      "Cognitive Services Custom Vision Deployment": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '5c4089e1-6d96-4d2f-b296-c1bc7137275f')]",
                      "Cognitive Services Custom Vision Labeler": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '88424f51-ebe7-446f-bc41-7fa16989e96c')]",
                      "Cognitive Services Custom Vision Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '93586559-c37d-4a6b-ba08-b9f0940c2d73')]",
                      "Cognitive Services Custom Vision Trainer": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '0a5ae4ab-0d65-4eeb-be61-29fc9b54394b')]",
                      "Cognitive Services Data Reader (Preview)": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b59867f0-fa02-499b-be73-45a86b5b3e1c')]",
                      "Cognitive Services Face Recognizer": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '9894cab4-e18a-44aa-828b-cb588cd6f2d7')]",
                      "Cognitive Services Immersive Reader User": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b2de6794-95db-4659-8781-7e080d3f2b9d')]",
                      "Cognitive Services Language Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f07febfe-79bc-46b1-8b37-790e26e6e498')]",
                      "Cognitive Services Language Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '7628b7b8-a8b2-4cdc-b46f-e9b35248918e')]",
                      "Cognitive Services Language Writer": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f2310ca1-dc64-4889-bb49-c8e0fa3d47a8')]",
                      "Cognitive Services LUIS Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f72c8140-2111-481c-87ff-72b910f6e3f8')]",
                      "Cognitive Services LUIS Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18e81cdc-4e98-4e29-a639-e7d10c5a6226')]",
                      "Cognitive Services LUIS Writer": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '6322a993-d5c9-4bed-b113-e49bbea25b27')]",
                      "Cognitive Services Metrics Advisor Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'cb43c632-a144-4ec5-977c-e80c4affc34a')]",
                      "Cognitive Services Metrics Advisor User": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '3b20f47b-3825-43cb-8114-4bd2201156a8')]",
                      "Cognitive Services OpenAI Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'a001fd3d-188f-4b5d-821b-7da978bf7442')]",
                      "Cognitive Services OpenAI User": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '5e0bd9bd-7b93-4f28-af87-19fc36ad61bd')]",
                      "Cognitive Services QnA Maker Editor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f4cc2bf9-21be-47a1-bdf1-5c5804381025')]",
                      "Cognitive Services QnA Maker Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '466ccd10-b268-4a11-b098-b4849f024126')]",
                      "Cognitive Services Speech Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '0e75ca1e-0464-4b4d-8b93-68208a576181')]",
                      "Cognitive Services Speech User": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f2dc8367-1007-4938-bd23-fe263f013447')]",
                      "Cognitive Services User": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'a97b65f3-24c7-4388-baec-2e87135dc908')]",
                      "Azure AI Developer": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '64702f94-c441-49e6-a78b-ef80e0188fee')]",
                      "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                      "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                      "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                      "Role Based Access Control Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
                      "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
                    }
                  },
                  "resources": {
                    "cMKKeyVault::cMKKey": {
                      "condition": "[and(not(empty(tryGet(parameters('customerManagedKey'), 'keyVaultResourceId'))), and(not(empty(tryGet(parameters('customerManagedKey'), 'keyVaultResourceId'))), not(empty(tryGet(parameters('customerManagedKey'), 'keyName')))))]",
                      "existing": true,
                      "type": "Microsoft.KeyVault/vaults/keys",
                      "apiVersion": "2024-11-01",
                      "subscriptionId": "[split(tryGet(parameters('customerManagedKey'), 'keyVaultResourceId'), '/')[2]]",
                      "resourceGroup": "[split(tryGet(parameters('customerManagedKey'), 'keyVaultResourceId'), '/')[4]]",
                      "name": "[format('{0}/{1}', last(split(tryGet(parameters('customerManagedKey'), 'keyVaultResourceId'), '/')), tryGet(parameters('customerManagedKey'), 'keyName'))]"
                    },
                    "avmTelemetry": {
                      "condition": "[parameters('enableTelemetry')]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2024-03-01",
                      "name": "[format('46d3xbcp.res.cognitiveservices-account.{0}.{1}', replace('0.13.1', '.', '-'), substring(uniqueString(deployment().name, parameters('location')), 0, 4))]",
                      "properties": {
                        "mode": "Incremental",
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "resources": [],
                          "outputs": {
                            "telemetry": {
                              "type": "String",
                              "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                            }
                          }
                        }
                      }
                    },
                    "cMKKeyVault": {
                      "condition": "[not(empty(tryGet(parameters('customerManagedKey'), 'keyVaultResourceId')))]",
                      "existing": true,
                      "type": "Microsoft.KeyVault/vaults",
                      "apiVersion": "2024-11-01",
                      "subscriptionId": "[split(tryGet(parameters('customerManagedKey'), 'keyVaultResourceId'), '/')[2]]",
                      "resourceGroup": "[split(tryGet(parameters('customerManagedKey'), 'keyVaultResourceId'), '/')[4]]",
                      "name": "[last(split(tryGet(parameters('customerManagedKey'), 'keyVaultResourceId'), '/'))]"
                    },
                    "cMKUserAssignedIdentity": {
                      "condition": "[not(empty(tryGet(parameters('customerManagedKey'), 'userAssignedIdentityResourceId')))]",
                      "existing": true,
                      "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
                      "apiVersion": "2025-01-31-preview",
                      "subscriptionId": "[split(tryGet(parameters('customerManagedKey'), 'userAssignedIdentityResourceId'), '/')[2]]",
                      "resourceGroup": "[split(tryGet(parameters('customerManagedKey'), 'userAssignedIdentityResourceId'), '/')[4]]",
                      "name": "[last(split(tryGet(parameters('customerManagedKey'), 'userAssignedIdentityResourceId'), '/'))]"
                    },
                    "cognitiveService": {
                      "type": "Microsoft.CognitiveServices/accounts",
                      "apiVersion": "2025-06-01",
                      "name": "[parameters('name')]",
                      "kind": "[parameters('kind')]",
                      "identity": "[variables('identity')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "sku": {
                        "name": "[parameters('sku')]"
                      },
                      "properties": {
                        "allowProjectManagement": "[parameters('allowProjectManagement')]",
                        "customSubDomainName": "[parameters('customSubDomainName')]",
                        "networkAcls": "[if(not(empty(coalesce(parameters('networkAcls'), createObject()))), createObject('defaultAction', tryGet(parameters('networkAcls'), 'defaultAction'), 'virtualNetworkRules', coalesce(tryGet(parameters('networkAcls'), 'virtualNetworkRules'), createArray()), 'ipRules', coalesce(tryGet(parameters('networkAcls'), 'ipRules'), createArray())), null())]",
                        "networkInjections": "[if(not(empty(parameters('networkInjections'))), createArray(createObject('scenario', tryGet(parameters('networkInjections'), 'scenario'), 'subnetArmId', tryGet(parameters('networkInjections'), 'subnetResourceId'), 'useMicrosoftManagedNetwork', coalesce(tryGet(parameters('networkInjections'), 'useMicrosoftManagedNetwork'), false()))), null())]",
                        "publicNetworkAccess": "[if(not(equals(parameters('publicNetworkAccess'), null())), parameters('publicNetworkAccess'), if(not(empty(parameters('networkAcls'))), 'Enabled', 'Disabled'))]",
                        "allowedFqdnList": "[parameters('allowedFqdnList')]",
                        "apiProperties": "[parameters('apiProperties')]",
                        "disableLocalAuth": "[parameters('disableLocalAuth')]",
                        "encryption": "[if(not(empty(parameters('customerManagedKey'))), createObject('keySource', 'Microsoft.KeyVault', 'keyVaultProperties', createObject('identityClientId', if(not(empty(coalesce(tryGet(parameters('customerManagedKey'), 'userAssignedIdentityResourceId'), ''))), reference('cMKUserAssignedIdentity').clientId, null()), 'keyVaultUri', reference('cMKKeyVault').vaultUri, 'keyName', parameters('customerManagedKey').keyName, 'keyVersion', if(not(empty(coalesce(tryGet(parameters('customerManagedKey'), 'keyVersion'), ''))), tryGet(parameters('customerManagedKey'), 'keyVersion'), last(split(reference('cMKKeyVault::cMKKey').keyUriWithVersion, '/'))))), null())]",
                        "migrationToken": "[parameters('migrationToken')]",
                        "restore": "[parameters('restore')]",
                        "restrictOutboundNetworkAccess": "[parameters('restrictOutboundNetworkAccess')]",
                        "userOwnedStorage": "[if(not(empty(parameters('userOwnedStorage'))), parameters('userOwnedStorage'), null())]",
                        "dynamicThrottlingEnabled": "[parameters('dynamicThrottlingEnabled')]"
                      },
                      "dependsOn": [
                        "cMKKeyVault",
                        "cMKKeyVault::cMKKey",
                        "cMKUserAssignedIdentity"
                      ]
                    },
                    "cognitiveService_deployments": {
                      "copy": {
                        "name": "cognitiveService_deployments",
                        "count": "[length(coalesce(parameters('deployments'), createArray()))]",
                        "mode": "serial",
                        "batchSize": 1
                      },
                      "type": "Microsoft.CognitiveServices/accounts/deployments",
                      "apiVersion": "2025-06-01",
                      "name": "[format('{0}/{1}', parameters('name'), coalesce(tryGet(coalesce(parameters('deployments'), createArray())[copyIndex()], 'name'), format('{0}-deployments', parameters('name'))))]",
                      "properties": {
                        "model": "[coalesce(parameters('deployments'), createArray())[copyIndex()].model]",
                        "raiPolicyName": "[tryGet(coalesce(parameters('deployments'), createArray())[copyIndex()], 'raiPolicyName')]",
                        "versionUpgradeOption": "[tryGet(coalesce(parameters('deployments'), createArray())[copyIndex()], 'versionUpgradeOption')]"
                      },
                      "sku": "[coalesce(tryGet(coalesce(parameters('deployments'), createArray())[copyIndex()], 'sku'), createObject('name', parameters('sku'), 'capacity', tryGet(parameters('sku'), 'capacity'), 'tier', tryGet(parameters('sku'), 'tier'), 'size', tryGet(parameters('sku'), 'size'), 'family', tryGet(parameters('sku'), 'family')))]",
                      "dependsOn": [
                        "cognitiveService"
                      ]
                    },
                    "cognitiveService_lock": {
                      "condition": "[and(not(empty(coalesce(parameters('lock'), createObject()))), not(equals(tryGet(parameters('lock'), 'kind'), 'None')))]",
                      "type": "Microsoft.Authorization/locks",
                      "apiVersion": "2020-05-01",
                      "scope": "[format('Microsoft.CognitiveServices/accounts/{0}', parameters('name'))]",
                      "name": "[coalesce(tryGet(parameters('lock'), 'name'), format('lock-{0}', parameters('name')))]",
                      "properties": {
                        "level": "[coalesce(tryGet(parameters('lock'), 'kind'), '')]",
                        "notes": "[coalesce(tryGet(parameters('lock'), 'notes'), if(equals(tryGet(parameters('lock'), 'kind'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot delete or modify the resource or child resources.'))]"
                      },
                      "dependsOn": [
                        "cognitiveService"
                      ]
                    },
                    "cognitiveService_commitmentPlans": {
                      "copy": {
                        "name": "cognitiveService_commitmentPlans",
                        "count": "[length(coalesce(parameters('commitmentPlans'), createArray()))]"
                      },
                      "type": "Microsoft.CognitiveServices/accounts/commitmentPlans",
                      "apiVersion": "2025-06-01",
                      "name": "[format('{0}/{1}', parameters('name'), format('{0}-{1}', coalesce(parameters('commitmentPlans'), createArray())[copyIndex()].hostingModel, coalesce(parameters('commitmentPlans'), createArray())[copyIndex()].planType))]",
                      "properties": "[coalesce(parameters('commitmentPlans'), createArray())[copyIndex()]]",
                      "dependsOn": [
                        "cognitiveService"
                      ]
                    },
                    "cognitiveService_diagnosticSettings": {
                      "copy": {
                        "name": "cognitiveService_diagnosticSettings",
                        "count": "[length(coalesce(parameters('diagnosticSettings'), createArray()))]"
                      },
                      "type": "Microsoft.Insights/diagnosticSettings",
                      "apiVersion": "2021-05-01-preview",
                      "scope": "[format('Microsoft.CognitiveServices/accounts/{0}', parameters('name'))]",
                      "name": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'name'), format('{0}-diagnosticSettings', parameters('name')))]",
                      "properties": {
                        "copy": [
                          {
                            "name": "metrics",
                            "count": "[length(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics'))))]",
                            "input": {
                              "category": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics')))[copyIndex('metrics')].category]",
                              "enabled": "[coalesce(tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics')))[copyIndex('metrics')], 'enabled'), true())]",
                              "timeGrain": null
                            }
                          },
                          {
                            "name": "logs",
                            "count": "[length(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs'))))]",
                            "input": {
                              "categoryGroup": "[tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'categoryGroup')]",
                              "category": "[tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'category')]",
                              "enabled": "[coalesce(tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'enabled'), true())]"
                            }
                          }
                        ],
                        "storageAccountId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'storageAccountResourceId')]",
                        "workspaceId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'workspaceResourceId')]",
                        "eventHubAuthorizationRuleId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubAuthorizationRuleResourceId')]",
                        "eventHubName": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubName')]",
                        "marketplacePartnerId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'marketplacePartnerResourceId')]",
                        "logAnalyticsDestinationType": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logAnalyticsDestinationType')]"
                      },
                      "dependsOn": [
                        "cognitiveService"
                      ]
                    },
                    "cognitiveService_roleAssignments": {
                      "copy": {
                        "name": "cognitiveService_roleAssignments",
                        "count": "[length(coalesce(variables('formattedRoleAssignments'), createArray()))]"
                      },
                      "type": "Microsoft.Authorization/roleAssignments",
                      "apiVersion": "2022-04-01",
                      "scope": "[format('Microsoft.CognitiveServices/accounts/{0}', parameters('name'))]",
                      "name": "[coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'name'), guid(resourceId('Microsoft.CognitiveServices/accounts', parameters('name')), coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId, coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId))]",
                      "properties": {
                        "roleDefinitionId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId]",
                        "principalId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId]",
                        "description": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'description')]",
                        "principalType": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'principalType')]",
                        "condition": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition')]",
                        "conditionVersion": "[if(not(empty(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                        "delegatedManagedIdentityResourceId": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                      },
                      "dependsOn": [
                        "cognitiveService"
                      ]
                    },
                    "cognitiveService_privateEndpoints": {
                      "copy": {
                        "name": "cognitiveService_privateEndpoints",
                        "count": "[length(coalesce(parameters('privateEndpoints'), createArray()))]"
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('{0}-cognitiveService-PrivateEndpoint-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                      "subscriptionId": "[split(coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'resourceGroupResourceId'), resourceGroup().id), '/')[2]]",
                      "resourceGroup": "[split(coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'resourceGroupResourceId'), resourceGroup().id), '/')[4]]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "name": {
                            "value": "[coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'name'), format('pep-{0}-{1}-{2}', last(split(resourceId('Microsoft.CognitiveServices/accounts', parameters('name')), '/')), coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'service'), 'account'), copyIndex()))]"
                          },
                          "privateLinkServiceConnections": "[if(not(equals(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'isManualConnection'), true())), createObject('value', createArray(createObject('name', coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'privateLinkServiceConnectionName'), format('{0}-{1}-{2}', last(split(resourceId('Microsoft.CognitiveServices/accounts', parameters('name')), '/')), coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'service'), 'account'), copyIndex())), 'properties', createObject('privateLinkServiceId', resourceId('Microsoft.CognitiveServices/accounts', parameters('name')), 'groupIds', createArray(coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'service'), 'account')))))), createObject('value', null()))]",
                          "manualPrivateLinkServiceConnections": "[if(equals(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'isManualConnection'), true()), createObject('value', createArray(createObject('name', coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'privateLinkServiceConnectionName'), format('{0}-{1}-{2}', last(split(resourceId('Microsoft.CognitiveServices/accounts', parameters('name')), '/')), coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'service'), 'account'), copyIndex())), 'properties', createObject('privateLinkServiceId', resourceId('Microsoft.CognitiveServices/accounts', parameters('name')), 'groupIds', createArray(coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'service'), 'account')), 'requestMessage', coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'manualConnectionRequestMessage'), 'Manual approval required.'))))), createObject('value', null()))]",
                          "subnetResourceId": {
                            "value": "[coalesce(parameters('privateEndpoints'), createArray())[copyIndex()].subnetResourceId]"
                          },
                          "enableTelemetry": {
                            "value": "[variables('enableReferencedModulesTelemetry')]"
                          },
                          "location": {
                            "value": "[coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'location'), reference(split(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()].subnetResourceId, '/subnets/')[0], '2020-06-01', 'Full').location)]"
                          },
                          "lock": {
                            "value": "[coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'lock'), parameters('lock'))]"
                          },
                          "privateDnsZoneGroup": {
                            "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'privateDnsZoneGroup')]"
                          },
                          "roleAssignments": {
                            "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'roleAssignments')]"
                          },
                          "tags": {
                            "value": "[coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'tags'), parameters('tags'))]"
                          },
                          "customDnsConfigs": {
                            "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'customDnsConfigs')]"
                          },
                          "ipConfigurations": {
                            "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'ipConfigurations')]"
                          },
                          "applicationSecurityGroupResourceIds": {
                            "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'applicationSecurityGroupResourceIds')]"
                          },
                          "customNetworkInterfaceName": {
                            "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'customNetworkInterfaceName')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "languageVersion": "2.0",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.34.44.8038",
                              "templateHash": "12389807800450456797"
                            },
                            "name": "Private Endpoints",
                            "description": "This module deploys a Private Endpoint."
                          },
                          "definitions": {
                            "privateDnsZoneGroupType": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The name of the Private DNS Zone Group."
                                  }
                                },
                                "privateDnsZoneGroupConfigs": {
                                  "type": "array",
                                  "items": {
                                    "$ref": "#/definitions/privateDnsZoneGroupConfigType"
                                  },
                                  "metadata": {
                                    "description": "Required. The private DNS zone groups to associate the private endpoint. A DNS zone group can support up to 5 DNS zones."
                                  }
                                }
                              },
                              "metadata": {
                                "__bicep_export!": true
                              }
                            },
                            "ipConfigurationType": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. The name of the resource that is unique within a resource group."
                                  }
                                },
                                "properties": {
                                  "type": "object",
                                  "properties": {
                                    "groupId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The ID of a group obtained from the remote resource that this private endpoint should connect to. If used with private link service connection, this property must be defined as empty string."
                                      }
                                    },
                                    "memberName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The member name of a group obtained from the remote resource that this private endpoint should connect to. If used with private link service connection, this property must be defined as empty string."
                                      }
                                    },
                                    "privateIPAddress": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. A private IP address obtained from the private endpoint's subnet."
                                      }
                                    }
                                  },
                                  "metadata": {
                                    "description": "Required. Properties of private endpoint IP configurations."
                                  }
                                }
                              },
                              "metadata": {
                                "__bicep_export!": true
                              }
                            },
                            "privateLinkServiceConnectionType": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. The name of the private link service connection."
                                  }
                                },
                                "properties": {
                                  "type": "object",
                                  "properties": {
                                    "groupIds": {
                                      "type": "array",
                                      "items": {
                                        "type": "string"
                                      },
                                      "metadata": {
                                        "description": "Required. The ID of a group obtained from the remote resource that this private endpoint should connect to. If used with private link service connection, this property must be defined as empty string array `[]`."
                                      }
                                    },
                                    "privateLinkServiceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The resource id of private link service."
                                      }
                                    },
                                    "requestMessage": {
                                      "type": "string",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. A message passed to the owner of the remote resource with this connection request. Restricted to 140 chars."
                                      }
                                    }
                                  },
                                  "metadata": {
                                    "description": "Required. Properties of private link service connection."
                                  }
                                }
                              },
                              "metadata": {
                                "__bicep_export!": true
                              }
                            },
                            "customDnsConfigType": {
                              "type": "object",
                              "properties": {
                                "fqdn": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. FQDN that resolves to private endpoint IP address."
                                  }
                                },
                                "ipAddresses": {
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  },
                                  "metadata": {
                                    "description": "Required. A list of private IP addresses of the private endpoint."
                                  }
                                }
                              },
                              "metadata": {
                                "__bicep_export!": true
                              }
                            },
                            "lockType": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Specify the name of lock."
                                  }
                                },
                                "kind": {
                                  "type": "string",
                                  "allowedValues": [
                                    "CanNotDelete",
                                    "None",
                                    "ReadOnly"
                                  ],
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Specify the type of lock."
                                  }
                                }
                              },
                              "metadata": {
                                "description": "An AVM-aligned type for a lock.",
                                "__bicep_imported_from!": {
                                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
                                }
                              }
                            },
                            "privateDnsZoneGroupConfigType": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The name of the private DNS zone group config."
                                  }
                                },
                                "privateDnsZoneResourceId": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. The resource id of the private DNS zone."
                                  }
                                }
                              },
                              "metadata": {
                                "__bicep_imported_from!": {
                                  "sourceTemplate": "private-dns-zone-group/main.bicep"
                                }
                              }
                            },
                            "roleAssignmentType": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The name (as GUID) of the role assignment. If not provided, a GUID will be generated."
                                  }
                                },
                                "roleDefinitionIdOrName": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                                  }
                                },
                                "principalId": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                                  }
                                },
                                "principalType": {
                                  "type": "string",
                                  "allowedValues": [
                                    "Device",
                                    "ForeignGroup",
                                    "Group",
                                    "ServicePrincipal",
                                    "User"
                                  ],
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The principal type of the assigned principal ID."
                                  }
                                },
                                "description": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The description of the role assignment."
                                  }
                                },
                                "condition": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                                  }
                                },
                                "conditionVersion": {
                                  "type": "string",
                                  "allowedValues": [
                                    "2.0"
                                  ],
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Version of the condition."
                                  }
                                },
                                "delegatedManagedIdentityResourceId": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The Resource Id of the delegated managed identity resource."
                                  }
                                }
                              },
                              "metadata": {
                                "description": "An AVM-aligned type for a role assignment.",
                                "__bicep_imported_from!": {
                                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
                                }
                              }
                            }
                          },
                          "parameters": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. Name of the private endpoint resource to create."
                              }
                            },
                            "subnetResourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. Resource ID of the subnet where the endpoint needs to be created."
                              }
                            },
                            "applicationSecurityGroupResourceIds": {
                              "type": "array",
                              "items": {
                                "type": "string"
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Application security groups in which the private endpoint IP configuration is included."
                              }
                            },
                            "customNetworkInterfaceName": {
                              "type": "string",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The custom name of the network interface attached to the private endpoint."
                              }
                            },
                            "ipConfigurations": {
                              "type": "array",
                              "items": {
                                "$ref": "#/definitions/ipConfigurationType"
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. A list of IP configurations of the private endpoint. This will be used to map to the First Party Service endpoints."
                              }
                            },
                            "privateDnsZoneGroup": {
                              "$ref": "#/definitions/privateDnsZoneGroupType",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The private DNS zone group to configure for the private endpoint."
                              }
                            },
                            "location": {
                              "type": "string",
                              "defaultValue": "[resourceGroup().location]",
                              "metadata": {
                                "description": "Optional. Location for all Resources."
                              }
                            },
                            "lock": {
                              "$ref": "#/definitions/lockType",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The lock settings of the service."
                              }
                            },
                            "roleAssignments": {
                              "type": "array",
                              "items": {
                                "$ref": "#/definitions/roleAssignmentType"
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Array of role assignments to create."
                              }
                            },
                            "tags": {
                              "type": "object",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Tags to be applied on all resources/resource groups in this deployment."
                              }
                            },
                            "customDnsConfigs": {
                              "type": "array",
                              "items": {
                                "$ref": "#/definitions/customDnsConfigType"
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Custom DNS configurations."
                              }
                            },
                            "manualPrivateLinkServiceConnections": {
                              "type": "array",
                              "items": {
                                "$ref": "#/definitions/privateLinkServiceConnectionType"
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Conditional. A grouping of information about the connection to the remote resource. Used when the network admin does not have access to approve connections to the remote resource. Required if `privateLinkServiceConnections` is empty."
                              }
                            },
                            "privateLinkServiceConnections": {
                              "type": "array",
                              "items": {
                                "$ref": "#/definitions/privateLinkServiceConnectionType"
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Conditional. A grouping of information about the connection to the remote resource. Required if `manualPrivateLinkServiceConnections` is empty."
                              }
                            },
                            "enableTelemetry": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Optional. Enable/Disable usage telemetry for module."
                              }
                            }
                          },
                          "variables": {
                            "copy": [
                              {
                                "name": "formattedRoleAssignments",
                                "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]",
                                "input": "[union(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')], createObject('roleDefinitionId', coalesce(tryGet(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName), if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName)))))]"
                              }
                            ],
                            "builtInRoleNames": {
                              "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                              "DNS Resolver Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '0f2ebee7-ffd4-4fc0-b3b7-664099fdad5d')]",
                              "DNS Zone Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'befefa01-2a29-4197-83a8-272ff33ce314')]",
                              "Domain Services Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'eeaeda52-9324-47f6-8069-5d5bade478b2')]",
                              "Domain Services Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '361898ef-9ed1-48c2-849c-a832951106bb')]",
                              "Network Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4d97b98b-1d4f-4787-a291-c67834d212e7')]",
                              "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                              "Private DNS Zone Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b12aa53e-6015-4669-85d0-8515ebb3ae7f')]",
                              "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                              "Role Based Access Control Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]"
                            }
                          },
                          "resources": {
                            "avmTelemetry": {
                              "condition": "[parameters('enableTelemetry')]",
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2024-03-01",
                              "name": "[format('46d3xbcp.res.network-privateendpoint.{0}.{1}', replace('0.11.0', '.', '-'), substring(uniqueString(deployment().name, parameters('location')), 0, 4))]",
                              "properties": {
                                "mode": "Incremental",
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "resources": [],
                                  "outputs": {
                                    "telemetry": {
                                      "type": "String",
                                      "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                                    }
                                  }
                                }
                              }
                            },
                            "privateEndpoint": {
                              "type": "Microsoft.Network/privateEndpoints",
                              "apiVersion": "2024-05-01",
                              "name": "[parameters('name')]",
                              "location": "[parameters('location')]",
                              "tags": "[parameters('tags')]",
                              "properties": {
                                "copy": [
                                  {
                                    "name": "applicationSecurityGroups",
                                    "count": "[length(coalesce(parameters('applicationSecurityGroupResourceIds'), createArray()))]",
                                    "input": {
                                      "id": "[coalesce(parameters('applicationSecurityGroupResourceIds'), createArray())[copyIndex('applicationSecurityGroups')]]"
                                    }
                                  }
                                ],
                                "customDnsConfigs": "[coalesce(parameters('customDnsConfigs'), createArray())]",
                                "customNetworkInterfaceName": "[coalesce(parameters('customNetworkInterfaceName'), '')]",
                                "ipConfigurations": "[coalesce(parameters('ipConfigurations'), createArray())]",
                                "manualPrivateLinkServiceConnections": "[coalesce(parameters('manualPrivateLinkServiceConnections'), createArray())]",
                                "privateLinkServiceConnections": "[coalesce(parameters('privateLinkServiceConnections'), createArray())]",
                                "subnet": {
                                  "id": "[parameters('subnetResourceId')]"
                                }
                              }
                            },
                            "privateEndpoint_lock": {
                              "condition": "[and(not(empty(coalesce(parameters('lock'), createObject()))), not(equals(tryGet(parameters('lock'), 'kind'), 'None')))]",
                              "type": "Microsoft.Authorization/locks",
                              "apiVersion": "2020-05-01",
                              "scope": "[format('Microsoft.Network/privateEndpoints/{0}', parameters('name'))]",
                              "name": "[coalesce(tryGet(parameters('lock'), 'name'), format('lock-{0}', parameters('name')))]",
                              "properties": {
                                "level": "[coalesce(tryGet(parameters('lock'), 'kind'), '')]",
                                "notes": "[if(equals(tryGet(parameters('lock'), 'kind'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot delete or modify the resource or child resources.')]"
                              },
                              "dependsOn": [
                                "privateEndpoint"
                              ]
                            },
                            "privateEndpoint_roleAssignments": {
                              "copy": {
                                "name": "privateEndpoint_roleAssignments",
                                "count": "[length(coalesce(variables('formattedRoleAssignments'), createArray()))]"
                              },
                              "type": "Microsoft.Authorization/roleAssignments",
                              "apiVersion": "2022-04-01",
                              "scope": "[format('Microsoft.Network/privateEndpoints/{0}', parameters('name'))]",
                              "name": "[coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'name'), guid(resourceId('Microsoft.Network/privateEndpoints', parameters('name')), coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId, coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId))]",
                              "properties": {
                                "roleDefinitionId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId]",
                                "principalId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId]",
                                "description": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'description')]",
                                "principalType": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'principalType')]",
                                "condition": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition')]",
                                "conditionVersion": "[if(not(empty(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                                "delegatedManagedIdentityResourceId": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                              },
                              "dependsOn": [
                                "privateEndpoint"
                              ]
                            },
                            "privateEndpoint_privateDnsZoneGroup": {
                              "condition": "[not(empty(parameters('privateDnsZoneGroup')))]",
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('{0}-PrivateEndpoint-PrivateDnsZoneGroup', uniqueString(deployment().name))]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "name": {
                                    "value": "[tryGet(parameters('privateDnsZoneGroup'), 'name')]"
                                  },
                                  "privateEndpointName": {
                                    "value": "[parameters('name')]"
                                  },
                                  "privateDnsZoneConfigs": {
                                    "value": "[parameters('privateDnsZoneGroup').privateDnsZoneGroupConfigs]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "languageVersion": "2.0",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.34.44.8038",
                                      "templateHash": "13997305779829540948"
                                    },
                                    "name": "Private Endpoint Private DNS Zone Groups",
                                    "description": "This module deploys a Private Endpoint Private DNS Zone Group."
                                  },
                                  "definitions": {
                                    "privateDnsZoneGroupConfigType": {
                                      "type": "object",
                                      "properties": {
                                        "name": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The name of the private DNS zone group config."
                                          }
                                        },
                                        "privateDnsZoneResourceId": {
                                          "type": "string",
                                          "metadata": {
                                            "description": "Required. The resource id of the private DNS zone."
                                          }
                                        }
                                      },
                                      "metadata": {
                                        "__bicep_export!": true
                                      }
                                    }
                                  },
                                  "parameters": {
                                    "privateEndpointName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Conditional. The name of the parent private endpoint. Required if the template is used in a standalone deployment."
                                      }
                                    },
                                    "privateDnsZoneConfigs": {
                                      "type": "array",
                                      "items": {
                                        "$ref": "#/definitions/privateDnsZoneGroupConfigType"
                                      },
                                      "minLength": 1,
                                      "maxLength": 5,
                                      "metadata": {
                                        "description": "Required. Array of private DNS zone configurations of the private DNS zone group. A DNS zone group can support up to 5 DNS zones."
                                      }
                                    },
                                    "name": {
                                      "type": "string",
                                      "defaultValue": "default",
                                      "metadata": {
                                        "description": "Optional. The name of the private DNS zone group."
                                      }
                                    }
                                  },
                                  "variables": {
                                    "copy": [
                                      {
                                        "name": "privateDnsZoneConfigsVar",
                                        "count": "[length(parameters('privateDnsZoneConfigs'))]",
                                        "input": {
                                          "name": "[coalesce(tryGet(parameters('privateDnsZoneConfigs')[copyIndex('privateDnsZoneConfigsVar')], 'name'), last(split(parameters('privateDnsZoneConfigs')[copyIndex('privateDnsZoneConfigsVar')].privateDnsZoneResourceId, '/')))]",
                                          "properties": {
                                            "privateDnsZoneId": "[parameters('privateDnsZoneConfigs')[copyIndex('privateDnsZoneConfigsVar')].privateDnsZoneResourceId]"
                                          }
                                        }
                                      }
                                    ]
                                  },
                                  "resources": {
                                    "privateEndpoint": {
                                      "existing": true,
                                      "type": "Microsoft.Network/privateEndpoints",
                                      "apiVersion": "2024-05-01",
                                      "name": "[parameters('privateEndpointName')]"
                                    },
                                    "privateDnsZoneGroup": {
                                      "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
                                      "apiVersion": "2024-05-01",
                                      "name": "[format('{0}/{1}', parameters('privateEndpointName'), parameters('name'))]",
                                      "properties": {
                                        "privateDnsZoneConfigs": "[variables('privateDnsZoneConfigsVar')]"
                                      }
                                    }
                                  },
                                  "outputs": {
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the private endpoint DNS zone group."
                                      },
                                      "value": "[parameters('name')]"
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource ID of the private endpoint DNS zone group."
                                      },
                                      "value": "[resourceId('Microsoft.Network/privateEndpoints/privateDnsZoneGroups', parameters('privateEndpointName'), parameters('name'))]"
                                    },
                                    "resourceGroupName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource group the private endpoint DNS zone group was deployed into."
                                      },
                                      "value": "[resourceGroup().name]"
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "privateEndpoint"
                              ]
                            }
                          },
                          "outputs": {
                            "resourceGroupName": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource group the private endpoint was deployed into."
                              },
                              "value": "[resourceGroup().name]"
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource ID of the private endpoint."
                              },
                              "value": "[resourceId('Microsoft.Network/privateEndpoints', parameters('name'))]"
                            },
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the private endpoint."
                              },
                              "value": "[parameters('name')]"
                            },
                            "location": {
                              "type": "string",
                              "metadata": {
                                "description": "The location the resource was deployed into."
                              },
                              "value": "[reference('privateEndpoint', '2024-05-01', 'full').location]"
                            },
                            "customDnsConfigs": {
                              "type": "array",
                              "items": {
                                "$ref": "#/definitions/customDnsConfigType"
                              },
                              "metadata": {
                                "description": "The custom DNS configurations of the private endpoint."
                              },
                              "value": "[reference('privateEndpoint').customDnsConfigs]"
                            },
                            "networkInterfaceResourceIds": {
                              "type": "array",
                              "items": {
                                "type": "string"
                              },
                              "metadata": {
                                "description": "The resource IDs of the network interfaces associated with the private endpoint."
                              },
                              "value": "[map(reference('privateEndpoint').networkInterfaces, lambda('nic', lambdaVariables('nic').id))]"
                            },
                            "groupId": {
                              "type": "string",
                              "nullable": true,
                              "metadata": {
                                "description": "The group Id for the private endpoint Group."
                              },
                              "value": "[coalesce(tryGet(tryGet(tryGet(tryGet(reference('privateEndpoint'), 'manualPrivateLinkServiceConnections'), 0, 'properties'), 'groupIds'), 0), tryGet(tryGet(tryGet(tryGet(reference('privateEndpoint'), 'privateLinkServiceConnections'), 0, 'properties'), 'groupIds'), 0))]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "cognitiveService"
                      ]
                    },
                    "secretsExport": {
                      "condition": "[not(equals(parameters('secretsExportConfiguration'), null()))]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('{0}-secrets-kv', uniqueString(deployment().name, parameters('location')))]",
                      "subscriptionId": "[split(tryGet(parameters('secretsExportConfiguration'), 'keyVaultResourceId'), '/')[2]]",
                      "resourceGroup": "[split(tryGet(parameters('secretsExportConfiguration'), 'keyVaultResourceId'), '/')[4]]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "keyVaultName": {
                            "value": "[last(split(tryGet(parameters('secretsExportConfiguration'), 'keyVaultResourceId'), '/'))]"
                          },
                          "secretsToSet": {
                            "value": "[union(createArray(), if(contains(parameters('secretsExportConfiguration'), 'accessKey1Name'), createArray(createObject('name', tryGet(parameters('secretsExportConfiguration'), 'accessKey1Name'), 'value', listKeys('cognitiveService', '2025-06-01').key1)), createArray()), if(contains(parameters('secretsExportConfiguration'), 'accessKey2Name'), createArray(createObject('name', tryGet(parameters('secretsExportConfiguration'), 'accessKey2Name'), 'value', listKeys('cognitiveService', '2025-06-01').key2)), createArray()))]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "languageVersion": "2.0",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.37.4.10188",
                              "templateHash": "10828079590669389085"
                            }
                          },
                          "definitions": {
                            "secretSetOutputType": {
                              "type": "object",
                              "properties": {
                                "secretResourceId": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "The resourceId of the exported secret."
                                  }
                                },
                                "secretUri": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "The secret URI of the exported secret."
                                  }
                                },
                                "secretUriWithVersion": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "The secret URI with version of the exported secret."
                                  }
                                }
                              },
                              "metadata": {
                                "description": "An AVM-aligned type for the output of the secret set via the secrets export feature.",
                                "__bicep_imported_from!": {
                                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
                                }
                              }
                            },
                            "secretToSetType": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. The name of the secret to set."
                                  }
                                },
                                "value": {
                                  "type": "securestring",
                                  "metadata": {
                                    "description": "Required. The value of the secret to set."
                                  }
                                }
                              },
                              "metadata": {
                                "description": "An AVM-aligned type for the secret to set via the secrets export feature.",
                                "__bicep_imported_from!": {
                                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
                                }
                              }
                            }
                          },
                          "parameters": {
                            "keyVaultName": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The name of the Key Vault to set the ecrets in."
                              }
                            },
                            "secretsToSet": {
                              "type": "array",
                              "items": {
                                "$ref": "#/definitions/secretToSetType"
                              },
                              "metadata": {
                                "description": "Required. The secrets to set in the Key Vault."
                              }
                            }
                          },
                          "resources": {
                            "keyVault": {
                              "existing": true,
                              "type": "Microsoft.KeyVault/vaults",
                              "apiVersion": "2024-11-01",
                              "name": "[parameters('keyVaultName')]"
                            },
                            "secrets": {
                              "copy": {
                                "name": "secrets",
                                "count": "[length(parameters('secretsToSet'))]"
                              },
                              "type": "Microsoft.KeyVault/vaults/secrets",
                              "apiVersion": "2024-11-01",
                              "name": "[format('{0}/{1}', parameters('keyVaultName'), parameters('secretsToSet')[copyIndex()].name)]",
                              "properties": {
                                "value": "[parameters('secretsToSet')[copyIndex()].value]"
                              }
                            }
                          },
                          "outputs": {
                            "secretsSet": {
                              "type": "array",
                              "items": {
                                "$ref": "#/definitions/secretSetOutputType"
                              },
                              "metadata": {
                                "description": "The references to the secrets exported to the provided Key Vault."
                              },
                              "copy": {
                                "count": "[length(range(0, length(coalesce(parameters('secretsToSet'), createArray()))))]",
                                "input": {
                                  "secretResourceId": "[resourceId('Microsoft.KeyVault/vaults/secrets', parameters('keyVaultName'), parameters('secretsToSet')[range(0, length(coalesce(parameters('secretsToSet'), createArray())))[copyIndex()]].name)]",
                                  "secretUri": "[reference(format('secrets[{0}]', range(0, length(coalesce(parameters('secretsToSet'), createArray())))[copyIndex()])).secretUri]",
                                  "secretUriWithVersion": "[reference(format('secrets[{0}]', range(0, length(coalesce(parameters('secretsToSet'), createArray())))[copyIndex()])).secretUriWithVersion]"
                                }
                              }
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "cognitiveService"
                      ]
                    }
                  },
                  "outputs": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the cognitive services account."
                      },
                      "value": "[parameters('name')]"
                    },
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the cognitive services account."
                      },
                      "value": "[resourceId('Microsoft.CognitiveServices/accounts', parameters('name'))]"
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource group the cognitive services account was deployed into."
                      },
                      "value": "[resourceGroup().name]"
                    },
                    "endpoint": {
                      "type": "string",
                      "metadata": {
                        "description": "The service endpoint of the cognitive services account."
                      },
                      "value": "[reference('cognitiveService').endpoint]"
                    },
                    "endpoints": {
                      "$ref": "#/definitions/endpointType",
                      "metadata": {
                        "description": "All endpoints available for the cognitive services account, types depends on the cognitive service kind."
                      },
                      "value": "[reference('cognitiveService').endpoints]"
                    },
                    "systemAssignedMIPrincipalId": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "The principal ID of the system assigned identity."
                      },
                      "value": "[tryGet(tryGet(reference('cognitiveService', '2025-06-01', 'full'), 'identity'), 'principalId')]"
                    },
                    "location": {
                      "type": "string",
                      "metadata": {
                        "description": "The location the resource was deployed into."
                      },
                      "value": "[reference('cognitiveService', '2025-06-01', 'full').location]"
                    },
                    "exportedSecrets": {
                      "$ref": "#/definitions/secretsOutputType",
                      "metadata": {
                        "description": "A hashtable of references to the secrets exported to the provided Key Vault. The key of each reference is each secret's name."
                      },
                      "value": "[if(not(equals(parameters('secretsExportConfiguration'), null())), toObject(reference('secretsExport').outputs.secretsSet.value, lambda('secret', last(split(lambdaVariables('secret').secretResourceId, '/'))), lambda('secret', lambdaVariables('secret'))), createObject())]"
                    },
                    "privateEndpoints": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/privateEndpointOutputType"
                      },
                      "metadata": {
                        "description": "The private endpoints of the congitive services account."
                      },
                      "copy": {
                        "count": "[length(coalesce(parameters('privateEndpoints'), createArray()))]",
                        "input": {
                          "name": "[reference(format('cognitiveService_privateEndpoints[{0}]', copyIndex())).outputs.name.value]",
                          "resourceId": "[reference(format('cognitiveService_privateEndpoints[{0}]', copyIndex())).outputs.resourceId.value]",
                          "groupId": "[tryGet(tryGet(reference(format('cognitiveService_privateEndpoints[{0}]', copyIndex())).outputs, 'groupId'), 'value')]",
                          "customDnsConfigs": "[reference(format('cognitiveService_privateEndpoints[{0}]', copyIndex())).outputs.customDnsConfigs.value]",
                          "networkInterfaceResourceIds": "[reference(format('cognitiveService_privateEndpoints[{0}]', copyIndex())).outputs.networkInterfaceResourceIds.value]"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "outputs": {
            "name": {
              "type": "string",
              "metadata": {
                "description": "Name of the AI Foundry resource."
              },
              "value": "[reference('foundryAccount').outputs.name.value]"
            },
            "resourceId": {
              "type": "string",
              "metadata": {
                "description": "Resource ID of the AI Foundry resource."
              },
              "value": "[reference('foundryAccount').outputs.resourceId.value]"
            },
            "subscriptionId": {
              "type": "string",
              "metadata": {
                "description": "Subscription ID of the AI Foundry resource."
              },
              "value": "[subscription().subscriptionId]"
            },
            "resourceGroupName": {
              "type": "string",
              "metadata": {
                "description": "Resource Group Name of the AI Foundry resource."
              },
              "value": "[resourceGroup().name]"
            },
            "location": {
              "type": "string",
              "metadata": {
                "description": "Location of the AI Foundry resource."
              },
              "value": "[parameters('location')]"
            },
            "systemAssignedMIPrincipalId": {
              "type": "string",
              "metadata": {
                "description": "System assigned managed identity principal ID of the AI Foundry resource."
              },
              "value": "[reference('foundryAccount').outputs.systemAssignedMIPrincipalId.value]"
            }
          }
        }
      }
    },
    "keyVault": {
      "condition": "[parameters('includeAssociatedResources')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[take(format('module.keyVault.{0}', variables('resourcesName')), 64)]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "existingResourceId": {
            "value": "[tryGet(parameters('keyVaultConfiguration'), 'existingResourceId')]"
          },
          "name": {
            "value": "[take(if(and(not(empty(parameters('keyVaultConfiguration'))), not(empty(tryGet(parameters('keyVaultConfiguration'), 'name')))), parameters('keyVaultConfiguration').name, format('kv{0}', variables('resourcesName'))), 24)]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "tags": {
            "value": "[parameters('tags')]"
          },
          "enableTelemetry": {
            "value": "[parameters('enableTelemetry')]"
          },
          "privateEndpointSubnetResourceId": {
            "value": "[parameters('privateEndpointSubnetResourceId')]"
          },
          "privateDnsZoneResourceId": {
            "value": "[tryGet(parameters('keyVaultConfiguration'), 'privateDnsZoneResourceId')]"
          },
          "roleAssignments": {
            "value": "[tryGet(parameters('keyVaultConfiguration'), 'roleAssignments')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "languageVersion": "2.0",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "3619843058281336187"
            }
          },
          "definitions": {
            "roleAssignmentType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The name (as GUID) of the role assignment. If not provided, a GUID will be generated."
                  }
                },
                "roleDefinitionIdOrName": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                  }
                },
                "principalId": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                  }
                },
                "principalType": {
                  "type": "string",
                  "allowedValues": [
                    "Device",
                    "ForeignGroup",
                    "Group",
                    "ServicePrincipal",
                    "User"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The principal type of the assigned principal ID."
                  }
                },
                "description": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The description of the role assignment."
                  }
                },
                "condition": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                  }
                },
                "conditionVersion": {
                  "type": "string",
                  "allowedValues": [
                    "2.0"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Version of the condition."
                  }
                },
                "delegatedManagedIdentityResourceId": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The Resource Id of the delegated managed identity resource."
                  }
                }
              },
              "metadata": {
                "description": "An AVM-aligned type for a role assignment.",
                "__bicep_imported_from!": {
                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.6.0"
                }
              }
            }
          },
          "functions": [
            {
              "namespace": "__bicep",
              "members": {
                "getResourceGroupName": {
                  "parameters": [
                    {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "name": "parts"
                    }
                  ],
                  "output": {
                    "type": "string",
                    "value": "[if(greater(length(parameters('parts')), 4), parameters('parts')[4], resourceGroup().name)]"
                  },
                  "metadata": {
                    "description": "Extracts the Resource Group Name from a Resource ID.",
                    "__bicep_imported_from!": {
                      "sourceTemplate": "parseResourceIdFunctions.bicep"
                    }
                  }
                },
                "getResourceName": {
                  "parameters": [
                    {
                      "type": "string",
                      "nullable": true,
                      "name": "resourceId"
                    },
                    {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "name": "parts"
                    }
                  ],
                  "output": {
                    "type": "string",
                    "value": "[if(and(and(not(empty(parameters('resourceId'))), contains(parameters('resourceId'), '/')), not(empty(parameters('parts')))), last(parameters('parts')), coalesce(parameters('resourceId'), ''))]"
                  },
                  "metadata": {
                    "description": "Extracts the Resource Name from a Resource ID.",
                    "__bicep_imported_from!": {
                      "sourceTemplate": "parseResourceIdFunctions.bicep"
                    }
                  }
                },
                "getResourceParts": {
                  "parameters": [
                    {
                      "type": "string",
                      "nullable": true,
                      "name": "resourceId"
                    }
                  ],
                  "output": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "value": "[split(coalesce(parameters('resourceId'), ''), '/')]"
                  },
                  "metadata": {
                    "description": "Splits Resource ID into its components.",
                    "__bicep_imported_from!": {
                      "sourceTemplate": "parseResourceIdFunctions.bicep"
                    }
                  }
                },
                "getSubscriptionId": {
                  "parameters": [
                    {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "name": "parts"
                    }
                  ],
                  "output": {
                    "type": "string",
                    "value": "[if(greater(length(parameters('parts')), 2), parameters('parts')[2], subscription().subscriptionId)]"
                  },
                  "metadata": {
                    "description": "Extracts the Subscription ID from a Resource ID.",
                    "__bicep_imported_from!": {
                      "sourceTemplate": "parseResourceIdFunctions.bicep"
                    }
                  }
                }
              }
            }
          ],
          "parameters": {
            "name": {
              "type": "string",
              "maxLength": 24,
              "metadata": {
                "description": "Required. The name of the Key Vault."
              }
            },
            "location": {
              "type": "string",
              "metadata": {
                "description": "Required. The location for the Key Vault."
              }
            },
            "existingResourceId": {
              "type": "string",
              "nullable": true,
              "metadata": {
                "description": "Optional. The full resource ID of an existing Key Vault to use instead of creating a new one."
              }
            },
            "privateEndpointSubnetResourceId": {
              "type": "string",
              "nullable": true,
              "metadata": {
                "description": "Optional. Resource Id of an existing subnet to use for private connectivity. This is required along with 'privateDnsZoneResourceId' to establish private endpoints."
              }
            },
            "privateDnsZoneResourceId": {
              "type": "string",
              "nullable": true,
              "metadata": {
                "description": "Optional. The resource ID of the private DNS zone for the Key Vault to establish private endpoints."
              }
            },
            "roleAssignments": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/roleAssignmentType"
              },
              "nullable": true,
              "metadata": {
                "description": "Optional. Specifies the role assignments for the Key Vault."
              }
            },
            "enableTelemetry": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Optional. Enable/Disable usage telemetry for module."
              }
            },
            "tags": {
              "type": "object",
              "metadata": {
                "__bicep_resource_derived_type!": {
                  "source": "Microsoft.Resources/resourceGroups@2025-04-01#properties/tags"
                },
                "description": "Optional. Specifies the resource tags for all the resources."
              },
              "defaultValue": {}
            }
          },
          "variables": {
            "existingResourceParts": "[__bicep.getResourceParts(parameters('existingResourceId'))]",
            "existingName": "[__bicep.getResourceName(parameters('existingResourceId'), variables('existingResourceParts'))]",
            "existingSubscriptionId": "[__bicep.getSubscriptionId(variables('existingResourceParts'))]",
            "existingResourceGroupName": "[__bicep.getResourceGroupName(variables('existingResourceParts'))]",
            "privateNetworkingEnabled": "[and(not(empty(parameters('privateDnsZoneResourceId'))), not(empty(parameters('privateEndpointSubnetResourceId'))))]"
          },
          "resources": {
            "existingKeyVault": {
              "condition": "[not(empty(parameters('existingResourceId')))]",
              "existing": true,
              "type": "Microsoft.KeyVault/vaults",
              "apiVersion": "2024-11-01",
              "subscriptionId": "[variables('existingSubscriptionId')]",
              "resourceGroup": "[variables('existingResourceGroupName')]",
              "name": "[variables('existingName')]"
            },
            "keyVault": {
              "condition": "[empty(parameters('existingResourceId'))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[take(format('avm.res.key-vault.vault.{0}', parameters('name')), 64)]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "[parameters('name')]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  },
                  "enableTelemetry": {
                    "value": "[parameters('enableTelemetry')]"
                  },
                  "publicNetworkAccess": "[if(variables('privateNetworkingEnabled'), createObject('value', 'Disabled'), createObject('value', 'Enabled'))]",
                  "networkAcls": {
                    "value": {
                      "defaultAction": "[if(variables('privateNetworkingEnabled'), 'Deny', 'Allow')]"
                    }
                  },
                  "enableVaultForDeployment": {
                    "value": true
                  },
                  "enableVaultForDiskEncryption": {
                    "value": true
                  },
                  "enableVaultForTemplateDeployment": {
                    "value": true
                  },
                  "enablePurgeProtection": {
                    "value": false
                  },
                  "enableRbacAuthorization": {
                    "value": true
                  },
                  "enableSoftDelete": {
                    "value": true
                  },
                  "softDeleteRetentionInDays": {
                    "value": 7
                  },
                  "privateEndpoints": "[if(variables('privateNetworkingEnabled'), createObject('value', createArray(createObject('privateDnsZoneGroup', createObject('privateDnsZoneGroupConfigs', createArray(createObject('privateDnsZoneResourceId', parameters('privateDnsZoneResourceId')))), 'service', 'vault', 'subnetResourceId', parameters('privateEndpointSubnetResourceId')))), createObject('value', createArray()))]",
                  "roleAssignments": {
                    "value": "[parameters('roleAssignments')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "languageVersion": "2.0",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.37.4.10188",
                      "templateHash": "9847220803814850914"
                    },
                    "name": "Key Vaults",
                    "description": "This module deploys a Key Vault."
                  },
                  "definitions": {
                    "networkAclsType": {
                      "type": "object",
                      "properties": {
                        "bypass": {
                          "type": "string",
                          "allowedValues": [
                            "AzureServices",
                            "None"
                          ],
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The bypass options for traffic for the network ACLs."
                          }
                        },
                        "defaultAction": {
                          "type": "string",
                          "allowedValues": [
                            "Allow",
                            "Deny"
                          ],
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The default action for the network ACLs, when no rule matches."
                          }
                        },
                        "ipRules": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "value": {
                                "type": "string",
                                "metadata": {
                                  "description": "Required. An IPv4 address range in CIDR notation, such as \"124.56.78.91\" (simple IP address) or \"124.56.78.0/24\"."
                                }
                              }
                            }
                          },
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. A list of IP rules."
                          }
                        },
                        "virtualNetworkRules": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "id": {
                                "type": "string",
                                "metadata": {
                                  "description": "Required. The resource ID of the virtual network subnet."
                                }
                              },
                              "ignoreMissingVnetServiceEndpoint": {
                                "type": "bool",
                                "nullable": true,
                                "metadata": {
                                  "description": "Optional. Whether NRP will ignore the check if parent subnet has serviceEndpoints configured."
                                }
                              }
                            }
                          },
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. A list of virtual network rules."
                          }
                        }
                      },
                      "metadata": {
                        "__bicep_export!": true,
                        "description": "The type for rules governing the accessibility of the key vault from specific network locations."
                      }
                    },
                    "privateEndpointOutputType": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "metadata": {
                            "description": "The name of the private endpoint."
                          }
                        },
                        "resourceId": {
                          "type": "string",
                          "metadata": {
                            "description": "The resource ID of the private endpoint."
                          }
                        },
                        "groupId": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "The group Id for the private endpoint Group."
                          }
                        },
                        "customDnsConfigs": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "fqdn": {
                                "type": "string",
                                "nullable": true,
                                "metadata": {
                                  "description": "FQDN that resolves to private endpoint IP address."
                                }
                              },
                              "ipAddresses": {
                                "type": "array",
                                "items": {
                                  "type": "string"
                                },
                                "metadata": {
                                  "description": "A list of private IP addresses of the private endpoint."
                                }
                              }
                            }
                          },
                          "metadata": {
                            "description": "The custom DNS configurations of the private endpoint."
                          }
                        },
                        "networkInterfaceResourceIds": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "metadata": {
                            "description": "The IDs of the network interfaces associated with the private endpoint."
                          }
                        }
                      },
                      "metadata": {
                        "__bicep_export!": true
                      }
                    },
                    "credentialOutputType": {
                      "type": "object",
                      "properties": {
                        "resourceId": {
                          "type": "string",
                          "metadata": {
                            "description": "The item's resourceId."
                          }
                        },
                        "uri": {
                          "type": "string",
                          "metadata": {
                            "description": "The item's uri."
                          }
                        },
                        "uriWithVersion": {
                          "type": "string",
                          "metadata": {
                            "description": "The item's uri with version."
                          }
                        }
                      },
                      "metadata": {
                        "__bicep_export!": true,
                        "description": "The type for a credential output."
                      }
                    },
                    "accessPolicyType": {
                      "type": "object",
                      "properties": {
                        "tenantId": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The tenant ID that is used for authenticating requests to the key vault."
                          }
                        },
                        "objectId": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The object ID of a user, service principal or security group in the tenant for the vault."
                          }
                        },
                        "applicationId": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Application ID of the client making request on behalf of a principal."
                          }
                        },
                        "permissions": {
                          "type": "object",
                          "properties": {
                            "keys": {
                              "type": "array",
                              "allowedValues": [
                                "all",
                                "backup",
                                "create",
                                "decrypt",
                                "delete",
                                "encrypt",
                                "get",
                                "getrotationpolicy",
                                "import",
                                "list",
                                "purge",
                                "recover",
                                "release",
                                "restore",
                                "rotate",
                                "setrotationpolicy",
                                "sign",
                                "unwrapKey",
                                "update",
                                "verify",
                                "wrapKey"
                              ],
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Permissions to keys."
                              }
                            },
                            "secrets": {
                              "type": "array",
                              "allowedValues": [
                                "all",
                                "backup",
                                "delete",
                                "get",
                                "list",
                                "purge",
                                "recover",
                                "restore",
                                "set"
                              ],
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Permissions to secrets."
                              }
                            },
                            "certificates": {
                              "type": "array",
                              "allowedValues": [
                                "all",
                                "backup",
                                "create",
                                "delete",
                                "deleteissuers",
                                "get",
                                "getissuers",
                                "import",
                                "list",
                                "listissuers",
                                "managecontacts",
                                "manageissuers",
                                "purge",
                                "recover",
                                "restore",
                                "setissuers",
                                "update"
                              ],
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Permissions to certificates."
                              }
                            },
                            "storage": {
                              "type": "array",
                              "allowedValues": [
                                "all",
                                "backup",
                                "delete",
                                "deletesas",
                                "get",
                                "getsas",
                                "list",
                                "listsas",
                                "purge",
                                "recover",
                                "regeneratekey",
                                "restore",
                                "set",
                                "setsas",
                                "update"
                              ],
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Permissions to storage accounts."
                              }
                            }
                          },
                          "metadata": {
                            "description": "Required. Permissions the identity has for keys, secrets and certificates."
                          }
                        }
                      },
                      "metadata": {
                        "__bicep_export!": true,
                        "description": "The type for an access policy."
                      }
                    },
                    "secretType": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The name of the secret."
                          }
                        },
                        "tags": {
                          "type": "object",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Resource tags."
                          }
                        },
                        "attributes": {
                          "type": "object",
                          "properties": {
                            "enabled": {
                              "type": "bool",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Defines whether the secret is enabled or disabled."
                              }
                            },
                            "exp": {
                              "type": "int",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Defines when the secret will become invalid. Defined in seconds since 1970-01-01T00:00:00Z."
                              }
                            },
                            "nbf": {
                              "type": "int",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. If set, defines the date from which onwards the secret becomes valid. Defined in seconds since 1970-01-01T00:00:00Z."
                              }
                            }
                          },
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Contains attributes of the secret."
                          }
                        },
                        "contentType": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The content type of the secret."
                          }
                        },
                        "value": {
                          "type": "securestring",
                          "metadata": {
                            "description": "Required. The value of the secret. NOTE: \"value\" will never be returned from the service, as APIs using this model are is intended for internal use in ARM deployments. Users should use the data-plane REST service for interaction with vault secrets."
                          }
                        },
                        "roleAssignments": {
                          "type": "array",
                          "items": {
                            "$ref": "#/definitions/roleAssignmentType"
                          },
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Array of role assignments to create."
                          }
                        }
                      },
                      "metadata": {
                        "__bicep_export!": true,
                        "description": "The type for a secret output."
                      }
                    },
                    "keyType": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The name of the key."
                          }
                        },
                        "tags": {
                          "type": "object",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Resource tags."
                          }
                        },
                        "attributes": {
                          "type": "object",
                          "properties": {
                            "enabled": {
                              "type": "bool",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Defines whether the key is enabled or disabled."
                              }
                            },
                            "exp": {
                              "type": "int",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Defines when the key will become invalid. Defined in seconds since 1970-01-01T00:00:00Z."
                              }
                            },
                            "nbf": {
                              "type": "int",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. If set, defines the date from which onwards the key becomes valid. Defined in seconds since 1970-01-01T00:00:00Z."
                              }
                            }
                          },
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Contains attributes of the key."
                          }
                        },
                        "curveName": {
                          "type": "string",
                          "allowedValues": [
                            "P-256",
                            "P-256K",
                            "P-384",
                            "P-521"
                          ],
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The elliptic curve name. Only works if \"keySize\" equals \"EC\" or \"EC-HSM\". Default is \"P-256\"."
                          }
                        },
                        "keyOps": {
                          "type": "array",
                          "allowedValues": [
                            "decrypt",
                            "encrypt",
                            "import",
                            "release",
                            "sign",
                            "unwrapKey",
                            "verify",
                            "wrapKey"
                          ],
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The allowed operations on this key."
                          }
                        },
                        "keySize": {
                          "type": "int",
                          "allowedValues": [
                            2048,
                            3072,
                            4096
                          ],
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The key size in bits. Only works if \"keySize\" equals \"RSA\" or \"RSA-HSM\". Default is \"4096\"."
                          }
                        },
                        "kty": {
                          "type": "string",
                          "allowedValues": [
                            "EC",
                            "EC-HSM",
                            "RSA",
                            "RSA-HSM"
                          ],
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The type of the key. Default is \"EC\"."
                          }
                        },
                        "releasePolicy": {
                          "type": "object",
                          "properties": {
                            "contentType": {
                              "type": "string",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Content type and version of key release policy."
                              }
                            },
                            "data": {
                              "type": "string",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Blob encoding the policy rules under which the key can be released."
                              }
                            }
                          },
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Key release policy."
                          }
                        },
                        "rotationPolicy": {
                          "$ref": "#/definitions/rotationPolicyType",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Key rotation policy."
                          }
                        },
                        "roleAssignments": {
                          "type": "array",
                          "items": {
                            "$ref": "#/definitions/roleAssignmentType"
                          },
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Array of role assignments to create."
                          }
                        }
                      },
                      "metadata": {
                        "__bicep_export!": true,
                        "description": "The type for a key."
                      }
                    },
                    "_1.privateEndpointCustomDnsConfigType": {
                      "type": "object",
                      "properties": {
                        "fqdn": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. FQDN that resolves to private endpoint IP address."
                          }
                        },
                        "ipAddresses": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "metadata": {
                            "description": "Required. A list of private IP addresses of the private endpoint."
                          }
                        }
                      },
                      "metadata": {
                        "__bicep_imported_from!": {
                          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.6.0"
                        }
                      }
                    },
                    "_1.privateEndpointIpConfigurationType": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The name of the resource that is unique within a resource group."
                          }
                        },
                        "properties": {
                          "type": "object",
                          "properties": {
                            "groupId": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The ID of a group obtained from the remote resource that this private endpoint should connect to."
                              }
                            },
                            "memberName": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The member name of a group obtained from the remote resource that this private endpoint should connect to."
                              }
                            },
                            "privateIPAddress": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. A private IP address obtained from the private endpoint's subnet."
                              }
                            }
                          },
                          "metadata": {
                            "description": "Required. Properties of private endpoint IP configurations."
                          }
                        }
                      },
                      "metadata": {
                        "__bicep_imported_from!": {
                          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.6.0"
                        }
                      }
                    },
                    "_1.privateEndpointPrivateDnsZoneGroupType": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The name of the Private DNS Zone Group."
                          }
                        },
                        "privateDnsZoneGroupConfigs": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "name": {
                                "type": "string",
                                "nullable": true,
                                "metadata": {
                                  "description": "Optional. The name of the private DNS Zone Group config."
                                }
                              },
                              "privateDnsZoneResourceId": {
                                "type": "string",
                                "metadata": {
                                  "description": "Required. The resource id of the private DNS zone."
                                }
                              }
                            }
                          },
                          "metadata": {
                            "description": "Required. The private DNS Zone Groups to associate the Private Endpoint. A DNS Zone Group can support up to 5 DNS zones."
                          }
                        }
                      },
                      "metadata": {
                        "__bicep_imported_from!": {
                          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.6.0"
                        }
                      }
                    },
                    "diagnosticSettingFullType": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The name of the diagnostic setting."
                          }
                        },
                        "logCategoriesAndGroups": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "category": {
                                "type": "string",
                                "nullable": true,
                                "metadata": {
                                  "description": "Optional. Name of a Diagnostic Log category for a resource type this setting is applied to. Set the specific logs to collect here."
                                }
                              },
                              "categoryGroup": {
                                "type": "string",
                                "nullable": true,
                                "metadata": {
                                  "description": "Optional. Name of a Diagnostic Log category group for a resource type this setting is applied to. Set to `allLogs` to collect all logs."
                                }
                              },
                              "enabled": {
                                "type": "bool",
                                "nullable": true,
                                "metadata": {
                                  "description": "Optional. Enable or disable the category explicitly. Default is `true`."
                                }
                              }
                            }
                          },
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The name of logs that will be streamed. \"allLogs\" includes all possible logs for the resource. Set to `[]` to disable log collection."
                          }
                        },
                        "metricCategories": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "category": {
                                "type": "string",
                                "metadata": {
                                  "description": "Required. Name of a Diagnostic Metric category for a resource type this setting is applied to. Set to `AllMetrics` to collect all metrics."
                                }
                              },
                              "enabled": {
                                "type": "bool",
                                "nullable": true,
                                "metadata": {
                                  "description": "Optional. Enable or disable the category explicitly. Default is `true`."
                                }
                              }
                            }
                          },
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The name of metrics that will be streamed. \"allMetrics\" includes all possible metrics for the resource. Set to `[]` to disable metric collection."
                          }
                        },
                        "logAnalyticsDestinationType": {
                          "type": "string",
                          "allowedValues": [
                            "AzureDiagnostics",
                            "Dedicated"
                          ],
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. A string indicating whether the export to Log Analytics should use the default destination type, i.e. AzureDiagnostics, or use a destination type."
                          }
                        },
                        "workspaceResourceId": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Resource ID of the diagnostic log analytics workspace. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                          }
                        },
                        "storageAccountResourceId": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Resource ID of the diagnostic storage account. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                          }
                        },
                        "eventHubAuthorizationRuleResourceId": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
                          }
                        },
                        "eventHubName": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                          }
                        },
                        "marketplacePartnerResourceId": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The full ARM resource ID of the Marketplace resource to which you would like to send Diagnostic Logs."
                          }
                        }
                      },
                      "metadata": {
                        "description": "An AVM-aligned type for a diagnostic setting. To be used if both logs & metrics are supported by the resource provider.",
                        "__bicep_imported_from!": {
                          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.6.0"
                        }
                      }
                    },
                    "lockType": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Specify the name of lock."
                          }
                        },
                        "kind": {
                          "type": "string",
                          "allowedValues": [
                            "CanNotDelete",
                            "None",
                            "ReadOnly"
                          ],
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Specify the type of lock."
                          }
                        },
                        "notes": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Specify the notes of the lock."
                          }
                        }
                      },
                      "metadata": {
                        "description": "An AVM-aligned type for a lock.",
                        "__bicep_imported_from!": {
                          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.6.0"
                        }
                      }
                    },
                    "privateEndpointSingleServiceType": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The name of the Private Endpoint."
                          }
                        },
                        "location": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The location to deploy the Private Endpoint to."
                          }
                        },
                        "privateLinkServiceConnectionName": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The name of the private link connection to create."
                          }
                        },
                        "service": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The subresource to deploy the Private Endpoint for. For example \"vault\" for a Key Vault Private Endpoint."
                          }
                        },
                        "subnetResourceId": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. Resource ID of the subnet where the endpoint needs to be created."
                          }
                        },
                        "resourceGroupResourceId": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The resource ID of the Resource Group the Private Endpoint will be created in. If not specified, the Resource Group of the provided Virtual Network Subnet is used."
                          }
                        },
                        "privateDnsZoneGroup": {
                          "$ref": "#/definitions/_1.privateEndpointPrivateDnsZoneGroupType",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The private DNS Zone Group to configure for the Private Endpoint."
                          }
                        },
                        "isManualConnection": {
                          "type": "bool",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. If Manual Private Link Connection is required."
                          }
                        },
                        "manualConnectionRequestMessage": {
                          "type": "string",
                          "nullable": true,
                          "maxLength": 140,
                          "metadata": {
                            "description": "Optional. A message passed to the owner of the remote resource with the manual connection request."
                          }
                        },
                        "customDnsConfigs": {
                          "type": "array",
                          "items": {
                            "$ref": "#/definitions/_1.privateEndpointCustomDnsConfigType"
                          },
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Custom DNS configurations."
                          }
                        },
                        "ipConfigurations": {
                          "type": "array",
                          "items": {
                            "$ref": "#/definitions/_1.privateEndpointIpConfigurationType"
                          },
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. A list of IP configurations of the Private Endpoint. This will be used to map to the first-party Service endpoints."
                          }
                        },
                        "applicationSecurityGroupResourceIds": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Application security groups in which the Private Endpoint IP configuration is included."
                          }
                        },
                        "customNetworkInterfaceName": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The custom name of the network interface attached to the Private Endpoint."
                          }
                        },
                        "lock": {
                          "$ref": "#/definitions/lockType",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Specify the type of lock."
                          }
                        },
                        "roleAssignments": {
                          "type": "array",
                          "items": {
                            "$ref": "#/definitions/roleAssignmentType"
                          },
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Array of role assignments to create."
                          }
                        },
                        "tags": {
                          "type": "object",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Tags to be applied on all resources/Resource Groups in this deployment."
                          }
                        },
                        "enableTelemetry": {
                          "type": "bool",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Enable/Disable usage telemetry for module."
                          }
                        }
                      },
                      "metadata": {
                        "description": "An AVM-aligned type for a private endpoint. To be used if the private endpoint's default service / groupId can be assumed (i.e., for services that only have one Private Endpoint type like 'vault' for key vault).",
                        "__bicep_imported_from!": {
                          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.6.0"
                        }
                      }
                    },
                    "roleAssignmentType": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The name (as GUID) of the role assignment. If not provided, a GUID will be generated."
                          }
                        },
                        "roleDefinitionIdOrName": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                          }
                        },
                        "principalId": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                          }
                        },
                        "principalType": {
                          "type": "string",
                          "allowedValues": [
                            "Device",
                            "ForeignGroup",
                            "Group",
                            "ServicePrincipal",
                            "User"
                          ],
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The principal type of the assigned principal ID."
                          }
                        },
                        "description": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The description of the role assignment."
                          }
                        },
                        "condition": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                          }
                        },
                        "conditionVersion": {
                          "type": "string",
                          "allowedValues": [
                            "2.0"
                          ],
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Version of the condition."
                          }
                        },
                        "delegatedManagedIdentityResourceId": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The Resource Id of the delegated managed identity resource."
                          }
                        }
                      },
                      "metadata": {
                        "description": "An AVM-aligned type for a role assignment.",
                        "__bicep_imported_from!": {
                          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.6.0"
                        }
                      }
                    },
                    "rotationPolicyType": {
                      "type": "object",
                      "properties": {
                        "attributes": {
                          "type": "object",
                          "properties": {
                            "expiryTime": {
                              "type": "string",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The expiration time for the new key version. It should be in ISO8601 format. Eg: \"P90D\", \"P1Y\"."
                              }
                            }
                          },
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The attributes of key rotation policy."
                          }
                        },
                        "lifetimeActions": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "action": {
                                "type": "object",
                                "properties": {
                                  "type": {
                                    "type": "string",
                                    "allowedValues": [
                                      "notify",
                                      "rotate"
                                    ],
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The type of the action."
                                    }
                                  }
                                },
                                "nullable": true,
                                "metadata": {
                                  "description": "Optional. The type of the action."
                                }
                              },
                              "trigger": {
                                "type": "object",
                                "properties": {
                                  "timeAfterCreate": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The time duration after key creation to rotate the key. It only applies to rotate. It will be in ISO 8601 duration format. Eg: \"P90D\", \"P1Y\"."
                                    }
                                  },
                                  "timeBeforeExpiry": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The time duration before key expiring to rotate or notify. It will be in ISO 8601 duration format. Eg: \"P90D\", \"P1Y\"."
                                    }
                                  }
                                },
                                "nullable": true,
                                "metadata": {
                                  "description": "Optional. The time duration for rotating the key."
                                }
                              }
                            }
                          },
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The key rotation policy lifetime actions."
                          }
                        }
                      },
                      "metadata": {
                        "description": "The type for a rotation policy.",
                        "__bicep_imported_from!": {
                          "sourceTemplate": "key/main.bicep"
                        }
                      }
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "maxLength": 24,
                      "metadata": {
                        "description": "Required. Name of the Key Vault. Must be globally unique."
                      }
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]",
                      "metadata": {
                        "description": "Optional. Location for all resources."
                      }
                    },
                    "accessPolicies": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/accessPolicyType"
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. All access policies to create."
                      }
                    },
                    "secrets": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/secretType"
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. All secrets to create."
                      }
                    },
                    "keys": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/keyType"
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. All keys to create."
                      }
                    },
                    "enableVaultForDeployment": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. Specifies if the vault is enabled for deployment by script or compute."
                      }
                    },
                    "enableVaultForTemplateDeployment": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. Specifies if the vault is enabled for a template deployment."
                      }
                    },
                    "enableVaultForDiskEncryption": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. Specifies if the azure platform has access to the vault for enabling disk encryption scenarios."
                      }
                    },
                    "enableSoftDelete": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. Switch to enable/disable Key Vault's soft delete feature."
                      }
                    },
                    "softDeleteRetentionInDays": {
                      "type": "int",
                      "defaultValue": 90,
                      "metadata": {
                        "description": "Optional. softDelete data retention days. It accepts >=7 and <=90."
                      }
                    },
                    "enableRbacAuthorization": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. Property that controls how data actions are authorized. When true, the key vault will use Role Based Access Control (RBAC) for authorization of data actions, and the access policies specified in vault properties will be ignored. When false, the key vault will use the access policies specified in vault properties, and any policy stored on Azure Resource Manager will be ignored. Note that management actions are always authorized with RBAC."
                      }
                    },
                    "createMode": {
                      "type": "string",
                      "defaultValue": "default",
                      "allowedValues": [
                        "default",
                        "recover"
                      ],
                      "metadata": {
                        "description": "Optional. The vault's create mode to indicate whether the vault need to be recovered or not."
                      }
                    },
                    "enablePurgeProtection": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. Provide 'true' to enable Key Vault's purge protection feature."
                      }
                    },
                    "sku": {
                      "type": "string",
                      "defaultValue": "premium",
                      "allowedValues": [
                        "premium",
                        "standard"
                      ],
                      "metadata": {
                        "description": "Optional. Specifies the SKU for the vault."
                      }
                    },
                    "networkAcls": {
                      "$ref": "#/definitions/networkAclsType",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Rules governing the accessibility of the resource from specific network locations."
                      }
                    },
                    "publicNetworkAccess": {
                      "type": "string",
                      "defaultValue": "",
                      "allowedValues": [
                        "",
                        "Enabled",
                        "Disabled"
                      ],
                      "metadata": {
                        "description": "Optional. Whether or not public network access is allowed for this resource. For security reasons it should be disabled. If not specified, it will be disabled by default if private endpoints are set and networkAcls are not set."
                      }
                    },
                    "lock": {
                      "$ref": "#/definitions/lockType",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The lock settings of the service."
                      }
                    },
                    "roleAssignments": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/roleAssignmentType"
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Array of role assignments to create."
                      }
                    },
                    "privateEndpoints": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/privateEndpointSingleServiceType"
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Configuration details for private endpoints. For security reasons, it is recommended to use private endpoints whenever possible."
                      }
                    },
                    "tags": {
                      "type": "object",
                      "metadata": {
                        "__bicep_resource_derived_type!": {
                          "source": "Microsoft.KeyVault/vaults@2024-11-01#properties/tags"
                        },
                        "description": "Optional. Resource tags."
                      },
                      "nullable": true
                    },
                    "diagnosticSettings": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/diagnosticSettingFullType"
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The diagnostic settings of the service."
                      }
                    },
                    "enableTelemetry": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. Enable/Disable usage telemetry for module."
                      }
                    }
                  },
                  "variables": {
                    "copy": [
                      {
                        "name": "formattedRoleAssignments",
                        "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]",
                        "input": "[union(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')], createObject('roleDefinitionId', coalesce(tryGet(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName), if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName)))))]"
                      },
                      {
                        "name": "formattedAccessPolicies",
                        "count": "[length(coalesce(parameters('accessPolicies'), createArray()))]",
                        "input": {
                          "applicationId": "[coalesce(tryGet(coalesce(parameters('accessPolicies'), createArray())[copyIndex('formattedAccessPolicies')], 'applicationId'), '')]",
                          "objectId": "[coalesce(parameters('accessPolicies'), createArray())[copyIndex('formattedAccessPolicies')].objectId]",
                          "permissions": "[coalesce(parameters('accessPolicies'), createArray())[copyIndex('formattedAccessPolicies')].permissions]",
                          "tenantId": "[coalesce(tryGet(coalesce(parameters('accessPolicies'), createArray())[copyIndex('formattedAccessPolicies')], 'tenantId'), tenant().tenantId)]"
                        }
                      }
                    ],
                    "enableReferencedModulesTelemetry": false,
                    "builtInRoleNames": {
                      "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                      "Key Vault Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '00482a5a-887f-4fb3-b363-3b7fe8e74483')]",
                      "Key Vault Certificates Officer": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'a4417e6f-fecd-4de8-b567-7b0420556985')]",
                      "Key Vault Certificate User": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'db79e9a7-68ee-4b58-9aeb-b90e7c24fcba')]",
                      "Key Vault Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f25e0fa2-a7c8-4377-a976-54943a77a395')]",
                      "Key Vault Crypto Officer": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '14b46e9e-c2b7-41b4-b07b-48a6ebf60603')]",
                      "Key Vault Crypto Service Encryption User": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'e147488a-f6f5-4113-8e2d-b22465e65bf6')]",
                      "Key Vault Crypto User": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '12338af0-0e69-4776-bea7-57ae8d297424')]",
                      "Key Vault Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '21090545-7ca7-4776-b22c-e363652d74d2')]",
                      "Key Vault Secrets Officer": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b86a8fe4-44ce-4948-aee5-eccb2c155cd7')]",
                      "Key Vault Secrets User": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4633458b-17de-408a-b874-0445c86b69e6')]",
                      "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                      "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                      "Role Based Access Control Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
                      "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
                    }
                  },
                  "resources": {
                    "avmTelemetry": {
                      "condition": "[parameters('enableTelemetry')]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2024-03-01",
                      "name": "[format('46d3xbcp.res.keyvault-vault.{0}.{1}', replace('0.13.1', '.', '-'), substring(uniqueString(deployment().name, parameters('location')), 0, 4))]",
                      "properties": {
                        "mode": "Incremental",
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "resources": [],
                          "outputs": {
                            "telemetry": {
                              "type": "String",
                              "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                            }
                          }
                        }
                      }
                    },
                    "keyVault": {
                      "type": "Microsoft.KeyVault/vaults",
                      "apiVersion": "2024-11-01",
                      "name": "[parameters('name')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "enabledForDeployment": "[parameters('enableVaultForDeployment')]",
                        "enabledForTemplateDeployment": "[parameters('enableVaultForTemplateDeployment')]",
                        "enabledForDiskEncryption": "[parameters('enableVaultForDiskEncryption')]",
                        "enableSoftDelete": "[parameters('enableSoftDelete')]",
                        "softDeleteRetentionInDays": "[parameters('softDeleteRetentionInDays')]",
                        "enableRbacAuthorization": "[parameters('enableRbacAuthorization')]",
                        "createMode": "[parameters('createMode')]",
                        "enablePurgeProtection": "[if(parameters('enablePurgeProtection'), parameters('enablePurgeProtection'), null())]",
                        "tenantId": "[subscription().tenantId]",
                        "accessPolicies": "[variables('formattedAccessPolicies')]",
                        "sku": {
                          "name": "[parameters('sku')]",
                          "family": "A"
                        },
                        "networkAcls": "[if(not(empty(coalesce(parameters('networkAcls'), createObject()))), createObject('bypass', tryGet(parameters('networkAcls'), 'bypass'), 'defaultAction', tryGet(parameters('networkAcls'), 'defaultAction'), 'virtualNetworkRules', coalesce(tryGet(parameters('networkAcls'), 'virtualNetworkRules'), createArray()), 'ipRules', coalesce(tryGet(parameters('networkAcls'), 'ipRules'), createArray())), null())]",
                        "publicNetworkAccess": "[if(not(empty(parameters('publicNetworkAccess'))), parameters('publicNetworkAccess'), if(and(not(empty(coalesce(parameters('privateEndpoints'), createArray()))), empty(coalesce(parameters('networkAcls'), createObject()))), 'Disabled', null()))]"
                      }
                    },
                    "keyVault_lock": {
                      "condition": "[and(not(empty(coalesce(parameters('lock'), createObject()))), not(equals(tryGet(parameters('lock'), 'kind'), 'None')))]",
                      "type": "Microsoft.Authorization/locks",
                      "apiVersion": "2020-05-01",
                      "scope": "[format('Microsoft.KeyVault/vaults/{0}', parameters('name'))]",
                      "name": "[coalesce(tryGet(parameters('lock'), 'name'), format('lock-{0}', parameters('name')))]",
                      "properties": {
                        "level": "[coalesce(tryGet(parameters('lock'), 'kind'), '')]",
                        "notes": "[coalesce(tryGet(parameters('lock'), 'notes'), if(equals(tryGet(parameters('lock'), 'kind'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot delete or modify the resource or child resources.'))]"
                      },
                      "dependsOn": [
                        "keyVault"
                      ]
                    },
                    "keyVault_diagnosticSettings": {
                      "copy": {
                        "name": "keyVault_diagnosticSettings",
                        "count": "[length(coalesce(parameters('diagnosticSettings'), createArray()))]"
                      },
                      "type": "Microsoft.Insights/diagnosticSettings",
                      "apiVersion": "2021-05-01-preview",
                      "scope": "[format('Microsoft.KeyVault/vaults/{0}', parameters('name'))]",
                      "name": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'name'), format('{0}-diagnosticSettings', parameters('name')))]",
                      "properties": {
                        "copy": [
                          {
                            "name": "metrics",
                            "count": "[length(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics'))))]",
                            "input": {
                              "category": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics')))[copyIndex('metrics')].category]",
                              "enabled": "[coalesce(tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics')))[copyIndex('metrics')], 'enabled'), true())]",
                              "timeGrain": null
                            }
                          },
                          {
                            "name": "logs",
                            "count": "[length(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs'))))]",
                            "input": {
                              "categoryGroup": "[tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'categoryGroup')]",
                              "category": "[tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'category')]",
                              "enabled": "[coalesce(tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'enabled'), true())]"
                            }
                          }
                        ],
                        "storageAccountId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'storageAccountResourceId')]",
                        "workspaceId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'workspaceResourceId')]",
                        "eventHubAuthorizationRuleId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubAuthorizationRuleResourceId')]",
                        "eventHubName": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubName')]",
                        "marketplacePartnerId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'marketplacePartnerResourceId')]",
                        "logAnalyticsDestinationType": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logAnalyticsDestinationType')]"
                      },
                      "dependsOn": [
                        "keyVault"
                      ]
                    },
                    "keyVault_roleAssignments": {
                      "copy": {
                        "name": "keyVault_roleAssignments",
                        "count": "[length(coalesce(variables('formattedRoleAssignments'), createArray()))]"
                      },
                      "type": "Microsoft.Authorization/roleAssignments",
                      "apiVersion": "2022-04-01",
                      "scope": "[format('Microsoft.KeyVault/vaults/{0}', parameters('name'))]",
                      "name": "[coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'name'), guid(resourceId('Microsoft.KeyVault/vaults', parameters('name')), coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId, coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId))]",
                      "properties": {
                        "roleDefinitionId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId]",
                        "principalId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId]",
                        "description": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'description')]",
                        "principalType": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'principalType')]",
                        "condition": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition')]",
                        "conditionVersion": "[if(not(empty(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                        "delegatedManagedIdentityResourceId": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                      },
                      "dependsOn": [
                        "keyVault"
                      ]
                    },
                    "keyVault_accessPolicies": {
                      "condition": "[not(empty(parameters('accessPolicies')))]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('{0}-KeyVault-AccessPolicies', uniqueString(deployment().name, parameters('location')))]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "keyVaultName": {
                            "value": "[parameters('name')]"
                          },
                          "accessPolicies": {
                            "value": "[parameters('accessPolicies')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "languageVersion": "2.0",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.37.4.10188",
                              "templateHash": "4539421523375369835"
                            },
                            "name": "Key Vault Access Policies",
                            "description": "This module deploys a Key Vault Access Policy."
                          },
                          "definitions": {
                            "accessPoliciesType": {
                              "type": "object",
                              "properties": {
                                "tenantId": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The tenant ID that is used for authenticating requests to the key vault."
                                  }
                                },
                                "objectId": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. The object ID of a user, service principal or security group in the tenant for the vault."
                                  }
                                },
                                "applicationId": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Application ID of the client making request on behalf of a principal."
                                  }
                                },
                                "permissions": {
                                  "type": "object",
                                  "properties": {
                                    "keys": {
                                      "type": "array",
                                      "allowedValues": [
                                        "all",
                                        "backup",
                                        "create",
                                        "decrypt",
                                        "delete",
                                        "encrypt",
                                        "get",
                                        "getrotationpolicy",
                                        "import",
                                        "list",
                                        "purge",
                                        "recover",
                                        "release",
                                        "restore",
                                        "rotate",
                                        "setrotationpolicy",
                                        "sign",
                                        "unwrapKey",
                                        "update",
                                        "verify",
                                        "wrapKey"
                                      ],
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Permissions to keys."
                                      }
                                    },
                                    "secrets": {
                                      "type": "array",
                                      "allowedValues": [
                                        "all",
                                        "backup",
                                        "delete",
                                        "get",
                                        "list",
                                        "purge",
                                        "recover",
                                        "restore",
                                        "set"
                                      ],
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Permissions to secrets."
                                      }
                                    },
                                    "certificates": {
                                      "type": "array",
                                      "allowedValues": [
                                        "all",
                                        "backup",
                                        "create",
                                        "delete",
                                        "deleteissuers",
                                        "get",
                                        "getissuers",
                                        "import",
                                        "list",
                                        "listissuers",
                                        "managecontacts",
                                        "manageissuers",
                                        "purge",
                                        "recover",
                                        "restore",
                                        "setissuers",
                                        "update"
                                      ],
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Permissions to certificates."
                                      }
                                    },
                                    "storage": {
                                      "type": "array",
                                      "allowedValues": [
                                        "all",
                                        "backup",
                                        "delete",
                                        "deletesas",
                                        "get",
                                        "getsas",
                                        "list",
                                        "listsas",
                                        "purge",
                                        "recover",
                                        "regeneratekey",
                                        "restore",
                                        "set",
                                        "setsas",
                                        "update"
                                      ],
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Permissions to storage accounts."
                                      }
                                    }
                                  },
                                  "metadata": {
                                    "description": "Required. Permissions the identity has for keys, secrets and certificates."
                                  }
                                }
                              },
                              "metadata": {
                                "__bicep_export!": true,
                                "description": "The type for an access policy."
                              }
                            }
                          },
                          "parameters": {
                            "keyVaultName": {
                              "type": "string",
                              "metadata": {
                                "description": "Conditional. The name of the parent key vault. Required if the template is used in a standalone deployment."
                              }
                            },
                            "accessPolicies": {
                              "type": "array",
                              "items": {
                                "$ref": "#/definitions/accessPoliciesType"
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. An array of 0 to 16 identities that have access to the key vault. All identities in the array must use the same tenant ID as the key vault's tenant ID."
                              }
                            }
                          },
                          "resources": {
                            "keyVault": {
                              "existing": true,
                              "type": "Microsoft.KeyVault/vaults",
                              "apiVersion": "2024-11-01",
                              "name": "[parameters('keyVaultName')]"
                            },
                            "policies": {
                              "type": "Microsoft.KeyVault/vaults/accessPolicies",
                              "apiVersion": "2023-07-01",
                              "name": "[format('{0}/{1}', parameters('keyVaultName'), 'add')]",
                              "properties": {
                                "copy": [
                                  {
                                    "name": "accessPolicies",
                                    "count": "[length(coalesce(parameters('accessPolicies'), createArray()))]",
                                    "input": {
                                      "applicationId": "[coalesce(tryGet(coalesce(parameters('accessPolicies'), createArray())[copyIndex('accessPolicies')], 'applicationId'), '')]",
                                      "objectId": "[coalesce(parameters('accessPolicies'), createArray())[copyIndex('accessPolicies')].objectId]",
                                      "permissions": "[coalesce(parameters('accessPolicies'), createArray())[copyIndex('accessPolicies')].permissions]",
                                      "tenantId": "[coalesce(tryGet(coalesce(parameters('accessPolicies'), createArray())[copyIndex('accessPolicies')], 'tenantId'), tenant().tenantId)]"
                                    }
                                  }
                                ]
                              }
                            }
                          },
                          "outputs": {
                            "resourceGroupName": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the resource group the access policies assignment was created in."
                              },
                              "value": "[resourceGroup().name]"
                            },
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the access policies assignment."
                              },
                              "value": "add"
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource ID of the access policies assignment."
                              },
                              "value": "[resourceId('Microsoft.KeyVault/vaults/accessPolicies', parameters('keyVaultName'), 'add')]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "keyVault"
                      ]
                    },
                    "keyVault_secrets": {
                      "copy": {
                        "name": "keyVault_secrets",
                        "count": "[length(coalesce(parameters('secrets'), createArray()))]"
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('{0}-KeyVault-Secret-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "name": {
                            "value": "[coalesce(parameters('secrets'), createArray())[copyIndex()].name]"
                          },
                          "value": {
                            "value": "[coalesce(parameters('secrets'), createArray())[copyIndex()].value]"
                          },
                          "keyVaultName": {
                            "value": "[parameters('name')]"
                          },
                          "attributesEnabled": {
                            "value": "[tryGet(tryGet(coalesce(parameters('secrets'), createArray())[copyIndex()], 'attributes'), 'enabled')]"
                          },
                          "attributesExp": {
                            "value": "[tryGet(tryGet(coalesce(parameters('secrets'), createArray())[copyIndex()], 'attributes'), 'exp')]"
                          },
                          "attributesNbf": {
                            "value": "[tryGet(tryGet(coalesce(parameters('secrets'), createArray())[copyIndex()], 'attributes'), 'nbf')]"
                          },
                          "contentType": {
                            "value": "[tryGet(coalesce(parameters('secrets'), createArray())[copyIndex()], 'contentType')]"
                          },
                          "tags": {
                            "value": "[coalesce(tryGet(coalesce(parameters('secrets'), createArray())[copyIndex()], 'tags'), parameters('tags'))]"
                          },
                          "roleAssignments": {
                            "value": "[tryGet(coalesce(parameters('secrets'), createArray())[copyIndex()], 'roleAssignments')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "languageVersion": "2.0",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.37.4.10188",
                              "templateHash": "8382262411419152826"
                            },
                            "name": "Key Vault Secrets",
                            "description": "This module deploys a Key Vault Secret."
                          },
                          "definitions": {
                            "roleAssignmentType": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The name (as GUID) of the role assignment. If not provided, a GUID will be generated."
                                  }
                                },
                                "roleDefinitionIdOrName": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                                  }
                                },
                                "principalId": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                                  }
                                },
                                "principalType": {
                                  "type": "string",
                                  "allowedValues": [
                                    "Device",
                                    "ForeignGroup",
                                    "Group",
                                    "ServicePrincipal",
                                    "User"
                                  ],
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The principal type of the assigned principal ID."
                                  }
                                },
                                "description": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The description of the role assignment."
                                  }
                                },
                                "condition": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                                  }
                                },
                                "conditionVersion": {
                                  "type": "string",
                                  "allowedValues": [
                                    "2.0"
                                  ],
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Version of the condition."
                                  }
                                },
                                "delegatedManagedIdentityResourceId": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The Resource Id of the delegated managed identity resource."
                                  }
                                }
                              },
                              "metadata": {
                                "description": "An AVM-aligned type for a role assignment.",
                                "__bicep_imported_from!": {
                                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
                                }
                              }
                            }
                          },
                          "parameters": {
                            "keyVaultName": {
                              "type": "string",
                              "metadata": {
                                "description": "Conditional. The name of the parent key vault. Required if the template is used in a standalone deployment."
                              }
                            },
                            "name": {
                              "type": "string",
                              "minLength": 1,
                              "maxLength": 127,
                              "metadata": {
                                "description": "Required. The name of the secret (letters (upper and lower case), numbers, -)."
                              }
                            },
                            "tags": {
                              "type": "object",
                              "metadata": {
                                "__bicep_resource_derived_type!": {
                                  "source": "Microsoft.KeyVault/vaults@2024-11-01#properties/tags"
                                },
                                "description": "Optional. Resource tags."
                              },
                              "nullable": true
                            },
                            "attributesEnabled": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Optional. Determines whether the object is enabled."
                              }
                            },
                            "attributesExp": {
                              "type": "int",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Expiry date in seconds since 1970-01-01T00:00:00Z. For security reasons, it is recommended to set an expiration date whenever possible."
                              }
                            },
                            "attributesNbf": {
                              "type": "int",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Not before date in seconds since 1970-01-01T00:00:00Z."
                              }
                            },
                            "contentType": {
                              "type": "securestring",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The content type of the secret."
                              }
                            },
                            "value": {
                              "type": "securestring",
                              "metadata": {
                                "description": "Required. The value of the secret. NOTE: \"value\" will never be returned from the service, as APIs using this model are is intended for internal use in ARM deployments. Users should use the data-plane REST service for interaction with vault secrets."
                              }
                            },
                            "roleAssignments": {
                              "type": "array",
                              "items": {
                                "$ref": "#/definitions/roleAssignmentType"
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Array of role assignments to create."
                              }
                            }
                          },
                          "variables": {
                            "copy": [
                              {
                                "name": "formattedRoleAssignments",
                                "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]",
                                "input": "[union(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')], createObject('roleDefinitionId', coalesce(tryGet(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName), if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName)))))]"
                              }
                            ],
                            "builtInRoleNames": {
                              "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                              "Key Vault Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '00482a5a-887f-4fb3-b363-3b7fe8e74483')]",
                              "Key Vault Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f25e0fa2-a7c8-4377-a976-54943a77a395')]",
                              "Key Vault Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '21090545-7ca7-4776-b22c-e363652d74d2')]",
                              "Key Vault Secrets Officer": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b86a8fe4-44ce-4948-aee5-eccb2c155cd7')]",
                              "Key Vault Secrets User": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4633458b-17de-408a-b874-0445c86b69e6')]",
                              "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                              "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                              "Role Based Access Control Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
                              "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
                            }
                          },
                          "resources": {
                            "keyVault": {
                              "existing": true,
                              "type": "Microsoft.KeyVault/vaults",
                              "apiVersion": "2024-11-01",
                              "name": "[parameters('keyVaultName')]"
                            },
                            "secret": {
                              "type": "Microsoft.KeyVault/vaults/secrets",
                              "apiVersion": "2024-11-01",
                              "name": "[format('{0}/{1}', parameters('keyVaultName'), parameters('name'))]",
                              "tags": "[parameters('tags')]",
                              "properties": {
                                "contentType": "[parameters('contentType')]",
                                "attributes": {
                                  "enabled": "[parameters('attributesEnabled')]",
                                  "exp": "[parameters('attributesExp')]",
                                  "nbf": "[parameters('attributesNbf')]"
                                },
                                "value": "[parameters('value')]"
                              }
                            },
                            "secret_roleAssignments": {
                              "copy": {
                                "name": "secret_roleAssignments",
                                "count": "[length(coalesce(variables('formattedRoleAssignments'), createArray()))]"
                              },
                              "type": "Microsoft.Authorization/roleAssignments",
                              "apiVersion": "2022-04-01",
                              "scope": "[format('Microsoft.KeyVault/vaults/{0}/secrets/{1}', parameters('keyVaultName'), parameters('name'))]",
                              "name": "[coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'name'), guid(resourceId('Microsoft.KeyVault/vaults/secrets', parameters('keyVaultName'), parameters('name')), coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId, coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId))]",
                              "properties": {
                                "roleDefinitionId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId]",
                                "principalId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId]",
                                "description": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'description')]",
                                "principalType": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'principalType')]",
                                "condition": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition')]",
                                "conditionVersion": "[if(not(empty(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                                "delegatedManagedIdentityResourceId": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                              },
                              "dependsOn": [
                                "secret"
                              ]
                            }
                          },
                          "outputs": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the secret."
                              },
                              "value": "[parameters('name')]"
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource ID of the secret."
                              },
                              "value": "[resourceId('Microsoft.KeyVault/vaults/secrets', parameters('keyVaultName'), parameters('name'))]"
                            },
                            "secretUri": {
                              "type": "string",
                              "metadata": {
                                "description": "The uri of the secret."
                              },
                              "value": "[reference('secret').secretUri]"
                            },
                            "secretUriWithVersion": {
                              "type": "string",
                              "metadata": {
                                "description": "The uri with version of the secret."
                              },
                              "value": "[reference('secret').secretUriWithVersion]"
                            },
                            "resourceGroupName": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the resource group the secret was created in."
                              },
                              "value": "[resourceGroup().name]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "keyVault"
                      ]
                    },
                    "keyVault_keys": {
                      "copy": {
                        "name": "keyVault_keys",
                        "count": "[length(coalesce(parameters('keys'), createArray()))]"
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('{0}-KeyVault-Key-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "name": {
                            "value": "[coalesce(parameters('keys'), createArray())[copyIndex()].name]"
                          },
                          "keyVaultName": {
                            "value": "[parameters('name')]"
                          },
                          "attributesEnabled": {
                            "value": "[tryGet(tryGet(coalesce(parameters('keys'), createArray())[copyIndex()], 'attributes'), 'enabled')]"
                          },
                          "attributesExp": {
                            "value": "[tryGet(tryGet(coalesce(parameters('keys'), createArray())[copyIndex()], 'attributes'), 'exp')]"
                          },
                          "attributesNbf": {
                            "value": "[tryGet(tryGet(coalesce(parameters('keys'), createArray())[copyIndex()], 'attributes'), 'nbf')]"
                          },
                          "curveName": "[if(and(not(equals(tryGet(coalesce(parameters('keys'), createArray())[copyIndex()], 'kty'), 'RSA')), not(equals(tryGet(coalesce(parameters('keys'), createArray())[copyIndex()], 'kty'), 'RSA-HSM'))), createObject('value', coalesce(tryGet(coalesce(parameters('keys'), createArray())[copyIndex()], 'curveName'), 'P-256')), createObject('value', null()))]",
                          "keyOps": {
                            "value": "[tryGet(coalesce(parameters('keys'), createArray())[copyIndex()], 'keyOps')]"
                          },
                          "keySize": "[if(or(equals(tryGet(coalesce(parameters('keys'), createArray())[copyIndex()], 'kty'), 'RSA'), equals(tryGet(coalesce(parameters('keys'), createArray())[copyIndex()], 'kty'), 'RSA-HSM')), createObject('value', coalesce(tryGet(coalesce(parameters('keys'), createArray())[copyIndex()], 'keySize'), 4096)), createObject('value', null()))]",
                          "releasePolicy": {
                            "value": "[coalesce(tryGet(coalesce(parameters('keys'), createArray())[copyIndex()], 'releasePolicy'), createObject())]"
                          },
                          "kty": {
                            "value": "[coalesce(tryGet(coalesce(parameters('keys'), createArray())[copyIndex()], 'kty'), 'EC')]"
                          },
                          "tags": {
                            "value": "[coalesce(tryGet(coalesce(parameters('keys'), createArray())[copyIndex()], 'tags'), parameters('tags'))]"
                          },
                          "roleAssignments": {
                            "value": "[tryGet(coalesce(parameters('keys'), createArray())[copyIndex()], 'roleAssignments')]"
                          },
                          "rotationPolicy": {
                            "value": "[tryGet(coalesce(parameters('keys'), createArray())[copyIndex()], 'rotationPolicy')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "languageVersion": "2.0",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.37.4.10188",
                              "templateHash": "4632549097651981071"
                            },
                            "name": "Key Vault Keys",
                            "description": "This module deploys a Key Vault Key."
                          },
                          "definitions": {
                            "rotationPolicyType": {
                              "type": "object",
                              "properties": {
                                "attributes": {
                                  "type": "object",
                                  "properties": {
                                    "expiryTime": {
                                      "type": "string",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. The expiration time for the new key version. It should be in ISO8601 format. Eg: \"P90D\", \"P1Y\"."
                                      }
                                    }
                                  },
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The attributes of key rotation policy."
                                  }
                                },
                                "lifetimeActions": {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "properties": {
                                      "action": {
                                        "type": "object",
                                        "properties": {
                                          "type": {
                                            "type": "string",
                                            "allowedValues": [
                                              "notify",
                                              "rotate"
                                            ],
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The type of the action."
                                            }
                                          }
                                        },
                                        "nullable": true,
                                        "metadata": {
                                          "description": "Optional. The type of the action."
                                        }
                                      },
                                      "trigger": {
                                        "type": "object",
                                        "properties": {
                                          "timeAfterCreate": {
                                            "type": "string",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The time duration after key creation to rotate the key. It only applies to rotate. It will be in ISO 8601 duration format. Eg: \"P90D\", \"P1Y\"."
                                            }
                                          },
                                          "timeBeforeExpiry": {
                                            "type": "string",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The time duration before key expiring to rotate or notify. It will be in ISO 8601 duration format. Eg: \"P90D\", \"P1Y\"."
                                            }
                                          }
                                        },
                                        "nullable": true,
                                        "metadata": {
                                          "description": "Optional. The time duration for rotating the key."
                                        }
                                      }
                                    }
                                  },
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The key rotation policy lifetime actions."
                                  }
                                }
                              },
                              "metadata": {
                                "__bicep_export!": true,
                                "description": "The type for a rotation policy."
                              }
                            },
                            "roleAssignmentType": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The name (as GUID) of the role assignment. If not provided, a GUID will be generated."
                                  }
                                },
                                "roleDefinitionIdOrName": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                                  }
                                },
                                "principalId": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                                  }
                                },
                                "principalType": {
                                  "type": "string",
                                  "allowedValues": [
                                    "Device",
                                    "ForeignGroup",
                                    "Group",
                                    "ServicePrincipal",
                                    "User"
                                  ],
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The principal type of the assigned principal ID."
                                  }
                                },
                                "description": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The description of the role assignment."
                                  }
                                },
                                "condition": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                                  }
                                },
                                "conditionVersion": {
                                  "type": "string",
                                  "allowedValues": [
                                    "2.0"
                                  ],
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Version of the condition."
                                  }
                                },
                                "delegatedManagedIdentityResourceId": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The Resource Id of the delegated managed identity resource."
                                  }
                                }
                              },
                              "metadata": {
                                "description": "An AVM-aligned type for a role assignment.",
                                "__bicep_imported_from!": {
                                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
                                }
                              }
                            }
                          },
                          "parameters": {
                            "keyVaultName": {
                              "type": "string",
                              "metadata": {
                                "description": "Conditional. The name of the parent key vault. Required if the template is used in a standalone deployment."
                              }
                            },
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The name of the key."
                              }
                            },
                            "tags": {
                              "type": "object",
                              "metadata": {
                                "__bicep_resource_derived_type!": {
                                  "source": "Microsoft.KeyVault/vaults/keys@2024-11-01#properties/tags"
                                },
                                "description": "Optional. Resource tags."
                              },
                              "nullable": true
                            },
                            "attributesEnabled": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Optional. Determines whether the object is enabled."
                              }
                            },
                            "attributesExp": {
                              "type": "int",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Expiry date in seconds since 1970-01-01T00:00:00Z. For security reasons, it is recommended to set an expiration date whenever possible."
                              }
                            },
                            "attributesNbf": {
                              "type": "int",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Not before date in seconds since 1970-01-01T00:00:00Z."
                              }
                            },
                            "curveName": {
                              "type": "string",
                              "defaultValue": "P-256",
                              "allowedValues": [
                                "P-256",
                                "P-256K",
                                "P-384",
                                "P-521"
                              ],
                              "metadata": {
                                "description": "Optional. The elliptic curve name."
                              }
                            },
                            "keyOps": {
                              "type": "array",
                              "items": {
                                "type": "string"
                              },
                              "nullable": true,
                              "allowedValues": [
                                "decrypt",
                                "encrypt",
                                "import",
                                "sign",
                                "unwrapKey",
                                "verify",
                                "wrapKey"
                              ],
                              "metadata": {
                                "description": "Optional. Array of JsonWebKeyOperation."
                              }
                            },
                            "keySize": {
                              "type": "int",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The key size in bits. For example: 2048, 3072, or 4096 for RSA."
                              }
                            },
                            "kty": {
                              "type": "string",
                              "defaultValue": "EC",
                              "allowedValues": [
                                "EC",
                                "EC-HSM",
                                "RSA",
                                "RSA-HSM"
                              ],
                              "metadata": {
                                "description": "Optional. The type of the key."
                              }
                            },
                            "releasePolicy": {
                              "type": "object",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Key release policy."
                              }
                            },
                            "roleAssignments": {
                              "type": "array",
                              "items": {
                                "$ref": "#/definitions/roleAssignmentType"
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Array of role assignments to create."
                              }
                            },
                            "rotationPolicy": {
                              "$ref": "#/definitions/rotationPolicyType",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Key rotation policy properties object."
                              }
                            }
                          },
                          "variables": {
                            "copy": [
                              {
                                "name": "formattedRoleAssignments",
                                "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]",
                                "input": "[union(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')], createObject('roleDefinitionId', coalesce(tryGet(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName), if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName)))))]"
                              }
                            ],
                            "builtInRoleNames": {
                              "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                              "Key Vault Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '00482a5a-887f-4fb3-b363-3b7fe8e74483')]",
                              "Key Vault Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f25e0fa2-a7c8-4377-a976-54943a77a395')]",
                              "Key Vault Crypto Officer": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '14b46e9e-c2b7-41b4-b07b-48a6ebf60603')]",
                              "Key Vault Crypto Service Encryption User": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'e147488a-f6f5-4113-8e2d-b22465e65bf6')]",
                              "Key Vault Crypto User": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '12338af0-0e69-4776-bea7-57ae8d297424')]",
                              "Key Vault Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '21090545-7ca7-4776-b22c-e363652d74d2')]",
                              "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                              "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                              "Role Based Access Control Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
                              "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
                            }
                          },
                          "resources": {
                            "keyVault": {
                              "existing": true,
                              "type": "Microsoft.KeyVault/vaults",
                              "apiVersion": "2024-11-01",
                              "name": "[parameters('keyVaultName')]"
                            },
                            "key": {
                              "type": "Microsoft.KeyVault/vaults/keys",
                              "apiVersion": "2024-11-01",
                              "name": "[format('{0}/{1}', parameters('keyVaultName'), parameters('name'))]",
                              "tags": "[parameters('tags')]",
                              "properties": "[shallowMerge(createArray(createObject('attributes', createObject('enabled', parameters('attributesEnabled'), 'exp', parameters('attributesExp'), 'nbf', parameters('attributesNbf')), 'curveName', parameters('curveName'), 'keyOps', parameters('keyOps'), 'keySize', parameters('keySize'), 'kty', parameters('kty'), 'release_policy', coalesce(parameters('releasePolicy'), createObject())), if(not(empty(parameters('rotationPolicy'))), createObject('rotationPolicy', parameters('rotationPolicy')), createObject())))]"
                            },
                            "key_roleAssignments": {
                              "copy": {
                                "name": "key_roleAssignments",
                                "count": "[length(coalesce(variables('formattedRoleAssignments'), createArray()))]"
                              },
                              "type": "Microsoft.Authorization/roleAssignments",
                              "apiVersion": "2022-04-01",
                              "scope": "[format('Microsoft.KeyVault/vaults/{0}/keys/{1}', parameters('keyVaultName'), parameters('name'))]",
                              "name": "[coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'name'), guid(resourceId('Microsoft.KeyVault/vaults/keys', parameters('keyVaultName'), parameters('name')), coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId, coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId))]",
                              "properties": {
                                "roleDefinitionId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId]",
                                "principalId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId]",
                                "description": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'description')]",
                                "principalType": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'principalType')]",
                                "condition": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition')]",
                                "conditionVersion": "[if(not(empty(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                                "delegatedManagedIdentityResourceId": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                              },
                              "dependsOn": [
                                "key"
                              ]
                            }
                          },
                          "outputs": {
                            "keyUri": {
                              "type": "string",
                              "metadata": {
                                "description": "The uri of the key."
                              },
                              "value": "[reference('key').keyUri]"
                            },
                            "keyUriWithVersion": {
                              "type": "string",
                              "metadata": {
                                "description": "The uri with version of the key."
                              },
                              "value": "[reference('key').keyUriWithVersion]"
                            },
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the key."
                              },
                              "value": "[parameters('name')]"
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource ID of the key."
                              },
                              "value": "[resourceId('Microsoft.KeyVault/vaults/keys', parameters('keyVaultName'), parameters('name'))]"
                            },
                            "resourceGroupName": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the resource group the key was created in."
                              },
                              "value": "[resourceGroup().name]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "keyVault"
                      ]
                    },
                    "keyVault_privateEndpoints": {
                      "copy": {
                        "name": "keyVault_privateEndpoints",
                        "count": "[length(coalesce(parameters('privateEndpoints'), createArray()))]"
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('{0}-keyVault-PrivateEndpoint-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                      "subscriptionId": "[split(coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'resourceGroupResourceId'), resourceGroup().id), '/')[2]]",
                      "resourceGroup": "[split(coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'resourceGroupResourceId'), resourceGroup().id), '/')[4]]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "name": {
                            "value": "[coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'name'), format('pep-{0}-{1}-{2}', last(split(resourceId('Microsoft.KeyVault/vaults', parameters('name')), '/')), coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'service'), 'vault'), copyIndex()))]"
                          },
                          "privateLinkServiceConnections": "[if(not(equals(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'isManualConnection'), true())), createObject('value', createArray(createObject('name', coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'privateLinkServiceConnectionName'), format('{0}-{1}-{2}', last(split(resourceId('Microsoft.KeyVault/vaults', parameters('name')), '/')), coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'service'), 'vault'), copyIndex())), 'properties', createObject('privateLinkServiceId', resourceId('Microsoft.KeyVault/vaults', parameters('name')), 'groupIds', createArray(coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'service'), 'vault')))))), createObject('value', null()))]",
                          "manualPrivateLinkServiceConnections": "[if(equals(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'isManualConnection'), true()), createObject('value', createArray(createObject('name', coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'privateLinkServiceConnectionName'), format('{0}-{1}-{2}', last(split(resourceId('Microsoft.KeyVault/vaults', parameters('name')), '/')), coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'service'), 'vault'), copyIndex())), 'properties', createObject('privateLinkServiceId', resourceId('Microsoft.KeyVault/vaults', parameters('name')), 'groupIds', createArray(coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'service'), 'vault')), 'requestMessage', coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'manualConnectionRequestMessage'), 'Manual approval required.'))))), createObject('value', null()))]",
                          "subnetResourceId": {
                            "value": "[coalesce(parameters('privateEndpoints'), createArray())[copyIndex()].subnetResourceId]"
                          },
                          "enableTelemetry": {
                            "value": "[variables('enableReferencedModulesTelemetry')]"
                          },
                          "location": {
                            "value": "[coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'location'), reference(split(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()].subnetResourceId, '/subnets/')[0], '2020-06-01', 'Full').location)]"
                          },
                          "lock": {
                            "value": "[coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'lock'), parameters('lock'))]"
                          },
                          "privateDnsZoneGroup": {
                            "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'privateDnsZoneGroup')]"
                          },
                          "roleAssignments": {
                            "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'roleAssignments')]"
                          },
                          "tags": {
                            "value": "[coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'tags'), parameters('tags'))]"
                          },
                          "customDnsConfigs": {
                            "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'customDnsConfigs')]"
                          },
                          "ipConfigurations": {
                            "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'ipConfigurations')]"
                          },
                          "applicationSecurityGroupResourceIds": {
                            "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'applicationSecurityGroupResourceIds')]"
                          },
                          "customNetworkInterfaceName": {
                            "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'customNetworkInterfaceName')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "languageVersion": "2.0",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.34.44.8038",
                              "templateHash": "12389807800450456797"
                            },
                            "name": "Private Endpoints",
                            "description": "This module deploys a Private Endpoint."
                          },
                          "definitions": {
                            "privateDnsZoneGroupType": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The name of the Private DNS Zone Group."
                                  }
                                },
                                "privateDnsZoneGroupConfigs": {
                                  "type": "array",
                                  "items": {
                                    "$ref": "#/definitions/privateDnsZoneGroupConfigType"
                                  },
                                  "metadata": {
                                    "description": "Required. The private DNS zone groups to associate the private endpoint. A DNS zone group can support up to 5 DNS zones."
                                  }
                                }
                              },
                              "metadata": {
                                "__bicep_export!": true
                              }
                            },
                            "ipConfigurationType": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. The name of the resource that is unique within a resource group."
                                  }
                                },
                                "properties": {
                                  "type": "object",
                                  "properties": {
                                    "groupId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The ID of a group obtained from the remote resource that this private endpoint should connect to. If used with private link service connection, this property must be defined as empty string."
                                      }
                                    },
                                    "memberName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The member name of a group obtained from the remote resource that this private endpoint should connect to. If used with private link service connection, this property must be defined as empty string."
                                      }
                                    },
                                    "privateIPAddress": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. A private IP address obtained from the private endpoint's subnet."
                                      }
                                    }
                                  },
                                  "metadata": {
                                    "description": "Required. Properties of private endpoint IP configurations."
                                  }
                                }
                              },
                              "metadata": {
                                "__bicep_export!": true
                              }
                            },
                            "privateLinkServiceConnectionType": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. The name of the private link service connection."
                                  }
                                },
                                "properties": {
                                  "type": "object",
                                  "properties": {
                                    "groupIds": {
                                      "type": "array",
                                      "items": {
                                        "type": "string"
                                      },
                                      "metadata": {
                                        "description": "Required. The ID of a group obtained from the remote resource that this private endpoint should connect to. If used with private link service connection, this property must be defined as empty string array `[]`."
                                      }
                                    },
                                    "privateLinkServiceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The resource id of private link service."
                                      }
                                    },
                                    "requestMessage": {
                                      "type": "string",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. A message passed to the owner of the remote resource with this connection request. Restricted to 140 chars."
                                      }
                                    }
                                  },
                                  "metadata": {
                                    "description": "Required. Properties of private link service connection."
                                  }
                                }
                              },
                              "metadata": {
                                "__bicep_export!": true
                              }
                            },
                            "customDnsConfigType": {
                              "type": "object",
                              "properties": {
                                "fqdn": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. FQDN that resolves to private endpoint IP address."
                                  }
                                },
                                "ipAddresses": {
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  },
                                  "metadata": {
                                    "description": "Required. A list of private IP addresses of the private endpoint."
                                  }
                                }
                              },
                              "metadata": {
                                "__bicep_export!": true
                              }
                            },
                            "lockType": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Specify the name of lock."
                                  }
                                },
                                "kind": {
                                  "type": "string",
                                  "allowedValues": [
                                    "CanNotDelete",
                                    "None",
                                    "ReadOnly"
                                  ],
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Specify the type of lock."
                                  }
                                }
                              },
                              "metadata": {
                                "description": "An AVM-aligned type for a lock.",
                                "__bicep_imported_from!": {
                                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
                                }
                              }
                            },
                            "privateDnsZoneGroupConfigType": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The name of the private DNS zone group config."
                                  }
                                },
                                "privateDnsZoneResourceId": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. The resource id of the private DNS zone."
                                  }
                                }
                              },
                              "metadata": {
                                "__bicep_imported_from!": {
                                  "sourceTemplate": "private-dns-zone-group/main.bicep"
                                }
                              }
                            },
                            "roleAssignmentType": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The name (as GUID) of the role assignment. If not provided, a GUID will be generated."
                                  }
                                },
                                "roleDefinitionIdOrName": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                                  }
                                },
                                "principalId": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                                  }
                                },
                                "principalType": {
                                  "type": "string",
                                  "allowedValues": [
                                    "Device",
                                    "ForeignGroup",
                                    "Group",
                                    "ServicePrincipal",
                                    "User"
                                  ],
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The principal type of the assigned principal ID."
                                  }
                                },
                                "description": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The description of the role assignment."
                                  }
                                },
                                "condition": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                                  }
                                },
                                "conditionVersion": {
                                  "type": "string",
                                  "allowedValues": [
                                    "2.0"
                                  ],
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Version of the condition."
                                  }
                                },
                                "delegatedManagedIdentityResourceId": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The Resource Id of the delegated managed identity resource."
                                  }
                                }
                              },
                              "metadata": {
                                "description": "An AVM-aligned type for a role assignment.",
                                "__bicep_imported_from!": {
                                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
                                }
                              }
                            }
                          },
                          "parameters": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. Name of the private endpoint resource to create."
                              }
                            },
                            "subnetResourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. Resource ID of the subnet where the endpoint needs to be created."
                              }
                            },
                            "applicationSecurityGroupResourceIds": {
                              "type": "array",
                              "items": {
                                "type": "string"
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Application security groups in which the private endpoint IP configuration is included."
                              }
                            },
                            "customNetworkInterfaceName": {
                              "type": "string",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The custom name of the network interface attached to the private endpoint."
                              }
                            },
                            "ipConfigurations": {
                              "type": "array",
                              "items": {
                                "$ref": "#/definitions/ipConfigurationType"
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. A list of IP configurations of the private endpoint. This will be used to map to the First Party Service endpoints."
                              }
                            },
                            "privateDnsZoneGroup": {
                              "$ref": "#/definitions/privateDnsZoneGroupType",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The private DNS zone group to configure for the private endpoint."
                              }
                            },
                            "location": {
                              "type": "string",
                              "defaultValue": "[resourceGroup().location]",
                              "metadata": {
                                "description": "Optional. Location for all Resources."
                              }
                            },
                            "lock": {
                              "$ref": "#/definitions/lockType",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The lock settings of the service."
                              }
                            },
                            "roleAssignments": {
                              "type": "array",
                              "items": {
                                "$ref": "#/definitions/roleAssignmentType"
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Array of role assignments to create."
                              }
                            },
                            "tags": {
                              "type": "object",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Tags to be applied on all resources/resource groups in this deployment."
                              }
                            },
                            "customDnsConfigs": {
                              "type": "array",
                              "items": {
                                "$ref": "#/definitions/customDnsConfigType"
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Custom DNS configurations."
                              }
                            },
                            "manualPrivateLinkServiceConnections": {
                              "type": "array",
                              "items": {
                                "$ref": "#/definitions/privateLinkServiceConnectionType"
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Conditional. A grouping of information about the connection to the remote resource. Used when the network admin does not have access to approve connections to the remote resource. Required if `privateLinkServiceConnections` is empty."
                              }
                            },
                            "privateLinkServiceConnections": {
                              "type": "array",
                              "items": {
                                "$ref": "#/definitions/privateLinkServiceConnectionType"
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Conditional. A grouping of information about the connection to the remote resource. Required if `manualPrivateLinkServiceConnections` is empty."
                              }
                            },
                            "enableTelemetry": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Optional. Enable/Disable usage telemetry for module."
                              }
                            }
                          },
                          "variables": {
                            "copy": [
                              {
                                "name": "formattedRoleAssignments",
                                "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]",
                                "input": "[union(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')], createObject('roleDefinitionId', coalesce(tryGet(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName), if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName)))))]"
                              }
                            ],
                            "builtInRoleNames": {
                              "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                              "DNS Resolver Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '0f2ebee7-ffd4-4fc0-b3b7-664099fdad5d')]",
                              "DNS Zone Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'befefa01-2a29-4197-83a8-272ff33ce314')]",
                              "Domain Services Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'eeaeda52-9324-47f6-8069-5d5bade478b2')]",
                              "Domain Services Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '361898ef-9ed1-48c2-849c-a832951106bb')]",
                              "Network Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4d97b98b-1d4f-4787-a291-c67834d212e7')]",
                              "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                              "Private DNS Zone Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b12aa53e-6015-4669-85d0-8515ebb3ae7f')]",
                              "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                              "Role Based Access Control Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]"
                            }
                          },
                          "resources": {
                            "avmTelemetry": {
                              "condition": "[parameters('enableTelemetry')]",
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2024-03-01",
                              "name": "[format('46d3xbcp.res.network-privateendpoint.{0}.{1}', replace('0.11.0', '.', '-'), substring(uniqueString(deployment().name, parameters('location')), 0, 4))]",
                              "properties": {
                                "mode": "Incremental",
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "resources": [],
                                  "outputs": {
                                    "telemetry": {
                                      "type": "String",
                                      "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                                    }
                                  }
                                }
                              }
                            },
                            "privateEndpoint": {
                              "type": "Microsoft.Network/privateEndpoints",
                              "apiVersion": "2024-05-01",
                              "name": "[parameters('name')]",
                              "location": "[parameters('location')]",
                              "tags": "[parameters('tags')]",
                              "properties": {
                                "copy": [
                                  {
                                    "name": "applicationSecurityGroups",
                                    "count": "[length(coalesce(parameters('applicationSecurityGroupResourceIds'), createArray()))]",
                                    "input": {
                                      "id": "[coalesce(parameters('applicationSecurityGroupResourceIds'), createArray())[copyIndex('applicationSecurityGroups')]]"
                                    }
                                  }
                                ],
                                "customDnsConfigs": "[coalesce(parameters('customDnsConfigs'), createArray())]",
                                "customNetworkInterfaceName": "[coalesce(parameters('customNetworkInterfaceName'), '')]",
                                "ipConfigurations": "[coalesce(parameters('ipConfigurations'), createArray())]",
                                "manualPrivateLinkServiceConnections": "[coalesce(parameters('manualPrivateLinkServiceConnections'), createArray())]",
                                "privateLinkServiceConnections": "[coalesce(parameters('privateLinkServiceConnections'), createArray())]",
                                "subnet": {
                                  "id": "[parameters('subnetResourceId')]"
                                }
                              }
                            },
                            "privateEndpoint_lock": {
                              "condition": "[and(not(empty(coalesce(parameters('lock'), createObject()))), not(equals(tryGet(parameters('lock'), 'kind'), 'None')))]",
                              "type": "Microsoft.Authorization/locks",
                              "apiVersion": "2020-05-01",
                              "scope": "[format('Microsoft.Network/privateEndpoints/{0}', parameters('name'))]",
                              "name": "[coalesce(tryGet(parameters('lock'), 'name'), format('lock-{0}', parameters('name')))]",
                              "properties": {
                                "level": "[coalesce(tryGet(parameters('lock'), 'kind'), '')]",
                                "notes": "[if(equals(tryGet(parameters('lock'), 'kind'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot delete or modify the resource or child resources.')]"
                              },
                              "dependsOn": [
                                "privateEndpoint"
                              ]
                            },
                            "privateEndpoint_roleAssignments": {
                              "copy": {
                                "name": "privateEndpoint_roleAssignments",
                                "count": "[length(coalesce(variables('formattedRoleAssignments'), createArray()))]"
                              },
                              "type": "Microsoft.Authorization/roleAssignments",
                              "apiVersion": "2022-04-01",
                              "scope": "[format('Microsoft.Network/privateEndpoints/{0}', parameters('name'))]",
                              "name": "[coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'name'), guid(resourceId('Microsoft.Network/privateEndpoints', parameters('name')), coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId, coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId))]",
                              "properties": {
                                "roleDefinitionId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId]",
                                "principalId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId]",
                                "description": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'description')]",
                                "principalType": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'principalType')]",
                                "condition": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition')]",
                                "conditionVersion": "[if(not(empty(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                                "delegatedManagedIdentityResourceId": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                              },
                              "dependsOn": [
                                "privateEndpoint"
                              ]
                            },
                            "privateEndpoint_privateDnsZoneGroup": {
                              "condition": "[not(empty(parameters('privateDnsZoneGroup')))]",
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('{0}-PrivateEndpoint-PrivateDnsZoneGroup', uniqueString(deployment().name))]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "name": {
                                    "value": "[tryGet(parameters('privateDnsZoneGroup'), 'name')]"
                                  },
                                  "privateEndpointName": {
                                    "value": "[parameters('name')]"
                                  },
                                  "privateDnsZoneConfigs": {
                                    "value": "[parameters('privateDnsZoneGroup').privateDnsZoneGroupConfigs]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "languageVersion": "2.0",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.34.44.8038",
                                      "templateHash": "13997305779829540948"
                                    },
                                    "name": "Private Endpoint Private DNS Zone Groups",
                                    "description": "This module deploys a Private Endpoint Private DNS Zone Group."
                                  },
                                  "definitions": {
                                    "privateDnsZoneGroupConfigType": {
                                      "type": "object",
                                      "properties": {
                                        "name": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The name of the private DNS zone group config."
                                          }
                                        },
                                        "privateDnsZoneResourceId": {
                                          "type": "string",
                                          "metadata": {
                                            "description": "Required. The resource id of the private DNS zone."
                                          }
                                        }
                                      },
                                      "metadata": {
                                        "__bicep_export!": true
                                      }
                                    }
                                  },
                                  "parameters": {
                                    "privateEndpointName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Conditional. The name of the parent private endpoint. Required if the template is used in a standalone deployment."
                                      }
                                    },
                                    "privateDnsZoneConfigs": {
                                      "type": "array",
                                      "items": {
                                        "$ref": "#/definitions/privateDnsZoneGroupConfigType"
                                      },
                                      "minLength": 1,
                                      "maxLength": 5,
                                      "metadata": {
                                        "description": "Required. Array of private DNS zone configurations of the private DNS zone group. A DNS zone group can support up to 5 DNS zones."
                                      }
                                    },
                                    "name": {
                                      "type": "string",
                                      "defaultValue": "default",
                                      "metadata": {
                                        "description": "Optional. The name of the private DNS zone group."
                                      }
                                    }
                                  },
                                  "variables": {
                                    "copy": [
                                      {
                                        "name": "privateDnsZoneConfigsVar",
                                        "count": "[length(parameters('privateDnsZoneConfigs'))]",
                                        "input": {
                                          "name": "[coalesce(tryGet(parameters('privateDnsZoneConfigs')[copyIndex('privateDnsZoneConfigsVar')], 'name'), last(split(parameters('privateDnsZoneConfigs')[copyIndex('privateDnsZoneConfigsVar')].privateDnsZoneResourceId, '/')))]",
                                          "properties": {
                                            "privateDnsZoneId": "[parameters('privateDnsZoneConfigs')[copyIndex('privateDnsZoneConfigsVar')].privateDnsZoneResourceId]"
                                          }
                                        }
                                      }
                                    ]
                                  },
                                  "resources": {
                                    "privateEndpoint": {
                                      "existing": true,
                                      "type": "Microsoft.Network/privateEndpoints",
                                      "apiVersion": "2024-05-01",
                                      "name": "[parameters('privateEndpointName')]"
                                    },
                                    "privateDnsZoneGroup": {
                                      "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
                                      "apiVersion": "2024-05-01",
                                      "name": "[format('{0}/{1}', parameters('privateEndpointName'), parameters('name'))]",
                                      "properties": {
                                        "privateDnsZoneConfigs": "[variables('privateDnsZoneConfigsVar')]"
                                      }
                                    }
                                  },
                                  "outputs": {
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the private endpoint DNS zone group."
                                      },
                                      "value": "[parameters('name')]"
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource ID of the private endpoint DNS zone group."
                                      },
                                      "value": "[resourceId('Microsoft.Network/privateEndpoints/privateDnsZoneGroups', parameters('privateEndpointName'), parameters('name'))]"
                                    },
                                    "resourceGroupName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource group the private endpoint DNS zone group was deployed into."
                                      },
                                      "value": "[resourceGroup().name]"
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "privateEndpoint"
                              ]
                            }
                          },
                          "outputs": {
                            "resourceGroupName": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource group the private endpoint was deployed into."
                              },
                              "value": "[resourceGroup().name]"
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource ID of the private endpoint."
                              },
                              "value": "[resourceId('Microsoft.Network/privateEndpoints', parameters('name'))]"
                            },
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the private endpoint."
                              },
                              "value": "[parameters('name')]"
                            },
                            "location": {
                              "type": "string",
                              "metadata": {
                                "description": "The location the resource was deployed into."
                              },
                              "value": "[reference('privateEndpoint', '2024-05-01', 'full').location]"
                            },
                            "customDnsConfigs": {
                              "type": "array",
                              "items": {
                                "$ref": "#/definitions/customDnsConfigType"
                              },
                              "metadata": {
                                "description": "The custom DNS configurations of the private endpoint."
                              },
                              "value": "[reference('privateEndpoint').customDnsConfigs]"
                            },
                            "networkInterfaceResourceIds": {
                              "type": "array",
                              "items": {
                                "type": "string"
                              },
                              "metadata": {
                                "description": "The resource IDs of the network interfaces associated with the private endpoint."
                              },
                              "value": "[map(reference('privateEndpoint').networkInterfaces, lambda('nic', lambdaVariables('nic').id))]"
                            },
                            "groupId": {
                              "type": "string",
                              "nullable": true,
                              "metadata": {
                                "description": "The group Id for the private endpoint Group."
                              },
                              "value": "[coalesce(tryGet(tryGet(tryGet(tryGet(reference('privateEndpoint'), 'manualPrivateLinkServiceConnections'), 0, 'properties'), 'groupIds'), 0), tryGet(tryGet(tryGet(tryGet(reference('privateEndpoint'), 'privateLinkServiceConnections'), 0, 'properties'), 'groupIds'), 0))]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "keyVault"
                      ]
                    }
                  },
                  "outputs": {
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the key vault."
                      },
                      "value": "[resourceId('Microsoft.KeyVault/vaults', parameters('name'))]"
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the resource group the key vault was created in."
                      },
                      "value": "[resourceGroup().name]"
                    },
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the key vault."
                      },
                      "value": "[parameters('name')]"
                    },
                    "uri": {
                      "type": "string",
                      "metadata": {
                        "description": "The URI of the key vault."
                      },
                      "value": "[reference('keyVault').vaultUri]"
                    },
                    "location": {
                      "type": "string",
                      "metadata": {
                        "description": "The location the resource was deployed into."
                      },
                      "value": "[reference('keyVault', '2024-11-01', 'full').location]"
                    },
                    "privateEndpoints": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/privateEndpointOutputType"
                      },
                      "metadata": {
                        "description": "The private endpoints of the key vault."
                      },
                      "copy": {
                        "count": "[length(coalesce(parameters('privateEndpoints'), createArray()))]",
                        "input": {
                          "name": "[reference(format('keyVault_privateEndpoints[{0}]', copyIndex())).outputs.name.value]",
                          "resourceId": "[reference(format('keyVault_privateEndpoints[{0}]', copyIndex())).outputs.resourceId.value]",
                          "groupId": "[tryGet(tryGet(reference(format('keyVault_privateEndpoints[{0}]', copyIndex())).outputs, 'groupId'), 'value')]",
                          "customDnsConfigs": "[reference(format('keyVault_privateEndpoints[{0}]', copyIndex())).outputs.customDnsConfigs.value]",
                          "networkInterfaceResourceIds": "[reference(format('keyVault_privateEndpoints[{0}]', copyIndex())).outputs.networkInterfaceResourceIds.value]"
                        }
                      }
                    },
                    "secrets": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/credentialOutputType"
                      },
                      "metadata": {
                        "description": "The properties of the created secrets."
                      },
                      "copy": {
                        "count": "[length(range(0, length(coalesce(parameters('secrets'), createArray()))))]",
                        "input": {
                          "resourceId": "[reference(format('keyVault_secrets[{0}]', range(0, length(coalesce(parameters('secrets'), createArray())))[copyIndex()])).outputs.resourceId.value]",
                          "uri": "[reference(format('keyVault_secrets[{0}]', range(0, length(coalesce(parameters('secrets'), createArray())))[copyIndex()])).outputs.secretUri.value]",
                          "uriWithVersion": "[reference(format('keyVault_secrets[{0}]', range(0, length(coalesce(parameters('secrets'), createArray())))[copyIndex()])).outputs.secretUriWithVersion.value]"
                        }
                      }
                    },
                    "keys": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/credentialOutputType"
                      },
                      "metadata": {
                        "description": "The properties of the created keys."
                      },
                      "copy": {
                        "count": "[length(range(0, length(coalesce(parameters('keys'), createArray()))))]",
                        "input": {
                          "resourceId": "[reference(format('keyVault_keys[{0}]', range(0, length(coalesce(parameters('keys'), createArray())))[copyIndex()])).outputs.resourceId.value]",
                          "uri": "[reference(format('keyVault_keys[{0}]', range(0, length(coalesce(parameters('keys'), createArray())))[copyIndex()])).outputs.keyUri.value]",
                          "uriWithVersion": "[reference(format('keyVault_keys[{0}]', range(0, length(coalesce(parameters('keys'), createArray())))[copyIndex()])).outputs.keyUriWithVersion.value]"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "outputs": {
            "name": {
              "type": "string",
              "metadata": {
                "description": "Name of the Key Vault."
              },
              "value": "[if(empty(parameters('existingResourceId')), reference('keyVault').outputs.name.value, variables('existingName'))]"
            },
            "resourceId": {
              "type": "string",
              "metadata": {
                "description": "Resource ID of the Key Vault."
              },
              "value": "[if(empty(parameters('existingResourceId')), reference('keyVault').outputs.resourceId.value, extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('existingSubscriptionId'), variables('existingResourceGroupName')), 'Microsoft.KeyVault/vaults', variables('existingName')))]"
            },
            "subscriptionId": {
              "type": "string",
              "metadata": {
                "description": "Subscription ID of the Key Vault."
              },
              "value": "[if(empty(parameters('existingResourceId')), subscription().subscriptionId, variables('existingSubscriptionId'))]"
            },
            "resourceGroupName": {
              "type": "string",
              "metadata": {
                "description": "Resource Group Name of the Key Vault."
              },
              "value": "[if(empty(parameters('existingResourceId')), resourceGroup().name, variables('existingResourceGroupName'))]"
            }
          }
        }
      }
    },
    "aiSearch": {
      "condition": "[parameters('includeAssociatedResources')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[take(format('module.aiSearch.{0}', variables('resourcesName')), 64)]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "existingResourceId": {
            "value": "[tryGet(parameters('aiSearchConfiguration'), 'existingResourceId')]"
          },
          "name": {
            "value": "[take(if(not(empty(tryGet(parameters('aiSearchConfiguration'), 'name'))), parameters('aiSearchConfiguration').name, format('srch{0}', variables('resourcesName'))), 60)]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "tags": {
            "value": "[parameters('tags')]"
          },
          "enableTelemetry": {
            "value": "[parameters('enableTelemetry')]"
          },
          "privateEndpointSubnetResourceId": {
            "value": "[parameters('privateEndpointSubnetResourceId')]"
          },
          "privateDnsZoneResourceId": {
            "value": "[tryGet(parameters('aiSearchConfiguration'), 'privateDnsZoneResourceId')]"
          },
          "roleAssignments": {
            "value": "[tryGet(parameters('aiSearchConfiguration'), 'roleAssignments')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "languageVersion": "2.0",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "6380830102881120586"
            }
          },
          "definitions": {
            "roleAssignmentType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The name (as GUID) of the role assignment. If not provided, a GUID will be generated."
                  }
                },
                "roleDefinitionIdOrName": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                  }
                },
                "principalId": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                  }
                },
                "principalType": {
                  "type": "string",
                  "allowedValues": [
                    "Device",
                    "ForeignGroup",
                    "Group",
                    "ServicePrincipal",
                    "User"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The principal type of the assigned principal ID."
                  }
                },
                "description": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The description of the role assignment."
                  }
                },
                "condition": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                  }
                },
                "conditionVersion": {
                  "type": "string",
                  "allowedValues": [
                    "2.0"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Version of the condition."
                  }
                },
                "delegatedManagedIdentityResourceId": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The Resource Id of the delegated managed identity resource."
                  }
                }
              },
              "metadata": {
                "description": "An AVM-aligned type for a role assignment.",
                "__bicep_imported_from!": {
                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.6.0"
                }
              }
            }
          },
          "functions": [
            {
              "namespace": "__bicep",
              "members": {
                "getResourceGroupName": {
                  "parameters": [
                    {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "name": "parts"
                    }
                  ],
                  "output": {
                    "type": "string",
                    "value": "[if(greater(length(parameters('parts')), 4), parameters('parts')[4], resourceGroup().name)]"
                  },
                  "metadata": {
                    "description": "Extracts the Resource Group Name from a Resource ID.",
                    "__bicep_imported_from!": {
                      "sourceTemplate": "parseResourceIdFunctions.bicep"
                    }
                  }
                },
                "getResourceName": {
                  "parameters": [
                    {
                      "type": "string",
                      "nullable": true,
                      "name": "resourceId"
                    },
                    {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "name": "parts"
                    }
                  ],
                  "output": {
                    "type": "string",
                    "value": "[if(and(and(not(empty(parameters('resourceId'))), contains(parameters('resourceId'), '/')), not(empty(parameters('parts')))), last(parameters('parts')), coalesce(parameters('resourceId'), ''))]"
                  },
                  "metadata": {
                    "description": "Extracts the Resource Name from a Resource ID.",
                    "__bicep_imported_from!": {
                      "sourceTemplate": "parseResourceIdFunctions.bicep"
                    }
                  }
                },
                "getResourceParts": {
                  "parameters": [
                    {
                      "type": "string",
                      "nullable": true,
                      "name": "resourceId"
                    }
                  ],
                  "output": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "value": "[split(coalesce(parameters('resourceId'), ''), '/')]"
                  },
                  "metadata": {
                    "description": "Splits Resource ID into its components.",
                    "__bicep_imported_from!": {
                      "sourceTemplate": "parseResourceIdFunctions.bicep"
                    }
                  }
                },
                "getSubscriptionId": {
                  "parameters": [
                    {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "name": "parts"
                    }
                  ],
                  "output": {
                    "type": "string",
                    "value": "[if(greater(length(parameters('parts')), 2), parameters('parts')[2], subscription().subscriptionId)]"
                  },
                  "metadata": {
                    "description": "Extracts the Subscription ID from a Resource ID.",
                    "__bicep_imported_from!": {
                      "sourceTemplate": "parseResourceIdFunctions.bicep"
                    }
                  }
                }
              }
            }
          ],
          "parameters": {
            "name": {
              "type": "string",
              "maxLength": 60,
              "metadata": {
                "description": "Required. The name of the AI Search resource."
              }
            },
            "location": {
              "type": "string",
              "metadata": {
                "description": "Required. The location for the AI Search resource."
              }
            },
            "existingResourceId": {
              "type": "string",
              "nullable": true,
              "metadata": {
                "description": "Optional. The full resource ID of an existing AI Search resource to use instead of creating a new one."
              }
            },
            "privateEndpointSubnetResourceId": {
              "type": "string",
              "nullable": true,
              "metadata": {
                "description": "Optional. Resource Id of an existing subnet to use for private connectivity. This is required along with 'privateDnsZoneResourceId' to establish private endpoints."
              }
            },
            "privateDnsZoneResourceId": {
              "type": "string",
              "nullable": true,
              "metadata": {
                "description": "Optional. The resource ID of the private DNS zone for the AI Search resource to establish private endpoints."
              }
            },
            "roleAssignments": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/roleAssignmentType"
              },
              "nullable": true,
              "metadata": {
                "description": "Optional. Specifies the role assignments for the AI Search resource."
              }
            },
            "enableTelemetry": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Optional. Enable/Disable usage telemetry for module."
              }
            },
            "tags": {
              "type": "object",
              "metadata": {
                "__bicep_resource_derived_type!": {
                  "source": "Microsoft.Resources/resourceGroups@2025-04-01#properties/tags"
                },
                "description": "Optional. Specifies the resource tags for all the resources."
              },
              "defaultValue": {}
            }
          },
          "variables": {
            "existingResourceParts": "[__bicep.getResourceParts(parameters('existingResourceId'))]",
            "existingName": "[__bicep.getResourceName(parameters('existingResourceId'), variables('existingResourceParts'))]",
            "existingSubscriptionId": "[__bicep.getSubscriptionId(variables('existingResourceParts'))]",
            "existingResourceGroupName": "[__bicep.getResourceGroupName(variables('existingResourceParts'))]",
            "privateNetworkingEnabled": "[and(not(empty(parameters('privateDnsZoneResourceId'))), not(empty(parameters('privateEndpointSubnetResourceId'))))]"
          },
          "resources": {
            "existingSearchService": {
              "condition": "[not(empty(parameters('existingResourceId')))]",
              "existing": true,
              "type": "Microsoft.Search/searchServices",
              "apiVersion": "2025-05-01",
              "subscriptionId": "[variables('existingSubscriptionId')]",
              "resourceGroup": "[variables('existingResourceGroupName')]",
              "name": "[variables('existingName')]"
            },
            "aiSearch": {
              "condition": "[empty(parameters('existingResourceId'))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[take(format('avm.res.search.search-service.{0}', parameters('name')), 64)]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "[parameters('name')]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "enableTelemetry": {
                    "value": "[parameters('enableTelemetry')]"
                  },
                  "cmkEnforcement": {
                    "value": "Unspecified"
                  },
                  "managedIdentities": {
                    "value": {
                      "systemAssigned": true
                    }
                  },
                  "publicNetworkAccess": "[if(variables('privateNetworkingEnabled'), createObject('value', 'Disabled'), createObject('value', 'Enabled'))]",
                  "disableLocalAuth": {
                    "value": "[variables('privateNetworkingEnabled')]"
                  },
                  "authOptions": "[if(variables('privateNetworkingEnabled'), createObject('value', null()), createObject('value', createObject('aadOrApiKey', createObject('aadAuthFailureMode', 'http401WithBearerChallenge'))))]",
                  "sku": {
                    "value": "standard"
                  },
                  "partitionCount": {
                    "value": 1
                  },
                  "replicaCount": {
                    "value": 3
                  },
                  "roleAssignments": {
                    "value": "[parameters('roleAssignments')]"
                  },
                  "privateEndpoints": "[if(variables('privateNetworkingEnabled'), createObject('value', createArray(createObject('privateDnsZoneGroup', createObject('privateDnsZoneGroupConfigs', createArray(createObject('privateDnsZoneResourceId', parameters('privateDnsZoneResourceId')))), 'subnetResourceId', parameters('privateEndpointSubnetResourceId')))), createObject('value', createArray()))]",
                  "tags": {
                    "value": "[parameters('tags')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "languageVersion": "2.0",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.36.1.42791",
                      "templateHash": "7755499748127638943"
                    },
                    "name": "Search Services",
                    "description": "This module deploys a Search Service."
                  },
                  "definitions": {
                    "privateEndpointOutputType": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "metadata": {
                            "description": "The name of the private endpoint."
                          }
                        },
                        "resourceId": {
                          "type": "string",
                          "metadata": {
                            "description": "The resource ID of the private endpoint."
                          }
                        },
                        "groupId": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "The group Id for the private endpoint Group."
                          }
                        },
                        "customDnsConfigs": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "fqdn": {
                                "type": "string",
                                "nullable": true,
                                "metadata": {
                                  "description": "FQDN that resolves to private endpoint IP address."
                                }
                              },
                              "ipAddresses": {
                                "type": "array",
                                "items": {
                                  "type": "string"
                                },
                                "metadata": {
                                  "description": "A list of private IP addresses of the private endpoint."
                                }
                              }
                            }
                          },
                          "metadata": {
                            "description": "The custom DNS configurations of the private endpoint."
                          }
                        },
                        "networkInterfaceResourceIds": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "metadata": {
                            "description": "The IDs of the network interfaces associated with the private endpoint."
                          }
                        }
                      },
                      "metadata": {
                        "__bicep_export!": true
                      }
                    },
                    "secretsExportConfigurationType": {
                      "type": "object",
                      "properties": {
                        "keyVaultResourceId": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The key vault name where to store the API Admin keys generated by the modules."
                          }
                        },
                        "primaryAdminKeyName": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The primaryAdminKey secret name to create."
                          }
                        },
                        "secondaryAdminKeyName": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The secondaryAdminKey secret name to create."
                          }
                        }
                      }
                    },
                    "secretsOutputType": {
                      "type": "object",
                      "properties": {},
                      "additionalProperties": {
                        "$ref": "#/definitions/secretSetType",
                        "metadata": {
                          "description": "An exported secret's references."
                        }
                      }
                    },
                    "authOptionsType": {
                      "type": "object",
                      "properties": {
                        "aadOrApiKey": {
                          "type": "object",
                          "properties": {
                            "aadAuthFailureMode": {
                              "type": "string",
                              "allowedValues": [
                                "http401WithBearerChallenge",
                                "http403"
                              ],
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Describes what response the data plane API of a search service would send for requests that failed authentication."
                              }
                            }
                          },
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Indicates that either the API key or an access token from a Microsoft Entra ID tenant can be used for authentication."
                          }
                        },
                        "apiKeyOnly": {
                          "type": "object",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Indicates that only the API key can be used for authentication."
                          }
                        }
                      },
                      "metadata": {
                        "__bicep_export!": true
                      }
                    },
                    "networkRuleSetType": {
                      "type": "object",
                      "properties": {
                        "bypass": {
                          "type": "string",
                          "allowedValues": [
                            "AzurePortal",
                            "AzureServices",
                            "None"
                          ],
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Network specific rules that determine how the Azure AI Search service may be reached."
                          }
                        },
                        "ipRules": {
                          "type": "array",
                          "items": {
                            "$ref": "#/definitions/ipRuleType"
                          },
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. A list of IP restriction rules that defines the inbound network(s) with allowing access to the search service endpoint. At the meantime, all other public IP networks are blocked by the firewall. These restriction rules are applied only when the 'publicNetworkAccess' of the search service is 'enabled'; otherwise, traffic over public interface is not allowed even with any public IP rules, and private endpoint connections would be the exclusive access method."
                          }
                        }
                      },
                      "metadata": {
                        "__bicep_export!": true
                      }
                    },
                    "ipRuleType": {
                      "type": "object",
                      "properties": {
                        "value": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. Value corresponding to a single IPv4 address (eg., 123.1.2.3) or an IP range in CIDR format (eg., 123.1.2.3/24) to be allowed."
                          }
                        }
                      },
                      "metadata": {
                        "__bicep_export!": true
                      }
                    },
                    "_1.privateEndpointCustomDnsConfigType": {
                      "type": "object",
                      "properties": {
                        "fqdn": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. FQDN that resolves to private endpoint IP address."
                          }
                        },
                        "ipAddresses": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "metadata": {
                            "description": "Required. A list of private IP addresses of the private endpoint."
                          }
                        }
                      },
                      "metadata": {
                        "__bicep_imported_from!": {
                          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
                        }
                      }
                    },
                    "_1.privateEndpointIpConfigurationType": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The name of the resource that is unique within a resource group."
                          }
                        },
                        "properties": {
                          "type": "object",
                          "properties": {
                            "groupId": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The ID of a group obtained from the remote resource that this private endpoint should connect to."
                              }
                            },
                            "memberName": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The member name of a group obtained from the remote resource that this private endpoint should connect to."
                              }
                            },
                            "privateIPAddress": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. A private IP address obtained from the private endpoint's subnet."
                              }
                            }
                          },
                          "metadata": {
                            "description": "Required. Properties of private endpoint IP configurations."
                          }
                        }
                      },
                      "metadata": {
                        "__bicep_imported_from!": {
                          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
                        }
                      }
                    },
                    "_1.privateEndpointPrivateDnsZoneGroupType": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The name of the Private DNS Zone Group."
                          }
                        },
                        "privateDnsZoneGroupConfigs": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "name": {
                                "type": "string",
                                "nullable": true,
                                "metadata": {
                                  "description": "Optional. The name of the private DNS Zone Group config."
                                }
                              },
                              "privateDnsZoneResourceId": {
                                "type": "string",
                                "metadata": {
                                  "description": "Required. The resource id of the private DNS zone."
                                }
                              }
                            }
                          },
                          "metadata": {
                            "description": "Required. The private DNS Zone Groups to associate the Private Endpoint. A DNS Zone Group can support up to 5 DNS zones."
                          }
                        }
                      },
                      "metadata": {
                        "__bicep_imported_from!": {
                          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
                        }
                      }
                    },
                    "diagnosticSettingFullType": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The name of the diagnostic setting."
                          }
                        },
                        "logCategoriesAndGroups": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "category": {
                                "type": "string",
                                "nullable": true,
                                "metadata": {
                                  "description": "Optional. Name of a Diagnostic Log category for a resource type this setting is applied to. Set the specific logs to collect here."
                                }
                              },
                              "categoryGroup": {
                                "type": "string",
                                "nullable": true,
                                "metadata": {
                                  "description": "Optional. Name of a Diagnostic Log category group for a resource type this setting is applied to. Set to `allLogs` to collect all logs."
                                }
                              },
                              "enabled": {
                                "type": "bool",
                                "nullable": true,
                                "metadata": {
                                  "description": "Optional. Enable or disable the category explicitly. Default is `true`."
                                }
                              }
                            }
                          },
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The name of logs that will be streamed. \"allLogs\" includes all possible logs for the resource. Set to `[]` to disable log collection."
                          }
                        },
                        "metricCategories": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "category": {
                                "type": "string",
                                "metadata": {
                                  "description": "Required. Name of a Diagnostic Metric category for a resource type this setting is applied to. Set to `AllMetrics` to collect all metrics."
                                }
                              },
                              "enabled": {
                                "type": "bool",
                                "nullable": true,
                                "metadata": {
                                  "description": "Optional. Enable or disable the category explicitly. Default is `true`."
                                }
                              }
                            }
                          },
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The name of metrics that will be streamed. \"allMetrics\" includes all possible metrics for the resource. Set to `[]` to disable metric collection."
                          }
                        },
                        "logAnalyticsDestinationType": {
                          "type": "string",
                          "allowedValues": [
                            "AzureDiagnostics",
                            "Dedicated"
                          ],
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. A string indicating whether the export to Log Analytics should use the default destination type, i.e. AzureDiagnostics, or use a destination type."
                          }
                        },
                        "workspaceResourceId": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Resource ID of the diagnostic log analytics workspace. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                          }
                        },
                        "storageAccountResourceId": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Resource ID of the diagnostic storage account. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                          }
                        },
                        "eventHubAuthorizationRuleResourceId": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
                          }
                        },
                        "eventHubName": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                          }
                        },
                        "marketplacePartnerResourceId": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The full ARM resource ID of the Marketplace resource to which you would like to send Diagnostic Logs."
                          }
                        }
                      },
                      "metadata": {
                        "description": "An AVM-aligned type for a diagnostic setting. To be used if both logs & metrics are supported by the resource provider.",
                        "__bicep_imported_from!": {
                          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
                        }
                      }
                    },
                    "lockType": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Specify the name of lock."
                          }
                        },
                        "kind": {
                          "type": "string",
                          "allowedValues": [
                            "CanNotDelete",
                            "None",
                            "ReadOnly"
                          ],
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Specify the type of lock."
                          }
                        }
                      },
                      "metadata": {
                        "description": "An AVM-aligned type for a lock.",
                        "__bicep_imported_from!": {
                          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
                        }
                      }
                    },
                    "managedIdentityAllType": {
                      "type": "object",
                      "properties": {
                        "systemAssigned": {
                          "type": "bool",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Enables system assigned managed identity on the resource."
                          }
                        },
                        "userAssignedResourceIds": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The resource ID(s) to assign to the resource. Required if a user assigned identity is used for encryption."
                          }
                        }
                      },
                      "metadata": {
                        "description": "An AVM-aligned type for a managed identity configuration. To be used if both a system-assigned & user-assigned identities are supported by the resource provider.",
                        "__bicep_imported_from!": {
                          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
                        }
                      }
                    },
                    "privateEndpointSingleServiceType": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The name of the Private Endpoint."
                          }
                        },
                        "location": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The location to deploy the Private Endpoint to."
                          }
                        },
                        "privateLinkServiceConnectionName": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The name of the private link connection to create."
                          }
                        },
                        "service": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The subresource to deploy the Private Endpoint for. For example \"vault\" for a Key Vault Private Endpoint."
                          }
                        },
                        "subnetResourceId": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. Resource ID of the subnet where the endpoint needs to be created."
                          }
                        },
                        "resourceGroupResourceId": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The resource ID of the Resource Group the Private Endpoint will be created in. If not specified, the Resource Group of the provided Virtual Network Subnet is used."
                          }
                        },
                        "privateDnsZoneGroup": {
                          "$ref": "#/definitions/_1.privateEndpointPrivateDnsZoneGroupType",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The private DNS Zone Group to configure for the Private Endpoint."
                          }
                        },
                        "isManualConnection": {
                          "type": "bool",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. If Manual Private Link Connection is required."
                          }
                        },
                        "manualConnectionRequestMessage": {
                          "type": "string",
                          "nullable": true,
                          "maxLength": 140,
                          "metadata": {
                            "description": "Optional. A message passed to the owner of the remote resource with the manual connection request."
                          }
                        },
                        "customDnsConfigs": {
                          "type": "array",
                          "items": {
                            "$ref": "#/definitions/_1.privateEndpointCustomDnsConfigType"
                          },
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Custom DNS configurations."
                          }
                        },
                        "ipConfigurations": {
                          "type": "array",
                          "items": {
                            "$ref": "#/definitions/_1.privateEndpointIpConfigurationType"
                          },
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. A list of IP configurations of the Private Endpoint. This will be used to map to the first-party Service endpoints."
                          }
                        },
                        "applicationSecurityGroupResourceIds": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Application security groups in which the Private Endpoint IP configuration is included."
                          }
                        },
                        "customNetworkInterfaceName": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The custom name of the network interface attached to the Private Endpoint."
                          }
                        },
                        "lock": {
                          "$ref": "#/definitions/lockType",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Specify the type of lock."
                          }
                        },
                        "roleAssignments": {
                          "type": "array",
                          "items": {
                            "$ref": "#/definitions/roleAssignmentType"
                          },
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Array of role assignments to create."
                          }
                        },
                        "tags": {
                          "type": "object",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Tags to be applied on all resources/Resource Groups in this deployment."
                          }
                        },
                        "enableTelemetry": {
                          "type": "bool",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Enable/Disable usage telemetry for module."
                          }
                        }
                      },
                      "metadata": {
                        "description": "An AVM-aligned type for a private endpoint. To be used if the private endpoint's default service / groupId can be assumed (i.e., for services that only have one Private Endpoint type like 'vault' for key vault).",
                        "__bicep_imported_from!": {
                          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
                        }
                      }
                    },
                    "roleAssignmentType": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The name (as GUID) of the role assignment. If not provided, a GUID will be generated."
                          }
                        },
                        "roleDefinitionIdOrName": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                          }
                        },
                        "principalId": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                          }
                        },
                        "principalType": {
                          "type": "string",
                          "allowedValues": [
                            "Device",
                            "ForeignGroup",
                            "Group",
                            "ServicePrincipal",
                            "User"
                          ],
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The principal type of the assigned principal ID."
                          }
                        },
                        "description": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The description of the role assignment."
                          }
                        },
                        "condition": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                          }
                        },
                        "conditionVersion": {
                          "type": "string",
                          "allowedValues": [
                            "2.0"
                          ],
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Version of the condition."
                          }
                        },
                        "delegatedManagedIdentityResourceId": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The Resource Id of the delegated managed identity resource."
                          }
                        }
                      },
                      "metadata": {
                        "description": "An AVM-aligned type for a role assignment.",
                        "__bicep_imported_from!": {
                          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
                        }
                      }
                    },
                    "secretSetType": {
                      "type": "object",
                      "properties": {
                        "secretResourceId": {
                          "type": "string",
                          "metadata": {
                            "description": "The resourceId of the exported secret."
                          }
                        },
                        "secretUri": {
                          "type": "string",
                          "metadata": {
                            "description": "The secret URI of the exported secret."
                          }
                        }
                      },
                      "metadata": {
                        "__bicep_imported_from!": {
                          "sourceTemplate": "modules/keyVaultExport.bicep"
                        }
                      }
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The name of the Azure Cognitive Search service to create or update. Search service names must only contain lowercase letters, digits or dashes, cannot use dash as the first two or last one characters, cannot contain consecutive dashes, and must be between 2 and 60 characters in length. Search service names must be globally unique since they are part of the service URI (https://<name>.search.windows.net). You cannot change the service name after the service is created."
                      }
                    },
                    "authOptions": {
                      "$ref": "#/definitions/authOptionsType",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Defines the options for how the data plane API of a Search service authenticates requests. Must remain an empty object {} if 'disableLocalAuth' is set to true."
                      }
                    },
                    "disableLocalAuth": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. When set to true, calls to the search service will not be permitted to utilize API keys for authentication. This cannot be set to true if 'authOptions' are defined."
                      }
                    },
                    "enableTelemetry": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. Enable/Disable usage telemetry for module."
                      }
                    },
                    "cmkEnforcement": {
                      "type": "string",
                      "defaultValue": "Unspecified",
                      "allowedValues": [
                        "Disabled",
                        "Enabled",
                        "Unspecified"
                      ],
                      "metadata": {
                        "description": "Optional. Describes a policy that determines how resources within the search service are to be encrypted with Customer Managed Keys."
                      }
                    },
                    "hostingMode": {
                      "type": "string",
                      "defaultValue": "default",
                      "allowedValues": [
                        "default",
                        "highDensity"
                      ],
                      "metadata": {
                        "description": "Optional. Applicable only for the standard3 SKU. You can set this property to enable up to 3 high density partitions that allow up to 1000 indexes, which is much higher than the maximum indexes allowed for any other SKU. For the standard3 SKU, the value is either 'default' or 'highDensity'. For all other SKUs, this value must be 'default'."
                      }
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]",
                      "metadata": {
                        "description": "Optional. Location for all Resources."
                      }
                    },
                    "lock": {
                      "$ref": "#/definitions/lockType",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The lock settings for all Resources in the solution."
                      }
                    },
                    "networkRuleSet": {
                      "$ref": "#/definitions/networkRuleSetType",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Network specific rules that determine how the Azure Cognitive Search service may be reached."
                      }
                    },
                    "partitionCount": {
                      "type": "int",
                      "defaultValue": 1,
                      "minValue": 1,
                      "maxValue": 12,
                      "metadata": {
                        "description": "Optional. The number of partitions in the search service; if specified, it can be 1, 2, 3, 4, 6, or 12. Values greater than 1 are only valid for standard SKUs. For 'standard3' services with hostingMode set to 'highDensity', the allowed values are between 1 and 3."
                      }
                    },
                    "privateEndpoints": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/privateEndpointSingleServiceType"
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Configuration details for private endpoints. For security reasons, it is recommended to use private endpoints whenever possible."
                      }
                    },
                    "sharedPrivateLinkResources": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. The sharedPrivateLinkResources to create as part of the search Service."
                      }
                    },
                    "publicNetworkAccess": {
                      "type": "string",
                      "defaultValue": "Enabled",
                      "allowedValues": [
                        "Enabled",
                        "Disabled"
                      ],
                      "metadata": {
                        "description": "Optional. This value can be set to 'Enabled' to avoid breaking changes on existing customer resources and templates. If set to 'Disabled', traffic over public interface is not allowed, and private endpoint connections would be the exclusive access method."
                      }
                    },
                    "secretsExportConfiguration": {
                      "$ref": "#/definitions/secretsExportConfigurationType",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Key vault reference and secret settings for the module's secrets export."
                      }
                    },
                    "replicaCount": {
                      "type": "int",
                      "defaultValue": 3,
                      "minValue": 1,
                      "maxValue": 12,
                      "metadata": {
                        "description": "Optional. The number of replicas in the search service. If specified, it must be a value between 1 and 12 inclusive for standard SKUs or between 1 and 3 inclusive for basic SKU."
                      }
                    },
                    "roleAssignments": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/roleAssignmentType"
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Array of role assignments to create."
                      }
                    },
                    "semanticSearch": {
                      "type": "string",
                      "nullable": true,
                      "allowedValues": [
                        "disabled",
                        "free",
                        "standard"
                      ],
                      "metadata": {
                        "description": "Optional. Sets options that control the availability of semantic search. This configuration is only possible for certain search SKUs in certain locations."
                      }
                    },
                    "sku": {
                      "type": "string",
                      "defaultValue": "standard",
                      "allowedValues": [
                        "basic",
                        "free",
                        "standard",
                        "standard2",
                        "standard3",
                        "storage_optimized_l1",
                        "storage_optimized_l2"
                      ],
                      "metadata": {
                        "description": "Optional. Defines the SKU of an Azure Cognitive Search Service, which determines price tier and capacity limits."
                      }
                    },
                    "managedIdentities": {
                      "$ref": "#/definitions/managedIdentityAllType",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The managed identity definition for this resource."
                      }
                    },
                    "diagnosticSettings": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/diagnosticSettingFullType"
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The diagnostic settings of the service."
                      }
                    },
                    "tags": {
                      "type": "object",
                      "metadata": {
                        "__bicep_resource_derived_type!": {
                          "source": "Microsoft.Search/searchServices@2025-02-01-preview#properties/tags"
                        },
                        "description": "Optional. Tags to help categorize the resource in the Azure portal."
                      },
                      "nullable": true
                    }
                  },
                  "variables": {
                    "copy": [
                      {
                        "name": "formattedRoleAssignments",
                        "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]",
                        "input": "[union(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')], createObject('roleDefinitionId', coalesce(tryGet(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName), if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName)))))]"
                      }
                    ],
                    "enableReferencedModulesTelemetry": false,
                    "formattedUserAssignedIdentities": "[reduce(map(coalesce(tryGet(parameters('managedIdentities'), 'userAssignedResourceIds'), createArray()), lambda('id', createObject(format('{0}', lambdaVariables('id')), createObject()))), createObject(), lambda('cur', 'next', union(lambdaVariables('cur'), lambdaVariables('next'))))]",
                    "identity": "[if(not(empty(parameters('managedIdentities'))), createObject('type', if(coalesce(tryGet(parameters('managedIdentities'), 'systemAssigned'), false()), if(not(empty(coalesce(tryGet(parameters('managedIdentities'), 'userAssignedResourceIds'), createObject()))), 'SystemAssigned,UserAssigned', 'SystemAssigned'), if(not(empty(coalesce(tryGet(parameters('managedIdentities'), 'userAssignedResourceIds'), createObject()))), 'UserAssigned', '')), 'userAssignedIdentities', if(not(empty(variables('formattedUserAssignedIdentities'))), variables('formattedUserAssignedIdentities'), null())), null())]",
                    "builtInRoleNames": {
                      "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                      "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                      "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                      "Role Based Access Control Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
                      "Search Index Data Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8ebe5a00-799e-43f5-93ac-243d3dce84a7')]",
                      "Search Index Data Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '1407120a-92aa-4202-b7e9-c0e197c71c8f')]",
                      "Search Service Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '7ca78c08-252a-4471-8644-bb5ff32d4ba0')]",
                      "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
                    }
                  },
                  "resources": {
                    "avmTelemetry": {
                      "condition": "[parameters('enableTelemetry')]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2024-03-01",
                      "name": "[format('46d3xbcp.res.search-searchservice.{0}.{1}', replace('0.11.0', '.', '-'), substring(uniqueString(deployment().name, parameters('location')), 0, 4))]",
                      "properties": {
                        "mode": "Incremental",
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "resources": [],
                          "outputs": {
                            "telemetry": {
                              "type": "String",
                              "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                            }
                          }
                        }
                      }
                    },
                    "searchService": {
                      "type": "Microsoft.Search/searchServices",
                      "apiVersion": "2025-02-01-preview",
                      "name": "[parameters('name')]",
                      "location": "[parameters('location')]",
                      "sku": {
                        "name": "[parameters('sku')]"
                      },
                      "tags": "[parameters('tags')]",
                      "identity": "[variables('identity')]",
                      "properties": {
                        "authOptions": "[parameters('authOptions')]",
                        "disableLocalAuth": "[parameters('disableLocalAuth')]",
                        "encryptionWithCmk": {
                          "enforcement": "[parameters('cmkEnforcement')]"
                        },
                        "hostingMode": "[parameters('hostingMode')]",
                        "networkRuleSet": "[parameters('networkRuleSet')]",
                        "partitionCount": "[parameters('partitionCount')]",
                        "replicaCount": "[parameters('replicaCount')]",
                        "publicNetworkAccess": "[toLower(parameters('publicNetworkAccess'))]",
                        "semanticSearch": "[parameters('semanticSearch')]"
                      }
                    },
                    "searchService_diagnosticSettings": {
                      "copy": {
                        "name": "searchService_diagnosticSettings",
                        "count": "[length(coalesce(parameters('diagnosticSettings'), createArray()))]"
                      },
                      "type": "Microsoft.Insights/diagnosticSettings",
                      "apiVersion": "2021-05-01-preview",
                      "scope": "[format('Microsoft.Search/searchServices/{0}', parameters('name'))]",
                      "name": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'name'), format('{0}-diagnosticSettings', parameters('name')))]",
                      "properties": {
                        "copy": [
                          {
                            "name": "metrics",
                            "count": "[length(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics'))))]",
                            "input": {
                              "category": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics')))[copyIndex('metrics')].category]",
                              "enabled": "[coalesce(tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics')))[copyIndex('metrics')], 'enabled'), true())]",
                              "timeGrain": null
                            }
                          },
                          {
                            "name": "logs",
                            "count": "[length(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs'))))]",
                            "input": {
                              "categoryGroup": "[tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'categoryGroup')]",
                              "category": "[tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'category')]",
                              "enabled": "[coalesce(tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'enabled'), true())]"
                            }
                          }
                        ],
                        "storageAccountId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'storageAccountResourceId')]",
                        "workspaceId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'workspaceResourceId')]",
                        "eventHubAuthorizationRuleId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubAuthorizationRuleResourceId')]",
                        "eventHubName": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubName')]",
                        "marketplacePartnerId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'marketplacePartnerResourceId')]",
                        "logAnalyticsDestinationType": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logAnalyticsDestinationType')]"
                      },
                      "dependsOn": [
                        "searchService"
                      ]
                    },
                    "searchService_lock": {
                      "condition": "[and(not(empty(coalesce(parameters('lock'), createObject()))), not(equals(tryGet(parameters('lock'), 'kind'), 'None')))]",
                      "type": "Microsoft.Authorization/locks",
                      "apiVersion": "2020-05-01",
                      "scope": "[format('Microsoft.Search/searchServices/{0}', parameters('name'))]",
                      "name": "[coalesce(tryGet(parameters('lock'), 'name'), format('lock-{0}', parameters('name')))]",
                      "properties": {
                        "level": "[coalesce(tryGet(parameters('lock'), 'kind'), '')]",
                        "notes": "[if(equals(tryGet(parameters('lock'), 'kind'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot delete or modify the resource or child resources.')]"
                      },
                      "dependsOn": [
                        "searchService"
                      ]
                    },
                    "searchService_roleAssignments": {
                      "copy": {
                        "name": "searchService_roleAssignments",
                        "count": "[length(coalesce(variables('formattedRoleAssignments'), createArray()))]"
                      },
                      "type": "Microsoft.Authorization/roleAssignments",
                      "apiVersion": "2022-04-01",
                      "scope": "[format('Microsoft.Search/searchServices/{0}', parameters('name'))]",
                      "name": "[coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'name'), guid(resourceId('Microsoft.Search/searchServices', parameters('name')), coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId, coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId))]",
                      "properties": {
                        "roleDefinitionId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId]",
                        "principalId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId]",
                        "description": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'description')]",
                        "principalType": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'principalType')]",
                        "condition": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition')]",
                        "conditionVersion": "[if(not(empty(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                        "delegatedManagedIdentityResourceId": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                      },
                      "dependsOn": [
                        "searchService"
                      ]
                    },
                    "searchService_privateEndpoints": {
                      "copy": {
                        "name": "searchService_privateEndpoints",
                        "count": "[length(coalesce(parameters('privateEndpoints'), createArray()))]"
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('{0}-searchService-PrivateEndpoint-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                      "subscriptionId": "[split(coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'resourceGroupResourceId'), resourceGroup().id), '/')[2]]",
                      "resourceGroup": "[split(coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'resourceGroupResourceId'), resourceGroup().id), '/')[4]]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "name": {
                            "value": "[coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'name'), format('pep-{0}-{1}-{2}', last(split(resourceId('Microsoft.Search/searchServices', parameters('name')), '/')), coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'service'), 'searchService'), copyIndex()))]"
                          },
                          "privateLinkServiceConnections": "[if(not(equals(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'isManualConnection'), true())), createObject('value', createArray(createObject('name', coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'privateLinkServiceConnectionName'), format('{0}-{1}-{2}', last(split(resourceId('Microsoft.Search/searchServices', parameters('name')), '/')), coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'service'), 'searchService'), copyIndex())), 'properties', createObject('privateLinkServiceId', resourceId('Microsoft.Search/searchServices', parameters('name')), 'groupIds', createArray(coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'service'), 'searchService')))))), createObject('value', null()))]",
                          "manualPrivateLinkServiceConnections": "[if(equals(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'isManualConnection'), true()), createObject('value', createArray(createObject('name', coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'privateLinkServiceConnectionName'), format('{0}-{1}-{2}', last(split(resourceId('Microsoft.Search/searchServices', parameters('name')), '/')), coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'service'), 'searchService'), copyIndex())), 'properties', createObject('privateLinkServiceId', resourceId('Microsoft.Search/searchServices', parameters('name')), 'groupIds', createArray(coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'service'), 'searchService')), 'requestMessage', coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'manualConnectionRequestMessage'), 'Manual approval required.'))))), createObject('value', null()))]",
                          "subnetResourceId": {
                            "value": "[coalesce(parameters('privateEndpoints'), createArray())[copyIndex()].subnetResourceId]"
                          },
                          "enableTelemetry": {
                            "value": "[variables('enableReferencedModulesTelemetry')]"
                          },
                          "location": {
                            "value": "[coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'location'), reference(split(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()].subnetResourceId, '/subnets/')[0], '2020-06-01', 'Full').location)]"
                          },
                          "lock": {
                            "value": "[coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'lock'), parameters('lock'))]"
                          },
                          "privateDnsZoneGroup": {
                            "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'privateDnsZoneGroup')]"
                          },
                          "roleAssignments": {
                            "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'roleAssignments')]"
                          },
                          "tags": {
                            "value": "[coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'tags'), parameters('tags'))]"
                          },
                          "customDnsConfigs": {
                            "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'customDnsConfigs')]"
                          },
                          "ipConfigurations": {
                            "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'ipConfigurations')]"
                          },
                          "applicationSecurityGroupResourceIds": {
                            "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'applicationSecurityGroupResourceIds')]"
                          },
                          "customNetworkInterfaceName": {
                            "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'customNetworkInterfaceName')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "languageVersion": "2.0",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.34.44.8038",
                              "templateHash": "12389807800450456797"
                            },
                            "name": "Private Endpoints",
                            "description": "This module deploys a Private Endpoint."
                          },
                          "definitions": {
                            "privateDnsZoneGroupType": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The name of the Private DNS Zone Group."
                                  }
                                },
                                "privateDnsZoneGroupConfigs": {
                                  "type": "array",
                                  "items": {
                                    "$ref": "#/definitions/privateDnsZoneGroupConfigType"
                                  },
                                  "metadata": {
                                    "description": "Required. The private DNS zone groups to associate the private endpoint. A DNS zone group can support up to 5 DNS zones."
                                  }
                                }
                              },
                              "metadata": {
                                "__bicep_export!": true
                              }
                            },
                            "ipConfigurationType": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. The name of the resource that is unique within a resource group."
                                  }
                                },
                                "properties": {
                                  "type": "object",
                                  "properties": {
                                    "groupId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The ID of a group obtained from the remote resource that this private endpoint should connect to. If used with private link service connection, this property must be defined as empty string."
                                      }
                                    },
                                    "memberName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The member name of a group obtained from the remote resource that this private endpoint should connect to. If used with private link service connection, this property must be defined as empty string."
                                      }
                                    },
                                    "privateIPAddress": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. A private IP address obtained from the private endpoint's subnet."
                                      }
                                    }
                                  },
                                  "metadata": {
                                    "description": "Required. Properties of private endpoint IP configurations."
                                  }
                                }
                              },
                              "metadata": {
                                "__bicep_export!": true
                              }
                            },
                            "privateLinkServiceConnectionType": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. The name of the private link service connection."
                                  }
                                },
                                "properties": {
                                  "type": "object",
                                  "properties": {
                                    "groupIds": {
                                      "type": "array",
                                      "items": {
                                        "type": "string"
                                      },
                                      "metadata": {
                                        "description": "Required. The ID of a group obtained from the remote resource that this private endpoint should connect to. If used with private link service connection, this property must be defined as empty string array `[]`."
                                      }
                                    },
                                    "privateLinkServiceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The resource id of private link service."
                                      }
                                    },
                                    "requestMessage": {
                                      "type": "string",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. A message passed to the owner of the remote resource with this connection request. Restricted to 140 chars."
                                      }
                                    }
                                  },
                                  "metadata": {
                                    "description": "Required. Properties of private link service connection."
                                  }
                                }
                              },
                              "metadata": {
                                "__bicep_export!": true
                              }
                            },
                            "customDnsConfigType": {
                              "type": "object",
                              "properties": {
                                "fqdn": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. FQDN that resolves to private endpoint IP address."
                                  }
                                },
                                "ipAddresses": {
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  },
                                  "metadata": {
                                    "description": "Required. A list of private IP addresses of the private endpoint."
                                  }
                                }
                              },
                              "metadata": {
                                "__bicep_export!": true
                              }
                            },
                            "lockType": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Specify the name of lock."
                                  }
                                },
                                "kind": {
                                  "type": "string",
                                  "allowedValues": [
                                    "CanNotDelete",
                                    "None",
                                    "ReadOnly"
                                  ],
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Specify the type of lock."
                                  }
                                }
                              },
                              "metadata": {
                                "description": "An AVM-aligned type for a lock.",
                                "__bicep_imported_from!": {
                                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
                                }
                              }
                            },
                            "privateDnsZoneGroupConfigType": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The name of the private DNS zone group config."
                                  }
                                },
                                "privateDnsZoneResourceId": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. The resource id of the private DNS zone."
                                  }
                                }
                              },
                              "metadata": {
                                "__bicep_imported_from!": {
                                  "sourceTemplate": "private-dns-zone-group/main.bicep"
                                }
                              }
                            },
                            "roleAssignmentType": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The name (as GUID) of the role assignment. If not provided, a GUID will be generated."
                                  }
                                },
                                "roleDefinitionIdOrName": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                                  }
                                },
                                "principalId": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                                  }
                                },
                                "principalType": {
                                  "type": "string",
                                  "allowedValues": [
                                    "Device",
                                    "ForeignGroup",
                                    "Group",
                                    "ServicePrincipal",
                                    "User"
                                  ],
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The principal type of the assigned principal ID."
                                  }
                                },
                                "description": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The description of the role assignment."
                                  }
                                },
                                "condition": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                                  }
                                },
                                "conditionVersion": {
                                  "type": "string",
                                  "allowedValues": [
                                    "2.0"
                                  ],
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Version of the condition."
                                  }
                                },
                                "delegatedManagedIdentityResourceId": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The Resource Id of the delegated managed identity resource."
                                  }
                                }
                              },
                              "metadata": {
                                "description": "An AVM-aligned type for a role assignment.",
                                "__bicep_imported_from!": {
                                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
                                }
                              }
                            }
                          },
                          "parameters": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. Name of the private endpoint resource to create."
                              }
                            },
                            "subnetResourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. Resource ID of the subnet where the endpoint needs to be created."
                              }
                            },
                            "applicationSecurityGroupResourceIds": {
                              "type": "array",
                              "items": {
                                "type": "string"
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Application security groups in which the private endpoint IP configuration is included."
                              }
                            },
                            "customNetworkInterfaceName": {
                              "type": "string",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The custom name of the network interface attached to the private endpoint."
                              }
                            },
                            "ipConfigurations": {
                              "type": "array",
                              "items": {
                                "$ref": "#/definitions/ipConfigurationType"
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. A list of IP configurations of the private endpoint. This will be used to map to the First Party Service endpoints."
                              }
                            },
                            "privateDnsZoneGroup": {
                              "$ref": "#/definitions/privateDnsZoneGroupType",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The private DNS zone group to configure for the private endpoint."
                              }
                            },
                            "location": {
                              "type": "string",
                              "defaultValue": "[resourceGroup().location]",
                              "metadata": {
                                "description": "Optional. Location for all Resources."
                              }
                            },
                            "lock": {
                              "$ref": "#/definitions/lockType",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The lock settings of the service."
                              }
                            },
                            "roleAssignments": {
                              "type": "array",
                              "items": {
                                "$ref": "#/definitions/roleAssignmentType"
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Array of role assignments to create."
                              }
                            },
                            "tags": {
                              "type": "object",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Tags to be applied on all resources/resource groups in this deployment."
                              }
                            },
                            "customDnsConfigs": {
                              "type": "array",
                              "items": {
                                "$ref": "#/definitions/customDnsConfigType"
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Custom DNS configurations."
                              }
                            },
                            "manualPrivateLinkServiceConnections": {
                              "type": "array",
                              "items": {
                                "$ref": "#/definitions/privateLinkServiceConnectionType"
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Conditional. A grouping of information about the connection to the remote resource. Used when the network admin does not have access to approve connections to the remote resource. Required if `privateLinkServiceConnections` is empty."
                              }
                            },
                            "privateLinkServiceConnections": {
                              "type": "array",
                              "items": {
                                "$ref": "#/definitions/privateLinkServiceConnectionType"
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Conditional. A grouping of information about the connection to the remote resource. Required if `manualPrivateLinkServiceConnections` is empty."
                              }
                            },
                            "enableTelemetry": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Optional. Enable/Disable usage telemetry for module."
                              }
                            }
                          },
                          "variables": {
                            "copy": [
                              {
                                "name": "formattedRoleAssignments",
                                "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]",
                                "input": "[union(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')], createObject('roleDefinitionId', coalesce(tryGet(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName), if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName)))))]"
                              }
                            ],
                            "builtInRoleNames": {
                              "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                              "DNS Resolver Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '0f2ebee7-ffd4-4fc0-b3b7-664099fdad5d')]",
                              "DNS Zone Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'befefa01-2a29-4197-83a8-272ff33ce314')]",
                              "Domain Services Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'eeaeda52-9324-47f6-8069-5d5bade478b2')]",
                              "Domain Services Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '361898ef-9ed1-48c2-849c-a832951106bb')]",
                              "Network Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4d97b98b-1d4f-4787-a291-c67834d212e7')]",
                              "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                              "Private DNS Zone Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b12aa53e-6015-4669-85d0-8515ebb3ae7f')]",
                              "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                              "Role Based Access Control Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]"
                            }
                          },
                          "resources": {
                            "avmTelemetry": {
                              "condition": "[parameters('enableTelemetry')]",
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2024-03-01",
                              "name": "[format('46d3xbcp.res.network-privateendpoint.{0}.{1}', replace('0.11.0', '.', '-'), substring(uniqueString(deployment().name, parameters('location')), 0, 4))]",
                              "properties": {
                                "mode": "Incremental",
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "resources": [],
                                  "outputs": {
                                    "telemetry": {
                                      "type": "String",
                                      "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                                    }
                                  }
                                }
                              }
                            },
                            "privateEndpoint": {
                              "type": "Microsoft.Network/privateEndpoints",
                              "apiVersion": "2024-05-01",
                              "name": "[parameters('name')]",
                              "location": "[parameters('location')]",
                              "tags": "[parameters('tags')]",
                              "properties": {
                                "copy": [
                                  {
                                    "name": "applicationSecurityGroups",
                                    "count": "[length(coalesce(parameters('applicationSecurityGroupResourceIds'), createArray()))]",
                                    "input": {
                                      "id": "[coalesce(parameters('applicationSecurityGroupResourceIds'), createArray())[copyIndex('applicationSecurityGroups')]]"
                                    }
                                  }
                                ],
                                "customDnsConfigs": "[coalesce(parameters('customDnsConfigs'), createArray())]",
                                "customNetworkInterfaceName": "[coalesce(parameters('customNetworkInterfaceName'), '')]",
                                "ipConfigurations": "[coalesce(parameters('ipConfigurations'), createArray())]",
                                "manualPrivateLinkServiceConnections": "[coalesce(parameters('manualPrivateLinkServiceConnections'), createArray())]",
                                "privateLinkServiceConnections": "[coalesce(parameters('privateLinkServiceConnections'), createArray())]",
                                "subnet": {
                                  "id": "[parameters('subnetResourceId')]"
                                }
                              }
                            },
                            "privateEndpoint_lock": {
                              "condition": "[and(not(empty(coalesce(parameters('lock'), createObject()))), not(equals(tryGet(parameters('lock'), 'kind'), 'None')))]",
                              "type": "Microsoft.Authorization/locks",
                              "apiVersion": "2020-05-01",
                              "scope": "[format('Microsoft.Network/privateEndpoints/{0}', parameters('name'))]",
                              "name": "[coalesce(tryGet(parameters('lock'), 'name'), format('lock-{0}', parameters('name')))]",
                              "properties": {
                                "level": "[coalesce(tryGet(parameters('lock'), 'kind'), '')]",
                                "notes": "[if(equals(tryGet(parameters('lock'), 'kind'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot delete or modify the resource or child resources.')]"
                              },
                              "dependsOn": [
                                "privateEndpoint"
                              ]
                            },
                            "privateEndpoint_roleAssignments": {
                              "copy": {
                                "name": "privateEndpoint_roleAssignments",
                                "count": "[length(coalesce(variables('formattedRoleAssignments'), createArray()))]"
                              },
                              "type": "Microsoft.Authorization/roleAssignments",
                              "apiVersion": "2022-04-01",
                              "scope": "[format('Microsoft.Network/privateEndpoints/{0}', parameters('name'))]",
                              "name": "[coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'name'), guid(resourceId('Microsoft.Network/privateEndpoints', parameters('name')), coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId, coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId))]",
                              "properties": {
                                "roleDefinitionId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId]",
                                "principalId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId]",
                                "description": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'description')]",
                                "principalType": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'principalType')]",
                                "condition": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition')]",
                                "conditionVersion": "[if(not(empty(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                                "delegatedManagedIdentityResourceId": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                              },
                              "dependsOn": [
                                "privateEndpoint"
                              ]
                            },
                            "privateEndpoint_privateDnsZoneGroup": {
                              "condition": "[not(empty(parameters('privateDnsZoneGroup')))]",
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('{0}-PrivateEndpoint-PrivateDnsZoneGroup', uniqueString(deployment().name))]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "name": {
                                    "value": "[tryGet(parameters('privateDnsZoneGroup'), 'name')]"
                                  },
                                  "privateEndpointName": {
                                    "value": "[parameters('name')]"
                                  },
                                  "privateDnsZoneConfigs": {
                                    "value": "[parameters('privateDnsZoneGroup').privateDnsZoneGroupConfigs]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "languageVersion": "2.0",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.34.44.8038",
                                      "templateHash": "13997305779829540948"
                                    },
                                    "name": "Private Endpoint Private DNS Zone Groups",
                                    "description": "This module deploys a Private Endpoint Private DNS Zone Group."
                                  },
                                  "definitions": {
                                    "privateDnsZoneGroupConfigType": {
                                      "type": "object",
                                      "properties": {
                                        "name": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The name of the private DNS zone group config."
                                          }
                                        },
                                        "privateDnsZoneResourceId": {
                                          "type": "string",
                                          "metadata": {
                                            "description": "Required. The resource id of the private DNS zone."
                                          }
                                        }
                                      },
                                      "metadata": {
                                        "__bicep_export!": true
                                      }
                                    }
                                  },
                                  "parameters": {
                                    "privateEndpointName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Conditional. The name of the parent private endpoint. Required if the template is used in a standalone deployment."
                                      }
                                    },
                                    "privateDnsZoneConfigs": {
                                      "type": "array",
                                      "items": {
                                        "$ref": "#/definitions/privateDnsZoneGroupConfigType"
                                      },
                                      "minLength": 1,
                                      "maxLength": 5,
                                      "metadata": {
                                        "description": "Required. Array of private DNS zone configurations of the private DNS zone group. A DNS zone group can support up to 5 DNS zones."
                                      }
                                    },
                                    "name": {
                                      "type": "string",
                                      "defaultValue": "default",
                                      "metadata": {
                                        "description": "Optional. The name of the private DNS zone group."
                                      }
                                    }
                                  },
                                  "variables": {
                                    "copy": [
                                      {
                                        "name": "privateDnsZoneConfigsVar",
                                        "count": "[length(parameters('privateDnsZoneConfigs'))]",
                                        "input": {
                                          "name": "[coalesce(tryGet(parameters('privateDnsZoneConfigs')[copyIndex('privateDnsZoneConfigsVar')], 'name'), last(split(parameters('privateDnsZoneConfigs')[copyIndex('privateDnsZoneConfigsVar')].privateDnsZoneResourceId, '/')))]",
                                          "properties": {
                                            "privateDnsZoneId": "[parameters('privateDnsZoneConfigs')[copyIndex('privateDnsZoneConfigsVar')].privateDnsZoneResourceId]"
                                          }
                                        }
                                      }
                                    ]
                                  },
                                  "resources": {
                                    "privateEndpoint": {
                                      "existing": true,
                                      "type": "Microsoft.Network/privateEndpoints",
                                      "apiVersion": "2024-05-01",
                                      "name": "[parameters('privateEndpointName')]"
                                    },
                                    "privateDnsZoneGroup": {
                                      "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
                                      "apiVersion": "2024-05-01",
                                      "name": "[format('{0}/{1}', parameters('privateEndpointName'), parameters('name'))]",
                                      "properties": {
                                        "privateDnsZoneConfigs": "[variables('privateDnsZoneConfigsVar')]"
                                      }
                                    }
                                  },
                                  "outputs": {
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the private endpoint DNS zone group."
                                      },
                                      "value": "[parameters('name')]"
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource ID of the private endpoint DNS zone group."
                                      },
                                      "value": "[resourceId('Microsoft.Network/privateEndpoints/privateDnsZoneGroups', parameters('privateEndpointName'), parameters('name'))]"
                                    },
                                    "resourceGroupName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource group the private endpoint DNS zone group was deployed into."
                                      },
                                      "value": "[resourceGroup().name]"
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "privateEndpoint"
                              ]
                            }
                          },
                          "outputs": {
                            "resourceGroupName": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource group the private endpoint was deployed into."
                              },
                              "value": "[resourceGroup().name]"
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource ID of the private endpoint."
                              },
                              "value": "[resourceId('Microsoft.Network/privateEndpoints', parameters('name'))]"
                            },
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the private endpoint."
                              },
                              "value": "[parameters('name')]"
                            },
                            "location": {
                              "type": "string",
                              "metadata": {
                                "description": "The location the resource was deployed into."
                              },
                              "value": "[reference('privateEndpoint', '2024-05-01', 'full').location]"
                            },
                            "customDnsConfigs": {
                              "type": "array",
                              "items": {
                                "$ref": "#/definitions/customDnsConfigType"
                              },
                              "metadata": {
                                "description": "The custom DNS configurations of the private endpoint."
                              },
                              "value": "[reference('privateEndpoint').customDnsConfigs]"
                            },
                            "networkInterfaceResourceIds": {
                              "type": "array",
                              "items": {
                                "type": "string"
                              },
                              "metadata": {
                                "description": "The resource IDs of the network interfaces associated with the private endpoint."
                              },
                              "value": "[map(reference('privateEndpoint').networkInterfaces, lambda('nic', lambdaVariables('nic').id))]"
                            },
                            "groupId": {
                              "type": "string",
                              "nullable": true,
                              "metadata": {
                                "description": "The group Id for the private endpoint Group."
                              },
                              "value": "[coalesce(tryGet(tryGet(tryGet(tryGet(reference('privateEndpoint'), 'manualPrivateLinkServiceConnections'), 0, 'properties'), 'groupIds'), 0), tryGet(tryGet(tryGet(tryGet(reference('privateEndpoint'), 'privateLinkServiceConnections'), 0, 'properties'), 'groupIds'), 0))]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "searchService"
                      ]
                    },
                    "searchService_sharedPrivateLinkResources": {
                      "copy": {
                        "name": "searchService_sharedPrivateLinkResources",
                        "count": "[length(parameters('sharedPrivateLinkResources'))]",
                        "mode": "serial",
                        "batchSize": 1
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('{0}-searchService-SharedPrvLink-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "name": {
                            "value": "[coalesce(tryGet(parameters('sharedPrivateLinkResources')[copyIndex()], 'name'), format('spl-{0}-{1}-{2}', last(split(resourceId('Microsoft.Search/searchServices', parameters('name')), '/')), parameters('sharedPrivateLinkResources')[copyIndex()].groupId, copyIndex()))]"
                          },
                          "searchServiceName": {
                            "value": "[parameters('name')]"
                          },
                          "privateLinkResourceId": {
                            "value": "[parameters('sharedPrivateLinkResources')[copyIndex()].privateLinkResourceId]"
                          },
                          "groupId": {
                            "value": "[parameters('sharedPrivateLinkResources')[copyIndex()].groupId]"
                          },
                          "requestMessage": {
                            "value": "[parameters('sharedPrivateLinkResources')[copyIndex()].requestMessage]"
                          },
                          "resourceRegion": {
                            "value": "[tryGet(parameters('sharedPrivateLinkResources')[copyIndex()], 'resourceRegion')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "languageVersion": "2.0",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.36.1.42791",
                              "templateHash": "8458710175416618801"
                            },
                            "name": "Search Services Private Link Resources",
                            "description": "This module deploys a Search Service Private Link Resource."
                          },
                          "parameters": {
                            "searchServiceName": {
                              "type": "string",
                              "metadata": {
                                "description": "Conditional. The name of the parent searchServices. Required if the template is used in a standalone deployment."
                              }
                            },
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The name of the shared private link resource managed by the Azure Cognitive Search service within the specified resource group."
                              }
                            },
                            "privateLinkResourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The resource ID of the resource the shared private link resource is for."
                              }
                            },
                            "groupId": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The group ID from the provider of resource the shared private link resource is for."
                              }
                            },
                            "requestMessage": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The request message for requesting approval of the shared private link resource."
                              }
                            },
                            "resourceRegion": {
                              "type": "string",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Can be used to specify the Azure Resource Manager location of the resource to which a shared private link is to be created. This is only required for those resources whose DNS configuration are regional (such as Azure Kubernetes Service)."
                              }
                            }
                          },
                          "resources": {
                            "searchService": {
                              "existing": true,
                              "type": "Microsoft.Search/searchServices",
                              "apiVersion": "2025-02-01-preview",
                              "name": "[parameters('searchServiceName')]"
                            },
                            "sharedPrivateLinkResource": {
                              "type": "Microsoft.Search/searchServices/sharedPrivateLinkResources",
                              "apiVersion": "2025-02-01-preview",
                              "name": "[format('{0}/{1}', parameters('searchServiceName'), parameters('name'))]",
                              "properties": {
                                "privateLinkResourceId": "[parameters('privateLinkResourceId')]",
                                "groupId": "[parameters('groupId')]",
                                "requestMessage": "[parameters('requestMessage')]",
                                "resourceRegion": "[parameters('resourceRegion')]"
                              }
                            }
                          },
                          "outputs": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the shared private link resource."
                              },
                              "value": "[parameters('name')]"
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource ID of the shared private link resource."
                              },
                              "value": "[resourceId('Microsoft.Search/searchServices/sharedPrivateLinkResources', parameters('searchServiceName'), parameters('name'))]"
                            },
                            "resourceGroupName": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the resource group the shared private link resource was created in."
                              },
                              "value": "[resourceGroup().name]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "searchService"
                      ]
                    },
                    "secretsExport": {
                      "condition": "[not(equals(parameters('secretsExportConfiguration'), null()))]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('{0}-secrets-kv', uniqueString(deployment().name, parameters('location')))]",
                      "subscriptionId": "[split(tryGet(parameters('secretsExportConfiguration'), 'keyVaultResourceId'), '/')[2]]",
                      "resourceGroup": "[split(tryGet(parameters('secretsExportConfiguration'), 'keyVaultResourceId'), '/')[4]]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "keyVaultName": {
                            "value": "[last(split(tryGet(parameters('secretsExportConfiguration'), 'keyVaultResourceId'), '/'))]"
                          },
                          "secretsToSet": {
                            "value": "[union(createArray(), if(contains(parameters('secretsExportConfiguration'), 'primaryAdminKeyName'), createArray(createObject('name', tryGet(parameters('secretsExportConfiguration'), 'primaryAdminKeyName'), 'value', listAdminKeys('searchService', '2025-02-01-preview').primaryKey)), createArray()), if(contains(parameters('secretsExportConfiguration'), 'secondaryAdminKeyName'), createArray(createObject('name', tryGet(parameters('secretsExportConfiguration'), 'secondaryAdminKeyName'), 'value', listAdminKeys('searchService', '2025-02-01-preview').secondaryKey)), createArray()))]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "languageVersion": "2.0",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.36.1.42791",
                              "templateHash": "803258357844469941"
                            }
                          },
                          "definitions": {
                            "secretSetType": {
                              "type": "object",
                              "properties": {
                                "secretResourceId": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "The resourceId of the exported secret."
                                  }
                                },
                                "secretUri": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "The secret URI of the exported secret."
                                  }
                                }
                              },
                              "metadata": {
                                "__bicep_export!": true
                              }
                            },
                            "secretToSetType": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. The name of the secret to set."
                                  }
                                },
                                "value": {
                                  "type": "securestring",
                                  "metadata": {
                                    "description": "Required. The value of the secret to set."
                                  }
                                }
                              }
                            }
                          },
                          "parameters": {
                            "keyVaultName": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The name of the Key Vault to set the ecrets in."
                              }
                            },
                            "secretsToSet": {
                              "type": "array",
                              "items": {
                                "$ref": "#/definitions/secretToSetType"
                              },
                              "metadata": {
                                "description": "Required. The secrets to set in the Key Vault."
                              }
                            }
                          },
                          "resources": {
                            "keyVault": {
                              "existing": true,
                              "type": "Microsoft.KeyVault/vaults",
                              "apiVersion": "2024-11-01",
                              "name": "[parameters('keyVaultName')]"
                            },
                            "secrets": {
                              "copy": {
                                "name": "secrets",
                                "count": "[length(parameters('secretsToSet'))]"
                              },
                              "type": "Microsoft.KeyVault/vaults/secrets",
                              "apiVersion": "2024-11-01",
                              "name": "[format('{0}/{1}', parameters('keyVaultName'), parameters('secretsToSet')[copyIndex()].name)]",
                              "properties": {
                                "value": "[parameters('secretsToSet')[copyIndex()].value]"
                              }
                            }
                          },
                          "outputs": {
                            "secretsSet": {
                              "type": "array",
                              "items": {
                                "$ref": "#/definitions/secretSetType"
                              },
                              "metadata": {
                                "description": "The references to the secrets exported to the provided Key Vault."
                              },
                              "copy": {
                                "count": "[length(range(0, length(coalesce(parameters('secretsToSet'), createArray()))))]",
                                "input": {
                                  "secretResourceId": "[resourceId('Microsoft.KeyVault/vaults/secrets', parameters('keyVaultName'), parameters('secretsToSet')[range(0, length(coalesce(parameters('secretsToSet'), createArray())))[copyIndex()]].name)]",
                                  "secretUri": "[reference(format('secrets[{0}]', range(0, length(coalesce(parameters('secretsToSet'), createArray())))[copyIndex()])).secretUri]"
                                }
                              }
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "searchService"
                      ]
                    }
                  },
                  "outputs": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the search service."
                      },
                      "value": "[parameters('name')]"
                    },
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the search service."
                      },
                      "value": "[resourceId('Microsoft.Search/searchServices', parameters('name'))]"
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the resource group the search service was created in."
                      },
                      "value": "[resourceGroup().name]"
                    },
                    "systemAssignedMIPrincipalId": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "The principal ID of the system assigned identity."
                      },
                      "value": "[tryGet(tryGet(reference('searchService', '2025-02-01-preview', 'full'), 'identity'), 'principalId')]"
                    },
                    "location": {
                      "type": "string",
                      "metadata": {
                        "description": "The location the resource was deployed into."
                      },
                      "value": "[reference('searchService', '2025-02-01-preview', 'full').location]"
                    },
                    "endpoint": {
                      "type": "string",
                      "metadata": {
                        "description": "The endpoint of the search service."
                      },
                      "value": "[reference('searchService').endpoint]"
                    },
                    "privateEndpoints": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/privateEndpointOutputType"
                      },
                      "metadata": {
                        "description": "The private endpoints of the search service."
                      },
                      "copy": {
                        "count": "[length(coalesce(parameters('privateEndpoints'), createArray()))]",
                        "input": {
                          "name": "[reference(format('searchService_privateEndpoints[{0}]', copyIndex())).outputs.name.value]",
                          "resourceId": "[reference(format('searchService_privateEndpoints[{0}]', copyIndex())).outputs.resourceId.value]",
                          "groupId": "[tryGet(tryGet(reference(format('searchService_privateEndpoints[{0}]', copyIndex())).outputs, 'groupId'), 'value')]",
                          "customDnsConfigs": "[reference(format('searchService_privateEndpoints[{0}]', copyIndex())).outputs.customDnsConfigs.value]",
                          "networkInterfaceResourceIds": "[reference(format('searchService_privateEndpoints[{0}]', copyIndex())).outputs.networkInterfaceResourceIds.value]"
                        }
                      }
                    },
                    "exportedSecrets": {
                      "$ref": "#/definitions/secretsOutputType",
                      "metadata": {
                        "description": "A hashtable of references to the secrets exported to the provided Key Vault. The key of each reference is each secret's name."
                      },
                      "value": "[if(not(equals(parameters('secretsExportConfiguration'), null())), toObject(reference('secretsExport').outputs.secretsSet.value, lambda('secret', last(split(lambdaVariables('secret').secretResourceId, '/'))), lambda('secret', lambdaVariables('secret'))), createObject())]"
                    },
                    "primaryKey": {
                      "type": "securestring",
                      "metadata": {
                        "description": "The primary admin API key of the search service."
                      },
                      "value": "[listAdminKeys('searchService', '2025-02-01-preview').primaryKey]"
                    },
                    "secondaryKey": {
                      "type": "securestring",
                      "metadata": {
                        "description": "The secondaryKey admin API key of the search service."
                      },
                      "value": "[listAdminKeys('searchService', '2025-02-01-preview').secondaryKey]"
                    }
                  }
                }
              }
            }
          },
          "outputs": {
            "name": {
              "type": "string",
              "metadata": {
                "description": "Name of the AI Search resource."
              },
              "value": "[if(empty(parameters('existingResourceId')), reference('aiSearch').outputs.name.value, variables('existingName'))]"
            },
            "resourceId": {
              "type": "string",
              "metadata": {
                "description": "Resource ID of the AI Search resource."
              },
              "value": "[if(empty(parameters('existingResourceId')), reference('aiSearch').outputs.resourceId.value, extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('existingSubscriptionId'), variables('existingResourceGroupName')), 'Microsoft.Search/searchServices', variables('existingName')))]"
            },
            "subscriptionId": {
              "type": "string",
              "metadata": {
                "description": "Subscription ID of the AI Search resource."
              },
              "value": "[if(empty(parameters('existingResourceId')), subscription().subscriptionId, variables('existingSubscriptionId'))]"
            },
            "resourceGroupName": {
              "type": "string",
              "metadata": {
                "description": "Resource Group Name of the AI Search resource."
              },
              "value": "[if(empty(parameters('existingResourceId')), resourceGroup().name, variables('existingResourceGroupName'))]"
            },
            "systemAssignedMIPrincipalId": {
              "type": "string",
              "nullable": true,
              "metadata": {
                "description": "System assigned managed identity principal ID of the AI Search resource."
              },
              "value": "[if(empty(parameters('existingResourceId')), reference('aiSearch').outputs.systemAssignedMIPrincipalId.value, '')]"
            }
          }
        }
      }
    },
    "storageAccount": {
      "condition": "[parameters('includeAssociatedResources')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[take(format('module.storageAccount.{0}', variables('resourcesName')), 64)]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "existingResourceId": {
            "value": "[tryGet(parameters('storageAccountConfiguration'), 'existingResourceId')]"
          },
          "name": {
            "value": "[take(if(not(empty(tryGet(parameters('storageAccountConfiguration'), 'name'))), parameters('storageAccountConfiguration').name, format('st{0}', variables('resourcesName'))), 24)]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "tags": {
            "value": "[parameters('tags')]"
          },
          "enableTelemetry": {
            "value": "[parameters('enableTelemetry')]"
          },
          "privateEndpointSubnetResourceId": {
            "value": "[parameters('privateEndpointSubnetResourceId')]"
          },
          "blobPrivateDnsZoneResourceId": {
            "value": "[tryGet(parameters('storageAccountConfiguration'), 'blobPrivateDnsZoneResourceId')]"
          },
          "roleAssignments": {
            "value": "[concat(if(and(not(empty(parameters('storageAccountConfiguration'))), not(empty(tryGet(parameters('storageAccountConfiguration'), 'roleAssignments')))), parameters('storageAccountConfiguration').roleAssignments, createArray()), createArray(createObject('principalId', reference('foundryAccount').outputs.systemAssignedMIPrincipalId.value, 'principalType', 'ServicePrincipal', 'roleDefinitionIdOrName', 'Storage Blob Data Contributor')), if(empty(tryGet(parameters('aiSearchConfiguration'), 'existingResourceId')), createArray(createObject('principalId', reference('aiSearch').outputs.systemAssignedMIPrincipalId.value, 'principalType', 'ServicePrincipal', 'roleDefinitionIdOrName', 'Storage Blob Data Contributor')), createArray()))]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "languageVersion": "2.0",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "16873663592844610603"
            }
          },
          "definitions": {
            "roleAssignmentType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The name (as GUID) of the role assignment. If not provided, a GUID will be generated."
                  }
                },
                "roleDefinitionIdOrName": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                  }
                },
                "principalId": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                  }
                },
                "principalType": {
                  "type": "string",
                  "allowedValues": [
                    "Device",
                    "ForeignGroup",
                    "Group",
                    "ServicePrincipal",
                    "User"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The principal type of the assigned principal ID."
                  }
                },
                "description": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The description of the role assignment."
                  }
                },
                "condition": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                  }
                },
                "conditionVersion": {
                  "type": "string",
                  "allowedValues": [
                    "2.0"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Version of the condition."
                  }
                },
                "delegatedManagedIdentityResourceId": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The Resource Id of the delegated managed identity resource."
                  }
                }
              },
              "metadata": {
                "description": "An AVM-aligned type for a role assignment.",
                "__bicep_imported_from!": {
                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.6.0"
                }
              }
            }
          },
          "functions": [
            {
              "namespace": "__bicep",
              "members": {
                "getResourceGroupName": {
                  "parameters": [
                    {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "name": "parts"
                    }
                  ],
                  "output": {
                    "type": "string",
                    "value": "[if(greater(length(parameters('parts')), 4), parameters('parts')[4], resourceGroup().name)]"
                  },
                  "metadata": {
                    "description": "Extracts the Resource Group Name from a Resource ID.",
                    "__bicep_imported_from!": {
                      "sourceTemplate": "parseResourceIdFunctions.bicep"
                    }
                  }
                },
                "getResourceName": {
                  "parameters": [
                    {
                      "type": "string",
                      "nullable": true,
                      "name": "resourceId"
                    },
                    {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "name": "parts"
                    }
                  ],
                  "output": {
                    "type": "string",
                    "value": "[if(and(and(not(empty(parameters('resourceId'))), contains(parameters('resourceId'), '/')), not(empty(parameters('parts')))), last(parameters('parts')), coalesce(parameters('resourceId'), ''))]"
                  },
                  "metadata": {
                    "description": "Extracts the Resource Name from a Resource ID.",
                    "__bicep_imported_from!": {
                      "sourceTemplate": "parseResourceIdFunctions.bicep"
                    }
                  }
                },
                "getResourceParts": {
                  "parameters": [
                    {
                      "type": "string",
                      "nullable": true,
                      "name": "resourceId"
                    }
                  ],
                  "output": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "value": "[split(coalesce(parameters('resourceId'), ''), '/')]"
                  },
                  "metadata": {
                    "description": "Splits Resource ID into its components.",
                    "__bicep_imported_from!": {
                      "sourceTemplate": "parseResourceIdFunctions.bicep"
                    }
                  }
                },
                "getSubscriptionId": {
                  "parameters": [
                    {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "name": "parts"
                    }
                  ],
                  "output": {
                    "type": "string",
                    "value": "[if(greater(length(parameters('parts')), 2), parameters('parts')[2], subscription().subscriptionId)]"
                  },
                  "metadata": {
                    "description": "Extracts the Subscription ID from a Resource ID.",
                    "__bicep_imported_from!": {
                      "sourceTemplate": "parseResourceIdFunctions.bicep"
                    }
                  }
                }
              }
            }
          ],
          "parameters": {
            "name": {
              "type": "string",
              "maxLength": 24,
              "metadata": {
                "description": "Required. The name of the storage account."
              }
            },
            "location": {
              "type": "string",
              "metadata": {
                "description": "Required. The location for the storage account."
              }
            },
            "existingResourceId": {
              "type": "string",
              "nullable": true,
              "metadata": {
                "description": "Optional. The full resource ID of an existing storage account to use instead of creating a new one."
              }
            },
            "privateEndpointSubnetResourceId": {
              "type": "string",
              "nullable": true,
              "metadata": {
                "description": "Optional. Resource Id of an existing subnet to use for private connectivity. This is required along with 'blobPrivateDnsZoneResourceId' to establish private endpoints."
              }
            },
            "blobPrivateDnsZoneResourceId": {
              "type": "string",
              "nullable": true,
              "metadata": {
                "description": "Optional. The resource ID of the private DNS zone for the storage account blob service to establish private endpoints."
              }
            },
            "roleAssignments": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/roleAssignmentType"
              },
              "nullable": true,
              "metadata": {
                "description": "Optional. Specifies the role assignments for the storage account."
              }
            },
            "enableTelemetry": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Optional. Enable/Disable usage telemetry for module."
              }
            },
            "tags": {
              "type": "object",
              "metadata": {
                "__bicep_resource_derived_type!": {
                  "source": "Microsoft.Resources/resourceGroups@2025-04-01#properties/tags"
                },
                "description": "Optional. Specifies the resource tags for all the resources."
              },
              "defaultValue": {}
            }
          },
          "variables": {
            "existingResourceParts": "[__bicep.getResourceParts(parameters('existingResourceId'))]",
            "existingName": "[__bicep.getResourceName(parameters('existingResourceId'), variables('existingResourceParts'))]",
            "existingSubscriptionId": "[__bicep.getSubscriptionId(variables('existingResourceParts'))]",
            "existingResourceGroupName": "[__bicep.getResourceGroupName(variables('existingResourceParts'))]",
            "privateNetworkingEnabled": "[and(not(empty(parameters('blobPrivateDnsZoneResourceId'))), not(empty(parameters('privateEndpointSubnetResourceId'))))]"
          },
          "resources": {
            "existingStorageAccount": {
              "condition": "[not(empty(parameters('existingResourceId')))]",
              "existing": true,
              "type": "Microsoft.Storage/storageAccounts",
              "apiVersion": "2025-01-01",
              "subscriptionId": "[variables('existingSubscriptionId')]",
              "resourceGroup": "[variables('existingResourceGroupName')]",
              "name": "[variables('existingName')]"
            },
            "storageAccount": {
              "condition": "[empty(parameters('existingResourceId'))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[take(format('avm.res.storage.storage-account.{0}', parameters('name')), 64)]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "[parameters('name')]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  },
                  "enableTelemetry": {
                    "value": "[parameters('enableTelemetry')]"
                  },
                  "publicNetworkAccess": "[if(variables('privateNetworkingEnabled'), createObject('value', 'Disabled'), createObject('value', 'Enabled'))]",
                  "accessTier": {
                    "value": "Hot"
                  },
                  "allowBlobPublicAccess": {
                    "value": "[not(variables('privateNetworkingEnabled'))]"
                  },
                  "allowSharedKeyAccess": {
                    "value": false
                  },
                  "allowCrossTenantReplication": {
                    "value": false
                  },
                  "blobServices": {
                    "value": {
                      "deleteRetentionPolicyEnabled": true,
                      "deleteRetentionPolicyDays": 7,
                      "containerDeleteRetentionPolicyEnabled": true,
                      "containerDeleteRetentionPolicyDays": 7
                    }
                  },
                  "minimumTlsVersion": {
                    "value": "TLS1_2"
                  },
                  "networkAcls": {
                    "value": {
                      "defaultAction": "[if(variables('privateNetworkingEnabled'), 'Deny', 'Allow')]",
                      "bypass": "AzureServices"
                    }
                  },
                  "supportsHttpsTrafficOnly": {
                    "value": true
                  },
                  "privateEndpoints": "[if(variables('privateNetworkingEnabled'), createObject('value', createArray(createObject('privateDnsZoneGroup', createObject('privateDnsZoneGroupConfigs', createArray(createObject('privateDnsZoneResourceId', parameters('blobPrivateDnsZoneResourceId')))), 'service', 'blob', 'subnetResourceId', parameters('privateEndpointSubnetResourceId')))), createObject('value', createArray()))]",
                  "roleAssignments": {
                    "value": "[parameters('roleAssignments')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "languageVersion": "2.0",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.37.4.10188",
                      "templateHash": "16027397933856085759"
                    },
                    "name": "Storage Accounts",
                    "description": "This module deploys a Storage Account."
                  },
                  "definitions": {
                    "privateEndpointOutputType": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "metadata": {
                            "description": "The name of the private endpoint."
                          }
                        },
                        "resourceId": {
                          "type": "string",
                          "metadata": {
                            "description": "The resource ID of the private endpoint."
                          }
                        },
                        "groupId": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "The group Id for the private endpoint Group."
                          }
                        },
                        "customDnsConfigs": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "fqdn": {
                                "type": "string",
                                "nullable": true,
                                "metadata": {
                                  "description": "FQDN that resolves to private endpoint IP address."
                                }
                              },
                              "ipAddresses": {
                                "type": "array",
                                "items": {
                                  "type": "string"
                                },
                                "metadata": {
                                  "description": "A list of private IP addresses of the private endpoint."
                                }
                              }
                            }
                          },
                          "metadata": {
                            "description": "The custom DNS configurations of the private endpoint."
                          }
                        },
                        "networkInterfaceResourceIds": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "metadata": {
                            "description": "The IDs of the network interfaces associated with the private endpoint."
                          }
                        }
                      },
                      "metadata": {
                        "__bicep_export!": true
                      }
                    },
                    "networkAclsType": {
                      "type": "object",
                      "properties": {
                        "resourceAccessRules": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "tenantId": {
                                "type": "string",
                                "metadata": {
                                  "description": "Required. The ID of the tenant in which the resource resides in."
                                }
                              },
                              "resourceId": {
                                "type": "string",
                                "metadata": {
                                  "description": "Required. The resource ID of the target service. Can also contain a wildcard, if multiple services e.g. in a resource group should be included."
                                }
                              }
                            }
                          },
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Sets the resource access rules. Array entries must consist of \"tenantId\" and \"resourceId\" fields only."
                          }
                        },
                        "bypass": {
                          "type": "string",
                          "allowedValues": [
                            "AzureServices",
                            "AzureServices, Logging",
                            "AzureServices, Logging, Metrics",
                            "AzureServices, Metrics",
                            "Logging",
                            "Logging, Metrics",
                            "Metrics",
                            "None"
                          ],
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Specifies whether traffic is bypassed for Logging/Metrics/AzureServices. Possible values are any combination of Logging,Metrics,AzureServices (For example, \"Logging, Metrics\"), or None to bypass none of those traffics."
                          }
                        },
                        "virtualNetworkRules": {
                          "type": "array",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Sets the virtual network rules."
                          }
                        },
                        "ipRules": {
                          "type": "array",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Sets the IP ACL rules."
                          }
                        },
                        "defaultAction": {
                          "type": "string",
                          "allowedValues": [
                            "Allow",
                            "Deny"
                          ],
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Specifies the default action of allow or deny when no other rules match."
                          }
                        }
                      },
                      "metadata": {
                        "__bicep_export!": true
                      }
                    },
                    "secretsExportConfigurationType": {
                      "type": "object",
                      "properties": {
                        "keyVaultResourceId": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The key vault name where to store the keys and connection strings generated by the modules."
                          }
                        },
                        "accessKey1Name": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The accessKey1 secret name to create."
                          }
                        },
                        "connectionString1Name": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The connectionString1 secret name to create."
                          }
                        },
                        "accessKey2Name": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The accessKey2 secret name to create."
                          }
                        },
                        "connectionString2Name": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The connectionString2 secret name to create."
                          }
                        }
                      },
                      "metadata": {
                        "__bicep_export!": true
                      }
                    },
                    "localUserType": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The name of the local user used for SFTP Authentication."
                          }
                        },
                        "hasSharedKey": {
                          "type": "bool",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Indicates whether shared key exists. Set it to false to remove existing shared key."
                          }
                        },
                        "hasSshKey": {
                          "type": "bool",
                          "metadata": {
                            "description": "Required. Indicates whether SSH key exists. Set it to false to remove existing SSH key."
                          }
                        },
                        "hasSshPassword": {
                          "type": "bool",
                          "metadata": {
                            "description": "Required. Indicates whether SSH password exists. Set it to false to remove existing SSH password."
                          }
                        },
                        "homeDirectory": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The local user home directory."
                          }
                        },
                        "permissionScopes": {
                          "type": "array",
                          "items": {
                            "$ref": "#/definitions/permissionScopeType"
                          },
                          "metadata": {
                            "description": "Required. The permission scopes of the local user."
                          }
                        },
                        "sshAuthorizedKeys": {
                          "type": "array",
                          "items": {
                            "$ref": "#/definitions/sshAuthorizedKeyType"
                          },
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The local user SSH authorized keys for SFTP."
                          }
                        }
                      },
                      "metadata": {
                        "__bicep_export!": true
                      }
                    },
                    "_1.privateEndpointCustomDnsConfigType": {
                      "type": "object",
                      "properties": {
                        "fqdn": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. FQDN that resolves to private endpoint IP address."
                          }
                        },
                        "ipAddresses": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "metadata": {
                            "description": "Required. A list of private IP addresses of the private endpoint."
                          }
                        }
                      },
                      "metadata": {
                        "__bicep_imported_from!": {
                          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.6.0"
                        }
                      }
                    },
                    "_1.privateEndpointIpConfigurationType": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The name of the resource that is unique within a resource group."
                          }
                        },
                        "properties": {
                          "type": "object",
                          "properties": {
                            "groupId": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The ID of a group obtained from the remote resource that this private endpoint should connect to."
                              }
                            },
                            "memberName": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The member name of a group obtained from the remote resource that this private endpoint should connect to."
                              }
                            },
                            "privateIPAddress": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. A private IP address obtained from the private endpoint's subnet."
                              }
                            }
                          },
                          "metadata": {
                            "description": "Required. Properties of private endpoint IP configurations."
                          }
                        }
                      },
                      "metadata": {
                        "__bicep_imported_from!": {
                          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.6.0"
                        }
                      }
                    },
                    "_1.privateEndpointPrivateDnsZoneGroupType": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The name of the Private DNS Zone Group."
                          }
                        },
                        "privateDnsZoneGroupConfigs": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "name": {
                                "type": "string",
                                "nullable": true,
                                "metadata": {
                                  "description": "Optional. The name of the private DNS Zone Group config."
                                }
                              },
                              "privateDnsZoneResourceId": {
                                "type": "string",
                                "metadata": {
                                  "description": "Required. The resource id of the private DNS zone."
                                }
                              }
                            }
                          },
                          "metadata": {
                            "description": "Required. The private DNS Zone Groups to associate the Private Endpoint. A DNS Zone Group can support up to 5 DNS zones."
                          }
                        }
                      },
                      "metadata": {
                        "__bicep_imported_from!": {
                          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.6.0"
                        }
                      }
                    },
                    "_1.secretSetOutputType": {
                      "type": "object",
                      "properties": {
                        "secretResourceId": {
                          "type": "string",
                          "metadata": {
                            "description": "The resourceId of the exported secret."
                          }
                        },
                        "secretUri": {
                          "type": "string",
                          "metadata": {
                            "description": "The secret URI of the exported secret."
                          }
                        },
                        "secretUriWithVersion": {
                          "type": "string",
                          "metadata": {
                            "description": "The secret URI with version of the exported secret."
                          }
                        }
                      },
                      "metadata": {
                        "description": "An AVM-aligned type for the output of the secret set via the secrets export feature.",
                        "__bicep_imported_from!": {
                          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.6.0"
                        }
                      }
                    },
                    "customerManagedKeyWithAutoRotateType": {
                      "type": "object",
                      "properties": {
                        "keyVaultResourceId": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The resource ID of a key vault to reference a customer managed key for encryption from."
                          }
                        },
                        "keyName": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The name of the customer managed key to use for encryption."
                          }
                        },
                        "keyVersion": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The version of the customer managed key to reference for encryption. If not provided, using version as per 'autoRotationEnabled' setting."
                          }
                        },
                        "autoRotationEnabled": {
                          "type": "bool",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Enable or disable auto-rotating to the latest key version. Default is `true`. If set to `false`, the latest key version at the time of the deployment is used."
                          }
                        },
                        "userAssignedIdentityResourceId": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. User assigned identity to use when fetching the customer managed key. Required if no system assigned identity is available for use."
                          }
                        }
                      },
                      "metadata": {
                        "description": "An AVM-aligned type for a customer-managed key. To be used if the resource type supports auto-rotation of the customer-managed key.",
                        "__bicep_imported_from!": {
                          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.6.0"
                        }
                      }
                    },
                    "diagnosticSettingMetricsOnlyType": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The name of diagnostic setting."
                          }
                        },
                        "metricCategories": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "category": {
                                "type": "string",
                                "metadata": {
                                  "description": "Required. Name of a Diagnostic Metric category for a resource type this setting is applied to. Set to `AllMetrics` to collect all metrics."
                                }
                              },
                              "enabled": {
                                "type": "bool",
                                "nullable": true,
                                "metadata": {
                                  "description": "Optional. Enable or disable the category explicitly. Default is `true`."
                                }
                              }
                            }
                          },
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The name of metrics that will be streamed. \"allMetrics\" includes all possible metrics for the resource. Set to `[]` to disable metric collection."
                          }
                        },
                        "logAnalyticsDestinationType": {
                          "type": "string",
                          "allowedValues": [
                            "AzureDiagnostics",
                            "Dedicated"
                          ],
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. A string indicating whether the export to Log Analytics should use the default destination type, i.e. AzureDiagnostics, or use a destination type."
                          }
                        },
                        "workspaceResourceId": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Resource ID of the diagnostic log analytics workspace. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                          }
                        },
                        "storageAccountResourceId": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Resource ID of the diagnostic storage account. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                          }
                        },
                        "eventHubAuthorizationRuleResourceId": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
                          }
                        },
                        "eventHubName": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                          }
                        },
                        "marketplacePartnerResourceId": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The full ARM resource ID of the Marketplace resource to which you would like to send Diagnostic Logs."
                          }
                        }
                      },
                      "metadata": {
                        "description": "An AVM-aligned type for a diagnostic setting. To be used if only metrics are supported by the resource provider.",
                        "__bicep_imported_from!": {
                          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.6.0"
                        }
                      }
                    },
                    "lockType": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Specify the name of lock."
                          }
                        },
                        "kind": {
                          "type": "string",
                          "allowedValues": [
                            "CanNotDelete",
                            "None",
                            "ReadOnly"
                          ],
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Specify the type of lock."
                          }
                        },
                        "notes": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Specify the notes of the lock."
                          }
                        }
                      },
                      "metadata": {
                        "description": "An AVM-aligned type for a lock.",
                        "__bicep_imported_from!": {
                          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.6.0"
                        }
                      }
                    },
                    "managedIdentityAllType": {
                      "type": "object",
                      "properties": {
                        "systemAssigned": {
                          "type": "bool",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Enables system assigned managed identity on the resource."
                          }
                        },
                        "userAssignedResourceIds": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The resource ID(s) to assign to the resource. Required if a user assigned identity is used for encryption."
                          }
                        }
                      },
                      "metadata": {
                        "description": "An AVM-aligned type for a managed identity configuration. To be used if both a system-assigned & user-assigned identities are supported by the resource provider.",
                        "__bicep_imported_from!": {
                          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.6.0"
                        }
                      }
                    },
                    "permissionScopeType": {
                      "type": "object",
                      "properties": {
                        "permissions": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The permissions for the local user. Possible values include: Read (r), Write (w), Delete (d), List (l), and Create (c)."
                          }
                        },
                        "resourceName": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The name of resource, normally the container name or the file share name, used by the local user."
                          }
                        },
                        "service": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The service used by the local user, e.g. blob, file."
                          }
                        }
                      },
                      "metadata": {
                        "__bicep_imported_from!": {
                          "sourceTemplate": "local-user/main.bicep"
                        }
                      }
                    },
                    "privateEndpointMultiServiceType": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The name of the private endpoint."
                          }
                        },
                        "location": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The location to deploy the private endpoint to."
                          }
                        },
                        "privateLinkServiceConnectionName": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The name of the private link connection to create."
                          }
                        },
                        "service": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The subresource to deploy the private endpoint for. For example \"blob\", \"table\", \"queue\" or \"file\" for a Storage Account's Private Endpoints."
                          }
                        },
                        "subnetResourceId": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. Resource ID of the subnet where the endpoint needs to be created."
                          }
                        },
                        "resourceGroupResourceId": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The resource ID of the Resource Group the Private Endpoint will be created in. If not specified, the Resource Group of the provided Virtual Network Subnet is used."
                          }
                        },
                        "privateDnsZoneGroup": {
                          "$ref": "#/definitions/_1.privateEndpointPrivateDnsZoneGroupType",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The private DNS zone group to configure for the private endpoint."
                          }
                        },
                        "isManualConnection": {
                          "type": "bool",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. If Manual Private Link Connection is required."
                          }
                        },
                        "manualConnectionRequestMessage": {
                          "type": "string",
                          "nullable": true,
                          "maxLength": 140,
                          "metadata": {
                            "description": "Optional. A message passed to the owner of the remote resource with the manual connection request."
                          }
                        },
                        "customDnsConfigs": {
                          "type": "array",
                          "items": {
                            "$ref": "#/definitions/_1.privateEndpointCustomDnsConfigType"
                          },
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Custom DNS configurations."
                          }
                        },
                        "ipConfigurations": {
                          "type": "array",
                          "items": {
                            "$ref": "#/definitions/_1.privateEndpointIpConfigurationType"
                          },
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. A list of IP configurations of the private endpoint. This will be used to map to the First Party Service endpoints."
                          }
                        },
                        "applicationSecurityGroupResourceIds": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Application security groups in which the private endpoint IP configuration is included."
                          }
                        },
                        "customNetworkInterfaceName": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The custom name of the network interface attached to the private endpoint."
                          }
                        },
                        "lock": {
                          "$ref": "#/definitions/lockType",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Specify the type of lock."
                          }
                        },
                        "roleAssignments": {
                          "type": "array",
                          "items": {
                            "$ref": "#/definitions/roleAssignmentType"
                          },
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Array of role assignments to create."
                          }
                        },
                        "tags": {
                          "type": "object",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Tags to be applied on all resources/resource groups in this deployment."
                          }
                        },
                        "enableTelemetry": {
                          "type": "bool",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Enable/Disable usage telemetry for module."
                          }
                        }
                      },
                      "metadata": {
                        "description": "An AVM-aligned type for a private endpoint. To be used if the private endpoint's default service / groupId can NOT be assumed (i.e., for services that have more than one subresource, like Storage Account with Blob (blob, table, queue, file, ...).",
                        "__bicep_imported_from!": {
                          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.6.0"
                        }
                      }
                    },
                    "roleAssignmentType": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The name (as GUID) of the role assignment. If not provided, a GUID will be generated."
                          }
                        },
                        "roleDefinitionIdOrName": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                          }
                        },
                        "principalId": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                          }
                        },
                        "principalType": {
                          "type": "string",
                          "allowedValues": [
                            "Device",
                            "ForeignGroup",
                            "Group",
                            "ServicePrincipal",
                            "User"
                          ],
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The principal type of the assigned principal ID."
                          }
                        },
                        "description": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The description of the role assignment."
                          }
                        },
                        "condition": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                          }
                        },
                        "conditionVersion": {
                          "type": "string",
                          "allowedValues": [
                            "2.0"
                          ],
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Version of the condition."
                          }
                        },
                        "delegatedManagedIdentityResourceId": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The Resource Id of the delegated managed identity resource."
                          }
                        }
                      },
                      "metadata": {
                        "description": "An AVM-aligned type for a role assignment.",
                        "__bicep_imported_from!": {
                          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.6.0"
                        }
                      }
                    },
                    "secretsOutputType": {
                      "type": "object",
                      "properties": {},
                      "additionalProperties": {
                        "$ref": "#/definitions/_1.secretSetOutputType",
                        "metadata": {
                          "description": "An exported secret's references."
                        }
                      },
                      "metadata": {
                        "description": "A map of the exported secrets",
                        "__bicep_imported_from!": {
                          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.6.0"
                        }
                      }
                    },
                    "sshAuthorizedKeyType": {
                      "type": "object",
                      "properties": {
                        "description": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Description used to store the function/usage of the key."
                          }
                        },
                        "key": {
                          "type": "securestring",
                          "metadata": {
                            "description": "Required. SSH public key base64 encoded. The format should be: '{keyType} {keyData}', e.g. ssh-rsa AAAABBBB."
                          }
                        }
                      },
                      "metadata": {
                        "__bicep_imported_from!": {
                          "sourceTemplate": "local-user/main.bicep"
                        }
                      }
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "maxLength": 24,
                      "metadata": {
                        "description": "Required. Name of the Storage Account. Must be lower-case."
                      }
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]",
                      "metadata": {
                        "description": "Optional. Location for all resources."
                      }
                    },
                    "roleAssignments": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/roleAssignmentType"
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Array of role assignments to create."
                      }
                    },
                    "managedIdentities": {
                      "$ref": "#/definitions/managedIdentityAllType",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The managed identity definition for this resource."
                      }
                    },
                    "kind": {
                      "type": "string",
                      "defaultValue": "StorageV2",
                      "allowedValues": [
                        "Storage",
                        "StorageV2",
                        "BlobStorage",
                        "FileStorage",
                        "BlockBlobStorage"
                      ],
                      "metadata": {
                        "description": "Optional. Type of Storage Account to create."
                      }
                    },
                    "skuName": {
                      "type": "string",
                      "defaultValue": "Standard_GRS",
                      "allowedValues": [
                        "Standard_LRS",
                        "Standard_ZRS",
                        "Standard_GRS",
                        "Standard_GZRS",
                        "Standard_RAGRS",
                        "Standard_RAGZRS",
                        "StandardV2_LRS",
                        "StandardV2_ZRS",
                        "StandardV2_GRS",
                        "StandardV2_GZRS",
                        "Premium_LRS",
                        "Premium_ZRS",
                        "PremiumV2_LRS",
                        "PremiumV2_ZRS"
                      ],
                      "metadata": {
                        "description": "Optional. Storage Account Sku Name - note: certain V2 SKUs require the use of: kind = FileStorage."
                      }
                    },
                    "accessTier": {
                      "type": "string",
                      "defaultValue": "Hot",
                      "allowedValues": [
                        "Premium",
                        "Hot",
                        "Cool",
                        "Cold"
                      ],
                      "metadata": {
                        "description": "Conditional. Required if the Storage Account kind is set to BlobStorage. The access tier is used for billing. The \"Premium\" access tier is the default value for premium block blobs storage account type and it cannot be changed for the premium block blobs storage account type."
                      }
                    },
                    "largeFileSharesState": {
                      "type": "string",
                      "defaultValue": "Disabled",
                      "allowedValues": [
                        "Disabled",
                        "Enabled"
                      ],
                      "metadata": {
                        "description": "Optional. Allow large file shares if set to 'Enabled'. It cannot be disabled once it is enabled. Only supported on locally redundant and zone redundant file shares. It cannot be set on FileStorage storage accounts (storage accounts for premium file shares)."
                      }
                    },
                    "azureFilesIdentityBasedAuthentication": {
                      "type": "object",
                      "metadata": {
                        "__bicep_resource_derived_type!": {
                          "source": "Microsoft.Storage/storageAccounts@2024-01-01#properties/properties/properties/azureFilesIdentityBasedAuthentication"
                        },
                        "description": "Optional. Provides the identity based authentication settings for Azure Files."
                      },
                      "nullable": true
                    },
                    "defaultToOAuthAuthentication": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. A boolean flag which indicates whether the default authentication is OAuth or not."
                      }
                    },
                    "allowSharedKeyAccess": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. Indicates whether the storage account permits requests to be authorized with the account access key via Shared Key. If false, then all requests, including shared access signatures, must be authorized with Azure Active Directory (Azure AD). The default value is null, which is equivalent to true."
                      }
                    },
                    "privateEndpoints": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/privateEndpointMultiServiceType"
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Configuration details for private endpoints. For security reasons, it is recommended to use private endpoints whenever possible."
                      }
                    },
                    "managementPolicyRules": {
                      "type": "array",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The Storage Account ManagementPolicies Rules."
                      }
                    },
                    "networkAcls": {
                      "$ref": "#/definitions/networkAclsType",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Networks ACLs, this value contains IPs to whitelist and/or Subnet information. If in use, bypass needs to be supplied. For security reasons, it is recommended to set the DefaultAction Deny."
                      }
                    },
                    "requireInfrastructureEncryption": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. A Boolean indicating whether or not the service applies a secondary layer of encryption with platform managed keys for data at rest. For security reasons, it is recommended to set it to true."
                      }
                    },
                    "allowCrossTenantReplication": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. Allow or disallow cross AAD tenant object replication."
                      }
                    },
                    "customDomainName": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Sets the custom domain name assigned to the storage account. Name is the CNAME source."
                      }
                    },
                    "customDomainUseSubDomainName": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. Indicates whether indirect CName validation is enabled. This should only be set on updates."
                      }
                    },
                    "dnsEndpointType": {
                      "type": "string",
                      "nullable": true,
                      "allowedValues": [
                        "AzureDnsZone",
                        "Standard"
                      ],
                      "metadata": {
                        "description": "Optional. Allows you to specify the type of endpoint. Set this to AzureDNSZone to create a large number of accounts in a single subscription, which creates accounts in an Azure DNS Zone and the endpoint URL will have an alphanumeric DNS Zone identifier."
                      }
                    },
                    "blobServices": {
                      "type": "object",
                      "defaultValue": "[if(not(equals(parameters('kind'), 'FileStorage')), createObject('containerDeleteRetentionPolicyEnabled', true(), 'containerDeleteRetentionPolicyDays', 7, 'deleteRetentionPolicyEnabled', true(), 'deleteRetentionPolicyDays', 6), createObject())]",
                      "metadata": {
                        "description": "Optional. Blob service and containers to deploy."
                      }
                    },
                    "fileServices": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. File service and shares to deploy."
                      }
                    },
                    "queueServices": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Queue service and queues to create."
                      }
                    },
                    "tableServices": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Table service and tables to create."
                      }
                    },
                    "allowBlobPublicAccess": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. Indicates whether public access is enabled for all blobs or containers in the storage account. For security reasons, it is recommended to set it to false."
                      }
                    },
                    "minimumTlsVersion": {
                      "type": "string",
                      "defaultValue": "TLS1_2",
                      "allowedValues": [
                        "TLS1_2"
                      ],
                      "metadata": {
                        "description": "Optional. Set the minimum TLS version on request to storage. The TLS versions 1.0 and 1.1 are deprecated and not supported anymore."
                      }
                    },
                    "enableHierarchicalNamespace": {
                      "type": "bool",
                      "nullable": true,
                      "metadata": {
                        "description": "Conditional. If true, enables Hierarchical Namespace for the storage account. Required if enableSftp or enableNfsV3 is set to true."
                      }
                    },
                    "enableSftp": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. If true, enables Secure File Transfer Protocol for the storage account. Requires enableHierarchicalNamespace to be true."
                      }
                    },
                    "localUsers": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/localUserType"
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Local users to deploy for SFTP authentication."
                      }
                    },
                    "isLocalUserEnabled": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. Enables local users feature, if set to true."
                      }
                    },
                    "enableNfsV3": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. If true, enables NFS 3.0 support for the storage account. Requires enableHierarchicalNamespace to be true."
                      }
                    },
                    "diagnosticSettings": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/diagnosticSettingMetricsOnlyType"
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The diagnostic settings of the service."
                      }
                    },
                    "lock": {
                      "$ref": "#/definitions/lockType",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The lock settings of the service."
                      }
                    },
                    "tags": {
                      "type": "object",
                      "metadata": {
                        "__bicep_resource_derived_type!": {
                          "source": "Microsoft.Storage/storageAccounts@2024-01-01#properties/tags"
                        },
                        "description": "Optional. Tags of the resource."
                      },
                      "nullable": true
                    },
                    "enableTelemetry": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. Enable/Disable usage telemetry for module."
                      }
                    },
                    "allowedCopyScope": {
                      "type": "string",
                      "nullable": true,
                      "allowedValues": [
                        "AAD",
                        "PrivateLink"
                      ],
                      "metadata": {
                        "description": "Optional. Restrict copy to and from Storage Accounts within an AAD tenant or with Private Links to the same VNet."
                      }
                    },
                    "publicNetworkAccess": {
                      "type": "string",
                      "nullable": true,
                      "allowedValues": [
                        "Enabled",
                        "Disabled"
                      ],
                      "metadata": {
                        "description": "Optional. Whether or not public network access is allowed for this resource. For security reasons it should be disabled. If not specified, it will be disabled by default if private endpoints are set and networkAcls are not set."
                      }
                    },
                    "supportsHttpsTrafficOnly": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. Allows HTTPS traffic only to storage service if sets to true."
                      }
                    },
                    "customerManagedKey": {
                      "$ref": "#/definitions/customerManagedKeyWithAutoRotateType",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The customer managed key definition."
                      }
                    },
                    "sasExpirationPeriod": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. The SAS expiration period. DD.HH:MM:SS."
                      }
                    },
                    "sasExpirationAction": {
                      "type": "string",
                      "defaultValue": "Log",
                      "allowedValues": [
                        "Block",
                        "Log"
                      ],
                      "metadata": {
                        "description": "Optional. The SAS expiration action. Allowed values are Block and Log."
                      }
                    },
                    "keyType": {
                      "type": "string",
                      "nullable": true,
                      "allowedValues": [
                        "Account",
                        "Service"
                      ],
                      "metadata": {
                        "description": "Optional. The keyType to use with Queue & Table services."
                      }
                    },
                    "secretsExportConfiguration": {
                      "$ref": "#/definitions/secretsExportConfigurationType",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Key vault reference and secret settings for the module's secrets export."
                      }
                    }
                  },
                  "variables": {
                    "copy": [
                      {
                        "name": "formattedRoleAssignments",
                        "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]",
                        "input": "[union(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')], createObject('roleDefinitionId', coalesce(tryGet(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName), if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName)))))]"
                      }
                    ],
                    "enableReferencedModulesTelemetry": false,
                    "supportsBlobService": "[or(or(or(equals(parameters('kind'), 'BlockBlobStorage'), equals(parameters('kind'), 'BlobStorage')), equals(parameters('kind'), 'StorageV2')), equals(parameters('kind'), 'Storage'))]",
                    "supportsFileService": "[or(or(equals(parameters('kind'), 'FileStorage'), equals(parameters('kind'), 'StorageV2')), equals(parameters('kind'), 'Storage'))]",
                    "formattedUserAssignedIdentities": "[reduce(map(coalesce(tryGet(parameters('managedIdentities'), 'userAssignedResourceIds'), createArray()), lambda('id', createObject(format('{0}', lambdaVariables('id')), createObject()))), createObject(), lambda('cur', 'next', union(lambdaVariables('cur'), lambdaVariables('next'))))]",
                    "identity": "[if(not(empty(parameters('managedIdentities'))), createObject('type', if(coalesce(tryGet(parameters('managedIdentities'), 'systemAssigned'), false()), if(not(empty(coalesce(tryGet(parameters('managedIdentities'), 'userAssignedResourceIds'), createObject()))), 'SystemAssigned,UserAssigned', 'SystemAssigned'), if(not(empty(coalesce(tryGet(parameters('managedIdentities'), 'userAssignedResourceIds'), createObject()))), 'UserAssigned', 'None')), 'userAssignedIdentities', if(not(empty(variables('formattedUserAssignedIdentities'))), variables('formattedUserAssignedIdentities'), null())), null())]",
                    "builtInRoleNames": {
                      "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                      "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                      "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                      "Reader and Data Access": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'c12c1c16-33a1-487b-954d-41c89c60f349')]",
                      "Role Based Access Control Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
                      "Storage Account Backup Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'e5e2a7ff-d759-4cd2-bb51-3152d37e2eb1')]",
                      "Storage Account Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '17d1049b-9a84-46fb-8f53-869881c3d3ab')]",
                      "Storage Account Key Operator Service Role": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '81a9662b-bebf-436f-a333-f67b29880f12')]",
                      "Storage Blob Data Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'ba92f5b4-2d11-453d-a403-e96b0029c9fe')]",
                      "Storage Blob Data Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b7e6dc6d-f1e8-4753-8033-0f276bb0955b')]",
                      "Storage Blob Data Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '2a2b9908-6ea1-4ae2-8e65-a410df84e7d1')]",
                      "Storage Blob Delegator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'db58b8e5-c6ad-4a2a-8342-4190687cbf4a')]",
                      "Storage File Data Privileged Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '69566ab7-960f-475b-8e7c-b3118f30c6bd')]",
                      "Storage File Data Privileged Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b8eda974-7b85-4f76-af95-65846b26df6d')]",
                      "Storage File Data SMB Share Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '0c867c2a-1d8c-454a-a3db-ab2ea1bdc8bb')]",
                      "Storage File Data SMB Share Elevated Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'a7264617-510b-434b-a828-9731dc254ea7')]",
                      "Storage File Data SMB Share Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'aba4ae5f-2193-4029-9191-0cb91df5e314')]",
                      "Storage Queue Data Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '974c5e8b-45b9-4653-ba55-5f855dd0fb88')]",
                      "Storage Queue Data Message Processor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8a0f0c08-91a1-4084-bc3d-661d67233fed')]",
                      "Storage Queue Data Message Sender": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'c6a89b2d-59bc-44d0-9896-0f6e12d7b80a')]",
                      "Storage Queue Data Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '19e7f393-937e-4f77-808e-94535e297925')]",
                      "Storage Table Data Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '0a9a7e1f-b9d0-4cc4-a60d-0319b160aaa3')]",
                      "Storage Table Data Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '76199698-9eea-4c19-bc75-cec21354c6b6')]",
                      "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
                    }
                  },
                  "resources": {
                    "cMKKeyVault::cMKKey": {
                      "condition": "[and(not(empty(tryGet(parameters('customerManagedKey'), 'keyVaultResourceId'))), and(not(empty(tryGet(parameters('customerManagedKey'), 'keyVaultResourceId'))), not(empty(tryGet(parameters('customerManagedKey'), 'keyName')))))]",
                      "existing": true,
                      "type": "Microsoft.KeyVault/vaults/keys",
                      "apiVersion": "2024-11-01",
                      "subscriptionId": "[split(tryGet(parameters('customerManagedKey'), 'keyVaultResourceId'), '/')[2]]",
                      "resourceGroup": "[split(tryGet(parameters('customerManagedKey'), 'keyVaultResourceId'), '/')[4]]",
                      "name": "[format('{0}/{1}', last(split(tryGet(parameters('customerManagedKey'), 'keyVaultResourceId'), '/')), tryGet(parameters('customerManagedKey'), 'keyName'))]"
                    },
                    "avmTelemetry": {
                      "condition": "[parameters('enableTelemetry')]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2024-03-01",
                      "name": "[format('46d3xbcp.res.storage-storageaccount.{0}.{1}', replace('0.26.0', '.', '-'), substring(uniqueString(deployment().name, parameters('location')), 0, 4))]",
                      "properties": {
                        "mode": "Incremental",
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "resources": [],
                          "outputs": {
                            "telemetry": {
                              "type": "String",
                              "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                            }
                          }
                        }
                      }
                    },
                    "cMKKeyVault": {
                      "condition": "[not(empty(tryGet(parameters('customerManagedKey'), 'keyVaultResourceId')))]",
                      "existing": true,
                      "type": "Microsoft.KeyVault/vaults",
                      "apiVersion": "2024-11-01",
                      "subscriptionId": "[split(tryGet(parameters('customerManagedKey'), 'keyVaultResourceId'), '/')[2]]",
                      "resourceGroup": "[split(tryGet(parameters('customerManagedKey'), 'keyVaultResourceId'), '/')[4]]",
                      "name": "[last(split(tryGet(parameters('customerManagedKey'), 'keyVaultResourceId'), '/'))]"
                    },
                    "cMKUserAssignedIdentity": {
                      "condition": "[not(empty(tryGet(parameters('customerManagedKey'), 'userAssignedIdentityResourceId')))]",
                      "existing": true,
                      "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
                      "apiVersion": "2024-11-30",
                      "subscriptionId": "[split(tryGet(parameters('customerManagedKey'), 'userAssignedIdentityResourceId'), '/')[2]]",
                      "resourceGroup": "[split(tryGet(parameters('customerManagedKey'), 'userAssignedIdentityResourceId'), '/')[4]]",
                      "name": "[last(split(tryGet(parameters('customerManagedKey'), 'userAssignedIdentityResourceId'), '/'))]"
                    },
                    "storageAccount": {
                      "type": "Microsoft.Storage/storageAccounts",
                      "apiVersion": "2024-01-01",
                      "name": "[parameters('name')]",
                      "location": "[parameters('location')]",
                      "kind": "[parameters('kind')]",
                      "sku": {
                        "name": "[parameters('skuName')]"
                      },
                      "identity": "[variables('identity')]",
                      "tags": "[parameters('tags')]",
                      "properties": "[shallowMerge(createArray(createObject('allowSharedKeyAccess', parameters('allowSharedKeyAccess'), 'defaultToOAuthAuthentication', parameters('defaultToOAuthAuthentication'), 'allowCrossTenantReplication', parameters('allowCrossTenantReplication'), 'allowedCopyScope', parameters('allowedCopyScope'), 'customDomain', createObject('name', parameters('customDomainName'), 'useSubDomainName', parameters('customDomainUseSubDomainName')), 'dnsEndpointType', parameters('dnsEndpointType'), 'isLocalUserEnabled', parameters('isLocalUserEnabled'), 'encryption', union(createObject('keySource', if(not(empty(parameters('customerManagedKey'))), 'Microsoft.Keyvault', 'Microsoft.Storage'), 'services', createObject('blob', if(variables('supportsBlobService'), createObject('enabled', true()), null()), 'file', if(variables('supportsFileService'), createObject('enabled', true()), null()), 'table', createObject('enabled', true(), 'keyType', parameters('keyType')), 'queue', createObject('enabled', true(), 'keyType', parameters('keyType'))), 'keyvaultproperties', if(not(empty(parameters('customerManagedKey'))), createObject('keyname', parameters('customerManagedKey').keyName, 'keyvaulturi', reference('cMKKeyVault').vaultUri, 'keyversion', if(not(empty(tryGet(parameters('customerManagedKey'), 'keyVersion'))), parameters('customerManagedKey').keyVersion, if(coalesce(tryGet(parameters('customerManagedKey'), 'autoRotationEnabled'), true()), null(), last(split(reference('cMKKeyVault::cMKKey').keyUriWithVersion, '/'))))), null()), 'identity', createObject('userAssignedIdentity', if(not(empty(tryGet(parameters('customerManagedKey'), 'userAssignedIdentityResourceId'))), extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(tryGet(parameters('customerManagedKey'), 'userAssignedIdentityResourceId'), '/')[2], split(tryGet(parameters('customerManagedKey'), 'userAssignedIdentityResourceId'), '/')[4]), 'Microsoft.ManagedIdentity/userAssignedIdentities', last(split(tryGet(parameters('customerManagedKey'), 'userAssignedIdentityResourceId'), '/'))), null()))), if(parameters('requireInfrastructureEncryption'), createObject('requireInfrastructureEncryption', if(not(equals(parameters('kind'), 'Storage')), parameters('requireInfrastructureEncryption'), null())), createObject())), 'accessTier', if(and(not(equals(parameters('kind'), 'Storage')), not(equals(parameters('kind'), 'BlockBlobStorage'))), parameters('accessTier'), null()), 'sasPolicy', if(not(empty(parameters('sasExpirationPeriod'))), createObject('expirationAction', parameters('sasExpirationAction'), 'sasExpirationPeriod', parameters('sasExpirationPeriod')), null()), 'supportsHttpsTrafficOnly', parameters('supportsHttpsTrafficOnly'), 'isSftpEnabled', parameters('enableSftp'), 'isNfsV3Enabled', if(parameters('enableNfsV3'), parameters('enableNfsV3'), ''), 'largeFileSharesState', if(or(equals(parameters('skuName'), 'Standard_LRS'), equals(parameters('skuName'), 'Standard_ZRS')), parameters('largeFileSharesState'), null()), 'minimumTlsVersion', parameters('minimumTlsVersion'), 'networkAcls', if(not(empty(parameters('networkAcls'))), union(createObject('resourceAccessRules', tryGet(parameters('networkAcls'), 'resourceAccessRules'), 'defaultAction', coalesce(tryGet(parameters('networkAcls'), 'defaultAction'), 'Deny'), 'virtualNetworkRules', tryGet(parameters('networkAcls'), 'virtualNetworkRules'), 'ipRules', tryGet(parameters('networkAcls'), 'ipRules')), if(contains(parameters('networkAcls'), 'bypass'), createObject('bypass', tryGet(parameters('networkAcls'), 'bypass')), createObject())), createObject('bypass', 'AzureServices', 'defaultAction', 'Deny')), 'allowBlobPublicAccess', parameters('allowBlobPublicAccess'), 'publicNetworkAccess', if(not(empty(parameters('publicNetworkAccess'))), parameters('publicNetworkAccess'), if(and(not(empty(parameters('privateEndpoints'))), empty(parameters('networkAcls'))), 'Disabled', null()))), if(not(empty(parameters('azureFilesIdentityBasedAuthentication'))), createObject('azureFilesIdentityBasedAuthentication', parameters('azureFilesIdentityBasedAuthentication')), createObject()), if(not(equals(parameters('enableHierarchicalNamespace'), null())), createObject('isHnsEnabled', parameters('enableHierarchicalNamespace')), createObject())))]",
                      "dependsOn": [
                        "cMKKeyVault",
                        "cMKKeyVault::cMKKey"
                      ]
                    },
                    "storageAccount_diagnosticSettings": {
                      "copy": {
                        "name": "storageAccount_diagnosticSettings",
                        "count": "[length(coalesce(parameters('diagnosticSettings'), createArray()))]"
                      },
                      "type": "Microsoft.Insights/diagnosticSettings",
                      "apiVersion": "2021-05-01-preview",
                      "scope": "[format('Microsoft.Storage/storageAccounts/{0}', parameters('name'))]",
                      "name": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'name'), format('{0}-diagnosticSettings', parameters('name')))]",
                      "properties": {
                        "copy": [
                          {
                            "name": "metrics",
                            "count": "[length(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics'))))]",
                            "input": {
                              "category": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics')))[copyIndex('metrics')].category]",
                              "enabled": "[coalesce(tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics')))[copyIndex('metrics')], 'enabled'), true())]",
                              "timeGrain": null
                            }
                          }
                        ],
                        "storageAccountId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'storageAccountResourceId')]",
                        "workspaceId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'workspaceResourceId')]",
                        "eventHubAuthorizationRuleId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubAuthorizationRuleResourceId')]",
                        "eventHubName": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubName')]",
                        "marketplacePartnerId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'marketplacePartnerResourceId')]",
                        "logAnalyticsDestinationType": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logAnalyticsDestinationType')]"
                      },
                      "dependsOn": [
                        "storageAccount"
                      ]
                    },
                    "storageAccount_lock": {
                      "condition": "[and(not(empty(coalesce(parameters('lock'), createObject()))), not(equals(tryGet(parameters('lock'), 'kind'), 'None')))]",
                      "type": "Microsoft.Authorization/locks",
                      "apiVersion": "2020-05-01",
                      "scope": "[format('Microsoft.Storage/storageAccounts/{0}', parameters('name'))]",
                      "name": "[coalesce(tryGet(parameters('lock'), 'name'), format('lock-{0}', parameters('name')))]",
                      "properties": {
                        "level": "[coalesce(tryGet(parameters('lock'), 'kind'), '')]",
                        "notes": "[coalesce(tryGet(parameters('lock'), 'notes'), if(equals(tryGet(parameters('lock'), 'kind'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot delete or modify the resource or child resources.'))]"
                      },
                      "dependsOn": [
                        "storageAccount"
                      ]
                    },
                    "storageAccount_roleAssignments": {
                      "copy": {
                        "name": "storageAccount_roleAssignments",
                        "count": "[length(coalesce(variables('formattedRoleAssignments'), createArray()))]"
                      },
                      "type": "Microsoft.Authorization/roleAssignments",
                      "apiVersion": "2022-04-01",
                      "scope": "[format('Microsoft.Storage/storageAccounts/{0}', parameters('name'))]",
                      "name": "[coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'name'), guid(resourceId('Microsoft.Storage/storageAccounts', parameters('name')), coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId, coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId))]",
                      "properties": {
                        "roleDefinitionId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId]",
                        "principalId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId]",
                        "description": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'description')]",
                        "principalType": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'principalType')]",
                        "condition": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition')]",
                        "conditionVersion": "[if(not(empty(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                        "delegatedManagedIdentityResourceId": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                      },
                      "dependsOn": [
                        "storageAccount"
                      ]
                    },
                    "storageAccount_privateEndpoints": {
                      "copy": {
                        "name": "storageAccount_privateEndpoints",
                        "count": "[length(coalesce(parameters('privateEndpoints'), createArray()))]"
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('{0}-sa-PrivateEndpoint-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                      "subscriptionId": "[split(coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'resourceGroupResourceId'), resourceGroup().id), '/')[2]]",
                      "resourceGroup": "[split(coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'resourceGroupResourceId'), resourceGroup().id), '/')[4]]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "name": {
                            "value": "[coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'name'), format('pep-{0}-{1}-{2}', last(split(resourceId('Microsoft.Storage/storageAccounts', parameters('name')), '/')), coalesce(parameters('privateEndpoints'), createArray())[copyIndex()].service, copyIndex()))]"
                          },
                          "privateLinkServiceConnections": "[if(not(equals(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'isManualConnection'), true())), createObject('value', createArray(createObject('name', coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'privateLinkServiceConnectionName'), format('{0}-{1}-{2}', last(split(resourceId('Microsoft.Storage/storageAccounts', parameters('name')), '/')), coalesce(parameters('privateEndpoints'), createArray())[copyIndex()].service, copyIndex())), 'properties', createObject('privateLinkServiceId', resourceId('Microsoft.Storage/storageAccounts', parameters('name')), 'groupIds', createArray(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()].service))))), createObject('value', null()))]",
                          "manualPrivateLinkServiceConnections": "[if(equals(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'isManualConnection'), true()), createObject('value', createArray(createObject('name', coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'privateLinkServiceConnectionName'), format('{0}-{1}-{2}', last(split(resourceId('Microsoft.Storage/storageAccounts', parameters('name')), '/')), coalesce(parameters('privateEndpoints'), createArray())[copyIndex()].service, copyIndex())), 'properties', createObject('privateLinkServiceId', resourceId('Microsoft.Storage/storageAccounts', parameters('name')), 'groupIds', createArray(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()].service), 'requestMessage', coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'manualConnectionRequestMessage'), 'Manual approval required.'))))), createObject('value', null()))]",
                          "subnetResourceId": {
                            "value": "[coalesce(parameters('privateEndpoints'), createArray())[copyIndex()].subnetResourceId]"
                          },
                          "enableTelemetry": {
                            "value": "[variables('enableReferencedModulesTelemetry')]"
                          },
                          "location": {
                            "value": "[coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'location'), reference(split(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()].subnetResourceId, '/subnets/')[0], '2020-06-01', 'Full').location)]"
                          },
                          "lock": {
                            "value": "[coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'lock'), parameters('lock'))]"
                          },
                          "privateDnsZoneGroup": {
                            "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'privateDnsZoneGroup')]"
                          },
                          "roleAssignments": {
                            "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'roleAssignments')]"
                          },
                          "tags": {
                            "value": "[coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'tags'), parameters('tags'))]"
                          },
                          "customDnsConfigs": {
                            "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'customDnsConfigs')]"
                          },
                          "ipConfigurations": {
                            "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'ipConfigurations')]"
                          },
                          "applicationSecurityGroupResourceIds": {
                            "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'applicationSecurityGroupResourceIds')]"
                          },
                          "customNetworkInterfaceName": {
                            "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'customNetworkInterfaceName')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "languageVersion": "2.0",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.34.44.8038",
                              "templateHash": "12389807800450456797"
                            },
                            "name": "Private Endpoints",
                            "description": "This module deploys a Private Endpoint."
                          },
                          "definitions": {
                            "privateDnsZoneGroupType": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The name of the Private DNS Zone Group."
                                  }
                                },
                                "privateDnsZoneGroupConfigs": {
                                  "type": "array",
                                  "items": {
                                    "$ref": "#/definitions/privateDnsZoneGroupConfigType"
                                  },
                                  "metadata": {
                                    "description": "Required. The private DNS zone groups to associate the private endpoint. A DNS zone group can support up to 5 DNS zones."
                                  }
                                }
                              },
                              "metadata": {
                                "__bicep_export!": true
                              }
                            },
                            "ipConfigurationType": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. The name of the resource that is unique within a resource group."
                                  }
                                },
                                "properties": {
                                  "type": "object",
                                  "properties": {
                                    "groupId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The ID of a group obtained from the remote resource that this private endpoint should connect to. If used with private link service connection, this property must be defined as empty string."
                                      }
                                    },
                                    "memberName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The member name of a group obtained from the remote resource that this private endpoint should connect to. If used with private link service connection, this property must be defined as empty string."
                                      }
                                    },
                                    "privateIPAddress": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. A private IP address obtained from the private endpoint's subnet."
                                      }
                                    }
                                  },
                                  "metadata": {
                                    "description": "Required. Properties of private endpoint IP configurations."
                                  }
                                }
                              },
                              "metadata": {
                                "__bicep_export!": true
                              }
                            },
                            "privateLinkServiceConnectionType": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. The name of the private link service connection."
                                  }
                                },
                                "properties": {
                                  "type": "object",
                                  "properties": {
                                    "groupIds": {
                                      "type": "array",
                                      "items": {
                                        "type": "string"
                                      },
                                      "metadata": {
                                        "description": "Required. The ID of a group obtained from the remote resource that this private endpoint should connect to. If used with private link service connection, this property must be defined as empty string array `[]`."
                                      }
                                    },
                                    "privateLinkServiceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The resource id of private link service."
                                      }
                                    },
                                    "requestMessage": {
                                      "type": "string",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. A message passed to the owner of the remote resource with this connection request. Restricted to 140 chars."
                                      }
                                    }
                                  },
                                  "metadata": {
                                    "description": "Required. Properties of private link service connection."
                                  }
                                }
                              },
                              "metadata": {
                                "__bicep_export!": true
                              }
                            },
                            "customDnsConfigType": {
                              "type": "object",
                              "properties": {
                                "fqdn": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. FQDN that resolves to private endpoint IP address."
                                  }
                                },
                                "ipAddresses": {
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  },
                                  "metadata": {
                                    "description": "Required. A list of private IP addresses of the private endpoint."
                                  }
                                }
                              },
                              "metadata": {
                                "__bicep_export!": true
                              }
                            },
                            "lockType": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Specify the name of lock."
                                  }
                                },
                                "kind": {
                                  "type": "string",
                                  "allowedValues": [
                                    "CanNotDelete",
                                    "None",
                                    "ReadOnly"
                                  ],
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Specify the type of lock."
                                  }
                                }
                              },
                              "metadata": {
                                "description": "An AVM-aligned type for a lock.",
                                "__bicep_imported_from!": {
                                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
                                }
                              }
                            },
                            "privateDnsZoneGroupConfigType": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The name of the private DNS zone group config."
                                  }
                                },
                                "privateDnsZoneResourceId": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. The resource id of the private DNS zone."
                                  }
                                }
                              },
                              "metadata": {
                                "__bicep_imported_from!": {
                                  "sourceTemplate": "private-dns-zone-group/main.bicep"
                                }
                              }
                            },
                            "roleAssignmentType": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The name (as GUID) of the role assignment. If not provided, a GUID will be generated."
                                  }
                                },
                                "roleDefinitionIdOrName": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                                  }
                                },
                                "principalId": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                                  }
                                },
                                "principalType": {
                                  "type": "string",
                                  "allowedValues": [
                                    "Device",
                                    "ForeignGroup",
                                    "Group",
                                    "ServicePrincipal",
                                    "User"
                                  ],
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The principal type of the assigned principal ID."
                                  }
                                },
                                "description": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The description of the role assignment."
                                  }
                                },
                                "condition": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                                  }
                                },
                                "conditionVersion": {
                                  "type": "string",
                                  "allowedValues": [
                                    "2.0"
                                  ],
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Version of the condition."
                                  }
                                },
                                "delegatedManagedIdentityResourceId": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The Resource Id of the delegated managed identity resource."
                                  }
                                }
                              },
                              "metadata": {
                                "description": "An AVM-aligned type for a role assignment.",
                                "__bicep_imported_from!": {
                                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
                                }
                              }
                            }
                          },
                          "parameters": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. Name of the private endpoint resource to create."
                              }
                            },
                            "subnetResourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. Resource ID of the subnet where the endpoint needs to be created."
                              }
                            },
                            "applicationSecurityGroupResourceIds": {
                              "type": "array",
                              "items": {
                                "type": "string"
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Application security groups in which the private endpoint IP configuration is included."
                              }
                            },
                            "customNetworkInterfaceName": {
                              "type": "string",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The custom name of the network interface attached to the private endpoint."
                              }
                            },
                            "ipConfigurations": {
                              "type": "array",
                              "items": {
                                "$ref": "#/definitions/ipConfigurationType"
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. A list of IP configurations of the private endpoint. This will be used to map to the First Party Service endpoints."
                              }
                            },
                            "privateDnsZoneGroup": {
                              "$ref": "#/definitions/privateDnsZoneGroupType",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The private DNS zone group to configure for the private endpoint."
                              }
                            },
                            "location": {
                              "type": "string",
                              "defaultValue": "[resourceGroup().location]",
                              "metadata": {
                                "description": "Optional. Location for all Resources."
                              }
                            },
                            "lock": {
                              "$ref": "#/definitions/lockType",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The lock settings of the service."
                              }
                            },
                            "roleAssignments": {
                              "type": "array",
                              "items": {
                                "$ref": "#/definitions/roleAssignmentType"
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Array of role assignments to create."
                              }
                            },
                            "tags": {
                              "type": "object",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Tags to be applied on all resources/resource groups in this deployment."
                              }
                            },
                            "customDnsConfigs": {
                              "type": "array",
                              "items": {
                                "$ref": "#/definitions/customDnsConfigType"
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Custom DNS configurations."
                              }
                            },
                            "manualPrivateLinkServiceConnections": {
                              "type": "array",
                              "items": {
                                "$ref": "#/definitions/privateLinkServiceConnectionType"
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Conditional. A grouping of information about the connection to the remote resource. Used when the network admin does not have access to approve connections to the remote resource. Required if `privateLinkServiceConnections` is empty."
                              }
                            },
                            "privateLinkServiceConnections": {
                              "type": "array",
                              "items": {
                                "$ref": "#/definitions/privateLinkServiceConnectionType"
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Conditional. A grouping of information about the connection to the remote resource. Required if `manualPrivateLinkServiceConnections` is empty."
                              }
                            },
                            "enableTelemetry": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Optional. Enable/Disable usage telemetry for module."
                              }
                            }
                          },
                          "variables": {
                            "copy": [
                              {
                                "name": "formattedRoleAssignments",
                                "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]",
                                "input": "[union(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')], createObject('roleDefinitionId', coalesce(tryGet(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName), if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName)))))]"
                              }
                            ],
                            "builtInRoleNames": {
                              "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                              "DNS Resolver Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '0f2ebee7-ffd4-4fc0-b3b7-664099fdad5d')]",
                              "DNS Zone Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'befefa01-2a29-4197-83a8-272ff33ce314')]",
                              "Domain Services Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'eeaeda52-9324-47f6-8069-5d5bade478b2')]",
                              "Domain Services Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '361898ef-9ed1-48c2-849c-a832951106bb')]",
                              "Network Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4d97b98b-1d4f-4787-a291-c67834d212e7')]",
                              "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                              "Private DNS Zone Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b12aa53e-6015-4669-85d0-8515ebb3ae7f')]",
                              "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                              "Role Based Access Control Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]"
                            }
                          },
                          "resources": {
                            "avmTelemetry": {
                              "condition": "[parameters('enableTelemetry')]",
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2024-03-01",
                              "name": "[format('46d3xbcp.res.network-privateendpoint.{0}.{1}', replace('0.11.0', '.', '-'), substring(uniqueString(deployment().name, parameters('location')), 0, 4))]",
                              "properties": {
                                "mode": "Incremental",
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "resources": [],
                                  "outputs": {
                                    "telemetry": {
                                      "type": "String",
                                      "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                                    }
                                  }
                                }
                              }
                            },
                            "privateEndpoint": {
                              "type": "Microsoft.Network/privateEndpoints",
                              "apiVersion": "2024-05-01",
                              "name": "[parameters('name')]",
                              "location": "[parameters('location')]",
                              "tags": "[parameters('tags')]",
                              "properties": {
                                "copy": [
                                  {
                                    "name": "applicationSecurityGroups",
                                    "count": "[length(coalesce(parameters('applicationSecurityGroupResourceIds'), createArray()))]",
                                    "input": {
                                      "id": "[coalesce(parameters('applicationSecurityGroupResourceIds'), createArray())[copyIndex('applicationSecurityGroups')]]"
                                    }
                                  }
                                ],
                                "customDnsConfigs": "[coalesce(parameters('customDnsConfigs'), createArray())]",
                                "customNetworkInterfaceName": "[coalesce(parameters('customNetworkInterfaceName'), '')]",
                                "ipConfigurations": "[coalesce(parameters('ipConfigurations'), createArray())]",
                                "manualPrivateLinkServiceConnections": "[coalesce(parameters('manualPrivateLinkServiceConnections'), createArray())]",
                                "privateLinkServiceConnections": "[coalesce(parameters('privateLinkServiceConnections'), createArray())]",
                                "subnet": {
                                  "id": "[parameters('subnetResourceId')]"
                                }
                              }
                            },
                            "privateEndpoint_lock": {
                              "condition": "[and(not(empty(coalesce(parameters('lock'), createObject()))), not(equals(tryGet(parameters('lock'), 'kind'), 'None')))]",
                              "type": "Microsoft.Authorization/locks",
                              "apiVersion": "2020-05-01",
                              "scope": "[format('Microsoft.Network/privateEndpoints/{0}', parameters('name'))]",
                              "name": "[coalesce(tryGet(parameters('lock'), 'name'), format('lock-{0}', parameters('name')))]",
                              "properties": {
                                "level": "[coalesce(tryGet(parameters('lock'), 'kind'), '')]",
                                "notes": "[if(equals(tryGet(parameters('lock'), 'kind'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot delete or modify the resource or child resources.')]"
                              },
                              "dependsOn": [
                                "privateEndpoint"
                              ]
                            },
                            "privateEndpoint_roleAssignments": {
                              "copy": {
                                "name": "privateEndpoint_roleAssignments",
                                "count": "[length(coalesce(variables('formattedRoleAssignments'), createArray()))]"
                              },
                              "type": "Microsoft.Authorization/roleAssignments",
                              "apiVersion": "2022-04-01",
                              "scope": "[format('Microsoft.Network/privateEndpoints/{0}', parameters('name'))]",
                              "name": "[coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'name'), guid(resourceId('Microsoft.Network/privateEndpoints', parameters('name')), coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId, coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId))]",
                              "properties": {
                                "roleDefinitionId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId]",
                                "principalId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId]",
                                "description": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'description')]",
                                "principalType": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'principalType')]",
                                "condition": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition')]",
                                "conditionVersion": "[if(not(empty(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                                "delegatedManagedIdentityResourceId": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                              },
                              "dependsOn": [
                                "privateEndpoint"
                              ]
                            },
                            "privateEndpoint_privateDnsZoneGroup": {
                              "condition": "[not(empty(parameters('privateDnsZoneGroup')))]",
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('{0}-PrivateEndpoint-PrivateDnsZoneGroup', uniqueString(deployment().name))]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "name": {
                                    "value": "[tryGet(parameters('privateDnsZoneGroup'), 'name')]"
                                  },
                                  "privateEndpointName": {
                                    "value": "[parameters('name')]"
                                  },
                                  "privateDnsZoneConfigs": {
                                    "value": "[parameters('privateDnsZoneGroup').privateDnsZoneGroupConfigs]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "languageVersion": "2.0",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.34.44.8038",
                                      "templateHash": "13997305779829540948"
                                    },
                                    "name": "Private Endpoint Private DNS Zone Groups",
                                    "description": "This module deploys a Private Endpoint Private DNS Zone Group."
                                  },
                                  "definitions": {
                                    "privateDnsZoneGroupConfigType": {
                                      "type": "object",
                                      "properties": {
                                        "name": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The name of the private DNS zone group config."
                                          }
                                        },
                                        "privateDnsZoneResourceId": {
                                          "type": "string",
                                          "metadata": {
                                            "description": "Required. The resource id of the private DNS zone."
                                          }
                                        }
                                      },
                                      "metadata": {
                                        "__bicep_export!": true
                                      }
                                    }
                                  },
                                  "parameters": {
                                    "privateEndpointName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Conditional. The name of the parent private endpoint. Required if the template is used in a standalone deployment."
                                      }
                                    },
                                    "privateDnsZoneConfigs": {
                                      "type": "array",
                                      "items": {
                                        "$ref": "#/definitions/privateDnsZoneGroupConfigType"
                                      },
                                      "minLength": 1,
                                      "maxLength": 5,
                                      "metadata": {
                                        "description": "Required. Array of private DNS zone configurations of the private DNS zone group. A DNS zone group can support up to 5 DNS zones."
                                      }
                                    },
                                    "name": {
                                      "type": "string",
                                      "defaultValue": "default",
                                      "metadata": {
                                        "description": "Optional. The name of the private DNS zone group."
                                      }
                                    }
                                  },
                                  "variables": {
                                    "copy": [
                                      {
                                        "name": "privateDnsZoneConfigsVar",
                                        "count": "[length(parameters('privateDnsZoneConfigs'))]",
                                        "input": {
                                          "name": "[coalesce(tryGet(parameters('privateDnsZoneConfigs')[copyIndex('privateDnsZoneConfigsVar')], 'name'), last(split(parameters('privateDnsZoneConfigs')[copyIndex('privateDnsZoneConfigsVar')].privateDnsZoneResourceId, '/')))]",
                                          "properties": {
                                            "privateDnsZoneId": "[parameters('privateDnsZoneConfigs')[copyIndex('privateDnsZoneConfigsVar')].privateDnsZoneResourceId]"
                                          }
                                        }
                                      }
                                    ]
                                  },
                                  "resources": {
                                    "privateEndpoint": {
                                      "existing": true,
                                      "type": "Microsoft.Network/privateEndpoints",
                                      "apiVersion": "2024-05-01",
                                      "name": "[parameters('privateEndpointName')]"
                                    },
                                    "privateDnsZoneGroup": {
                                      "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
                                      "apiVersion": "2024-05-01",
                                      "name": "[format('{0}/{1}', parameters('privateEndpointName'), parameters('name'))]",
                                      "properties": {
                                        "privateDnsZoneConfigs": "[variables('privateDnsZoneConfigsVar')]"
                                      }
                                    }
                                  },
                                  "outputs": {
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the private endpoint DNS zone group."
                                      },
                                      "value": "[parameters('name')]"
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource ID of the private endpoint DNS zone group."
                                      },
                                      "value": "[resourceId('Microsoft.Network/privateEndpoints/privateDnsZoneGroups', parameters('privateEndpointName'), parameters('name'))]"
                                    },
                                    "resourceGroupName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource group the private endpoint DNS zone group was deployed into."
                                      },
                                      "value": "[resourceGroup().name]"
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "privateEndpoint"
                              ]
                            }
                          },
                          "outputs": {
                            "resourceGroupName": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource group the private endpoint was deployed into."
                              },
                              "value": "[resourceGroup().name]"
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource ID of the private endpoint."
                              },
                              "value": "[resourceId('Microsoft.Network/privateEndpoints', parameters('name'))]"
                            },
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the private endpoint."
                              },
                              "value": "[parameters('name')]"
                            },
                            "location": {
                              "type": "string",
                              "metadata": {
                                "description": "The location the resource was deployed into."
                              },
                              "value": "[reference('privateEndpoint', '2024-05-01', 'full').location]"
                            },
                            "customDnsConfigs": {
                              "type": "array",
                              "items": {
                                "$ref": "#/definitions/customDnsConfigType"
                              },
                              "metadata": {
                                "description": "The custom DNS configurations of the private endpoint."
                              },
                              "value": "[reference('privateEndpoint').customDnsConfigs]"
                            },
                            "networkInterfaceResourceIds": {
                              "type": "array",
                              "items": {
                                "type": "string"
                              },
                              "metadata": {
                                "description": "The resource IDs of the network interfaces associated with the private endpoint."
                              },
                              "value": "[map(reference('privateEndpoint').networkInterfaces, lambda('nic', lambdaVariables('nic').id))]"
                            },
                            "groupId": {
                              "type": "string",
                              "nullable": true,
                              "metadata": {
                                "description": "The group Id for the private endpoint Group."
                              },
                              "value": "[coalesce(tryGet(tryGet(tryGet(tryGet(reference('privateEndpoint'), 'manualPrivateLinkServiceConnections'), 0, 'properties'), 'groupIds'), 0), tryGet(tryGet(tryGet(tryGet(reference('privateEndpoint'), 'privateLinkServiceConnections'), 0, 'properties'), 'groupIds'), 0))]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "storageAccount"
                      ]
                    },
                    "storageAccount_managementPolicies": {
                      "condition": "[not(empty(coalesce(parameters('managementPolicyRules'), createArray())))]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('{0}-Storage-ManagementPolicies', uniqueString(deployment().name, parameters('location')))]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "storageAccountName": {
                            "value": "[parameters('name')]"
                          },
                          "rules": {
                            "value": "[parameters('managementPolicyRules')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.37.4.10188",
                              "templateHash": "14529265638306912023"
                            },
                            "name": "Storage Account Management Policies",
                            "description": "This module deploys a Storage Account Management Policy."
                          },
                          "parameters": {
                            "storageAccountName": {
                              "type": "string",
                              "maxLength": 24,
                              "metadata": {
                                "description": "Conditional. The name of the parent Storage Account. Required if the template is used in a standalone deployment."
                              }
                            },
                            "rules": {
                              "type": "array",
                              "metadata": {
                                "__bicep_resource_derived_type!": {
                                  "source": "Microsoft.Storage/storageAccounts/managementPolicies@2024-01-01#properties/properties/properties/policy/properties/rules"
                                },
                                "description": "Required. The Storage Account ManagementPolicies Rules."
                              }
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Storage/storageAccounts/managementPolicies",
                              "apiVersion": "2024-01-01",
                              "name": "[format('{0}/{1}', parameters('storageAccountName'), 'default')]",
                              "properties": {
                                "policy": {
                                  "rules": "[parameters('rules')]"
                                }
                              }
                            }
                          ],
                          "outputs": {
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource ID of the deployed management policy."
                              },
                              "value": "default"
                            },
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the deployed management policy."
                              },
                              "value": "default"
                            },
                            "resourceGroupName": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource group of the deployed management policy."
                              },
                              "value": "[resourceGroup().name]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "storageAccount",
                        "storageAccount_blobServices"
                      ]
                    },
                    "storageAccount_localUsers": {
                      "copy": {
                        "name": "storageAccount_localUsers",
                        "count": "[length(coalesce(parameters('localUsers'), createArray()))]"
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('{0}-Storage-LocalUsers-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "storageAccountName": {
                            "value": "[parameters('name')]"
                          },
                          "name": {
                            "value": "[coalesce(parameters('localUsers'), createArray())[copyIndex()].name]"
                          },
                          "hasSshKey": {
                            "value": "[coalesce(parameters('localUsers'), createArray())[copyIndex()].hasSshKey]"
                          },
                          "hasSshPassword": {
                            "value": "[coalesce(parameters('localUsers'), createArray())[copyIndex()].hasSshPassword]"
                          },
                          "permissionScopes": {
                            "value": "[coalesce(parameters('localUsers'), createArray())[copyIndex()].permissionScopes]"
                          },
                          "hasSharedKey": {
                            "value": "[tryGet(coalesce(parameters('localUsers'), createArray())[copyIndex()], 'hasSharedKey')]"
                          },
                          "homeDirectory": {
                            "value": "[tryGet(coalesce(parameters('localUsers'), createArray())[copyIndex()], 'homeDirectory')]"
                          },
                          "sshAuthorizedKeys": {
                            "value": "[tryGet(coalesce(parameters('localUsers'), createArray())[copyIndex()], 'sshAuthorizedKeys')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "languageVersion": "2.0",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.37.4.10188",
                              "templateHash": "3261275799710495788"
                            },
                            "name": "Storage Account Local Users",
                            "description": "This module deploys a Storage Account Local User, which is used for SFTP authentication."
                          },
                          "definitions": {
                            "sshAuthorizedKeyType": {
                              "type": "object",
                              "properties": {
                                "description": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Description used to store the function/usage of the key."
                                  }
                                },
                                "key": {
                                  "type": "securestring",
                                  "metadata": {
                                    "description": "Required. SSH public key base64 encoded. The format should be: '{keyType} {keyData}', e.g. ssh-rsa AAAABBBB."
                                  }
                                }
                              },
                              "metadata": {
                                "__bicep_export!": true
                              }
                            },
                            "permissionScopeType": {
                              "type": "object",
                              "properties": {
                                "permissions": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. The permissions for the local user. Possible values include: Read (r), Write (w), Delete (d), List (l), and Create (c)."
                                  }
                                },
                                "resourceName": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. The name of resource, normally the container name or the file share name, used by the local user."
                                  }
                                },
                                "service": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. The service used by the local user, e.g. blob, file."
                                  }
                                }
                              },
                              "metadata": {
                                "__bicep_export!": true
                              }
                            }
                          },
                          "parameters": {
                            "storageAccountName": {
                              "type": "string",
                              "maxLength": 24,
                              "metadata": {
                                "description": "Conditional. The name of the parent Storage Account. Required if the template is used in a standalone deployment."
                              }
                            },
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The name of the local user used for SFTP Authentication."
                              }
                            },
                            "hasSharedKey": {
                              "type": "bool",
                              "defaultValue": false,
                              "metadata": {
                                "description": "Optional. Indicates whether shared key exists. Set it to false to remove existing shared key."
                              }
                            },
                            "hasSshKey": {
                              "type": "bool",
                              "metadata": {
                                "description": "Required. Indicates whether SSH key exists. Set it to false to remove existing SSH key."
                              }
                            },
                            "hasSshPassword": {
                              "type": "bool",
                              "metadata": {
                                "description": "Required. Indicates whether SSH password exists. Set it to false to remove existing SSH password."
                              }
                            },
                            "homeDirectory": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. The local user home directory."
                              }
                            },
                            "permissionScopes": {
                              "type": "array",
                              "items": {
                                "$ref": "#/definitions/permissionScopeType"
                              },
                              "metadata": {
                                "description": "Required. The permission scopes of the local user."
                              }
                            },
                            "sshAuthorizedKeys": {
                              "type": "array",
                              "items": {
                                "$ref": "#/definitions/sshAuthorizedKeyType"
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The local user SSH authorized keys for SFTP."
                              }
                            }
                          },
                          "resources": {
                            "storageAccount": {
                              "existing": true,
                              "type": "Microsoft.Storage/storageAccounts",
                              "apiVersion": "2024-01-01",
                              "name": "[parameters('storageAccountName')]"
                            },
                            "localUsers": {
                              "type": "Microsoft.Storage/storageAccounts/localUsers",
                              "apiVersion": "2024-01-01",
                              "name": "[format('{0}/{1}', parameters('storageAccountName'), parameters('name'))]",
                              "properties": {
                                "hasSharedKey": "[parameters('hasSharedKey')]",
                                "hasSshKey": "[parameters('hasSshKey')]",
                                "hasSshPassword": "[parameters('hasSshPassword')]",
                                "homeDirectory": "[parameters('homeDirectory')]",
                                "permissionScopes": "[parameters('permissionScopes')]",
                                "sshAuthorizedKeys": "[parameters('sshAuthorizedKeys')]"
                              }
                            }
                          },
                          "outputs": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the deployed local user."
                              },
                              "value": "[parameters('name')]"
                            },
                            "resourceGroupName": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource group of the deployed local user."
                              },
                              "value": "[resourceGroup().name]"
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource ID of the deployed local user."
                              },
                              "value": "[resourceId('Microsoft.Storage/storageAccounts/localUsers', parameters('storageAccountName'), parameters('name'))]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "storageAccount"
                      ]
                    },
                    "storageAccount_blobServices": {
                      "condition": "[not(empty(parameters('blobServices')))]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('{0}-Storage-BlobServices', uniqueString(deployment().name, parameters('location')))]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "storageAccountName": {
                            "value": "[parameters('name')]"
                          },
                          "containers": {
                            "value": "[tryGet(parameters('blobServices'), 'containers')]"
                          },
                          "automaticSnapshotPolicyEnabled": {
                            "value": "[tryGet(parameters('blobServices'), 'automaticSnapshotPolicyEnabled')]"
                          },
                          "changeFeedEnabled": {
                            "value": "[tryGet(parameters('blobServices'), 'changeFeedEnabled')]"
                          },
                          "changeFeedRetentionInDays": {
                            "value": "[tryGet(parameters('blobServices'), 'changeFeedRetentionInDays')]"
                          },
                          "containerDeleteRetentionPolicyEnabled": {
                            "value": "[tryGet(parameters('blobServices'), 'containerDeleteRetentionPolicyEnabled')]"
                          },
                          "containerDeleteRetentionPolicyDays": {
                            "value": "[tryGet(parameters('blobServices'), 'containerDeleteRetentionPolicyDays')]"
                          },
                          "containerDeleteRetentionPolicyAllowPermanentDelete": {
                            "value": "[tryGet(parameters('blobServices'), 'containerDeleteRetentionPolicyAllowPermanentDelete')]"
                          },
                          "corsRules": {
                            "value": "[tryGet(parameters('blobServices'), 'corsRules')]"
                          },
                          "defaultServiceVersion": {
                            "value": "[tryGet(parameters('blobServices'), 'defaultServiceVersion')]"
                          },
                          "deleteRetentionPolicyAllowPermanentDelete": {
                            "value": "[tryGet(parameters('blobServices'), 'deleteRetentionPolicyAllowPermanentDelete')]"
                          },
                          "deleteRetentionPolicyEnabled": {
                            "value": "[tryGet(parameters('blobServices'), 'deleteRetentionPolicyEnabled')]"
                          },
                          "deleteRetentionPolicyDays": {
                            "value": "[tryGet(parameters('blobServices'), 'deleteRetentionPolicyDays')]"
                          },
                          "isVersioningEnabled": {
                            "value": "[tryGet(parameters('blobServices'), 'isVersioningEnabled')]"
                          },
                          "lastAccessTimeTrackingPolicyEnabled": {
                            "value": "[tryGet(parameters('blobServices'), 'lastAccessTimeTrackingPolicyEnabled')]"
                          },
                          "restorePolicyEnabled": {
                            "value": "[tryGet(parameters('blobServices'), 'restorePolicyEnabled')]"
                          },
                          "restorePolicyDays": {
                            "value": "[tryGet(parameters('blobServices'), 'restorePolicyDays')]"
                          },
                          "diagnosticSettings": {
                            "value": "[tryGet(parameters('blobServices'), 'diagnosticSettings')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "languageVersion": "2.0",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.37.4.10188",
                              "templateHash": "1215393307957288546"
                            },
                            "name": "Storage Account blob Services",
                            "description": "This module deploys a Storage Account Blob Service."
                          },
                          "definitions": {
                            "corsRuleType": {
                              "type": "object",
                              "properties": {
                                "allowedHeaders": {
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  },
                                  "metadata": {
                                    "description": "Required. A list of headers allowed to be part of the cross-origin request."
                                  }
                                },
                                "allowedMethods": {
                                  "type": "array",
                                  "allowedValues": [
                                    "CONNECT",
                                    "DELETE",
                                    "GET",
                                    "HEAD",
                                    "MERGE",
                                    "OPTIONS",
                                    "PATCH",
                                    "POST",
                                    "PUT",
                                    "TRACE"
                                  ],
                                  "metadata": {
                                    "description": "Required. A list of HTTP methods that are allowed to be executed by the origin."
                                  }
                                },
                                "allowedOrigins": {
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  },
                                  "metadata": {
                                    "description": "Required. A list of origin domains that will be allowed via CORS, or \"*\" to allow all domains."
                                  }
                                },
                                "exposedHeaders": {
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  },
                                  "metadata": {
                                    "description": "Required. A list of response headers to expose to CORS clients."
                                  }
                                },
                                "maxAgeInSeconds": {
                                  "type": "int",
                                  "metadata": {
                                    "description": "Required. The number of seconds that the client/browser should cache a preflight response."
                                  }
                                }
                              },
                              "metadata": {
                                "__bicep_export!": true,
                                "description": "The type for a cors rule."
                              }
                            },
                            "diagnosticSettingFullType": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The name of the diagnostic setting."
                                  }
                                },
                                "logCategoriesAndGroups": {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "properties": {
                                      "category": {
                                        "type": "string",
                                        "nullable": true,
                                        "metadata": {
                                          "description": "Optional. Name of a Diagnostic Log category for a resource type this setting is applied to. Set the specific logs to collect here."
                                        }
                                      },
                                      "categoryGroup": {
                                        "type": "string",
                                        "nullable": true,
                                        "metadata": {
                                          "description": "Optional. Name of a Diagnostic Log category group for a resource type this setting is applied to. Set to `allLogs` to collect all logs."
                                        }
                                      },
                                      "enabled": {
                                        "type": "bool",
                                        "nullable": true,
                                        "metadata": {
                                          "description": "Optional. Enable or disable the category explicitly. Default is `true`."
                                        }
                                      }
                                    }
                                  },
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The name of logs that will be streamed. \"allLogs\" includes all possible logs for the resource. Set to `[]` to disable log collection."
                                  }
                                },
                                "metricCategories": {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "properties": {
                                      "category": {
                                        "type": "string",
                                        "metadata": {
                                          "description": "Required. Name of a Diagnostic Metric category for a resource type this setting is applied to. Set to `AllMetrics` to collect all metrics."
                                        }
                                      },
                                      "enabled": {
                                        "type": "bool",
                                        "nullable": true,
                                        "metadata": {
                                          "description": "Optional. Enable or disable the category explicitly. Default is `true`."
                                        }
                                      }
                                    }
                                  },
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The name of metrics that will be streamed. \"allMetrics\" includes all possible metrics for the resource. Set to `[]` to disable metric collection."
                                  }
                                },
                                "logAnalyticsDestinationType": {
                                  "type": "string",
                                  "allowedValues": [
                                    "AzureDiagnostics",
                                    "Dedicated"
                                  ],
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. A string indicating whether the export to Log Analytics should use the default destination type, i.e. AzureDiagnostics, or use a destination type."
                                  }
                                },
                                "workspaceResourceId": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Resource ID of the diagnostic log analytics workspace. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                                  }
                                },
                                "storageAccountResourceId": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Resource ID of the diagnostic storage account. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                                  }
                                },
                                "eventHubAuthorizationRuleResourceId": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
                                  }
                                },
                                "eventHubName": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                                  }
                                },
                                "marketplacePartnerResourceId": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The full ARM resource ID of the Marketplace resource to which you would like to send Diagnostic Logs."
                                  }
                                }
                              },
                              "metadata": {
                                "description": "An AVM-aligned type for a diagnostic setting. To be used if both logs & metrics are supported by the resource provider.",
                                "__bicep_imported_from!": {
                                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.6.0"
                                }
                              }
                            }
                          },
                          "parameters": {
                            "storageAccountName": {
                              "type": "string",
                              "maxLength": 24,
                              "metadata": {
                                "description": "Conditional. The name of the parent Storage Account. Required if the template is used in a standalone deployment."
                              }
                            },
                            "automaticSnapshotPolicyEnabled": {
                              "type": "bool",
                              "defaultValue": false,
                              "metadata": {
                                "description": "Optional. Automatic Snapshot is enabled if set to true."
                              }
                            },
                            "changeFeedEnabled": {
                              "type": "bool",
                              "defaultValue": false,
                              "metadata": {
                                "description": "Optional. The blob service properties for change feed events. Indicates whether change feed event logging is enabled for the Blob service."
                              }
                            },
                            "changeFeedRetentionInDays": {
                              "type": "int",
                              "nullable": true,
                              "minValue": 1,
                              "maxValue": 146000,
                              "metadata": {
                                "description": "Optional. Indicates whether change feed event logging is enabled for the Blob service. Indicates the duration of changeFeed retention in days. If left blank, it indicates an infinite retention of the change feed."
                              }
                            },
                            "containerDeleteRetentionPolicyEnabled": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Optional. The blob service properties for container soft delete. Indicates whether DeleteRetentionPolicy is enabled."
                              }
                            },
                            "containerDeleteRetentionPolicyDays": {
                              "type": "int",
                              "nullable": true,
                              "minValue": 1,
                              "maxValue": 365,
                              "metadata": {
                                "description": "Optional. Indicates the number of days that the deleted item should be retained."
                              }
                            },
                            "containerDeleteRetentionPolicyAllowPermanentDelete": {
                              "type": "bool",
                              "defaultValue": false,
                              "metadata": {
                                "description": "Optional. This property when set to true allows deletion of the soft deleted blob versions and snapshots. This property cannot be used with blob restore policy. This property only applies to blob service and does not apply to containers or file share."
                              }
                            },
                            "corsRules": {
                              "type": "array",
                              "items": {
                                "$ref": "#/definitions/corsRuleType"
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The List of CORS rules. You can include up to five CorsRule elements in the request."
                              }
                            },
                            "defaultServiceVersion": {
                              "type": "string",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Indicates the default version to use for requests to the Blob service if an incoming request's version is not specified. Possible values include version 2008-10-27 and all more recent versions."
                              }
                            },
                            "deleteRetentionPolicyEnabled": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Optional. The blob service properties for blob soft delete."
                              }
                            },
                            "deleteRetentionPolicyDays": {
                              "type": "int",
                              "defaultValue": 7,
                              "minValue": 1,
                              "maxValue": 365,
                              "metadata": {
                                "description": "Optional. Indicates the number of days that the deleted blob should be retained."
                              }
                            },
                            "deleteRetentionPolicyAllowPermanentDelete": {
                              "type": "bool",
                              "defaultValue": false,
                              "metadata": {
                                "description": "Optional. This property when set to true allows deletion of the soft deleted blob versions and snapshots. This property cannot be used with blob restore policy. This property only applies to blob service and does not apply to containers or file share."
                              }
                            },
                            "isVersioningEnabled": {
                              "type": "bool",
                              "defaultValue": false,
                              "metadata": {
                                "description": "Optional. Use versioning to automatically maintain previous versions of your blobs."
                              }
                            },
                            "lastAccessTimeTrackingPolicyEnabled": {
                              "type": "bool",
                              "defaultValue": false,
                              "metadata": {
                                "description": "Optional. The blob service property to configure last access time based tracking policy. When set to true last access time based tracking is enabled."
                              }
                            },
                            "restorePolicyEnabled": {
                              "type": "bool",
                              "defaultValue": false,
                              "metadata": {
                                "description": "Optional. The blob service properties for blob restore policy. If point-in-time restore is enabled, then versioning, change feed, and blob soft delete must also be enabled."
                              }
                            },
                            "restorePolicyDays": {
                              "type": "int",
                              "defaultValue": 7,
                              "minValue": 1,
                              "metadata": {
                                "description": "Optional. How long this blob can be restored. It should be less than DeleteRetentionPolicy days."
                              }
                            },
                            "containers": {
                              "type": "array",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Blob containers to create."
                              }
                            },
                            "diagnosticSettings": {
                              "type": "array",
                              "items": {
                                "$ref": "#/definitions/diagnosticSettingFullType"
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The diagnostic settings of the service."
                              }
                            }
                          },
                          "variables": {
                            "enableReferencedModulesTelemetry": false,
                            "name": "default"
                          },
                          "resources": {
                            "storageAccount": {
                              "existing": true,
                              "type": "Microsoft.Storage/storageAccounts",
                              "apiVersion": "2024-01-01",
                              "name": "[parameters('storageAccountName')]"
                            },
                            "blobServices": {
                              "type": "Microsoft.Storage/storageAccounts/blobServices",
                              "apiVersion": "2024-01-01",
                              "name": "[format('{0}/{1}', parameters('storageAccountName'), variables('name'))]",
                              "properties": {
                                "automaticSnapshotPolicyEnabled": "[parameters('automaticSnapshotPolicyEnabled')]",
                                "changeFeed": "[if(parameters('changeFeedEnabled'), createObject('enabled', true(), 'retentionInDays', parameters('changeFeedRetentionInDays')), null())]",
                                "containerDeleteRetentionPolicy": {
                                  "enabled": "[parameters('containerDeleteRetentionPolicyEnabled')]",
                                  "days": "[parameters('containerDeleteRetentionPolicyDays')]",
                                  "allowPermanentDelete": "[if(equals(parameters('containerDeleteRetentionPolicyEnabled'), true()), parameters('containerDeleteRetentionPolicyAllowPermanentDelete'), null())]"
                                },
                                "cors": "[if(not(equals(parameters('corsRules'), null())), createObject('corsRules', parameters('corsRules')), null())]",
                                "defaultServiceVersion": "[parameters('defaultServiceVersion')]",
                                "deleteRetentionPolicy": {
                                  "enabled": "[parameters('deleteRetentionPolicyEnabled')]",
                                  "days": "[parameters('deleteRetentionPolicyDays')]",
                                  "allowPermanentDelete": "[if(and(parameters('deleteRetentionPolicyEnabled'), parameters('deleteRetentionPolicyAllowPermanentDelete')), true(), null())]"
                                },
                                "isVersioningEnabled": "[parameters('isVersioningEnabled')]",
                                "lastAccessTimeTrackingPolicy": "[if(not(equals(reference('storageAccount', '2024-01-01', 'full').kind, 'Storage')), createObject('enable', parameters('lastAccessTimeTrackingPolicyEnabled'), 'name', if(equals(parameters('lastAccessTimeTrackingPolicyEnabled'), true()), 'AccessTimeTracking', null()), 'trackingGranularityInDays', if(equals(parameters('lastAccessTimeTrackingPolicyEnabled'), true()), 1, null())), null())]",
                                "restorePolicy": "[if(parameters('restorePolicyEnabled'), createObject('enabled', true(), 'days', parameters('restorePolicyDays')), null())]"
                              },
                              "dependsOn": [
                                "storageAccount"
                              ]
                            },
                            "blobServices_diagnosticSettings": {
                              "copy": {
                                "name": "blobServices_diagnosticSettings",
                                "count": "[length(coalesce(parameters('diagnosticSettings'), createArray()))]"
                              },
                              "type": "Microsoft.Insights/diagnosticSettings",
                              "apiVersion": "2021-05-01-preview",
                              "scope": "[format('Microsoft.Storage/storageAccounts/{0}/blobServices/{1}', parameters('storageAccountName'), variables('name'))]",
                              "name": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'name'), format('{0}-diagnosticSettings', variables('name')))]",
                              "properties": {
                                "copy": [
                                  {
                                    "name": "metrics",
                                    "count": "[length(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics'))))]",
                                    "input": {
                                      "category": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics')))[copyIndex('metrics')].category]",
                                      "enabled": "[coalesce(tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics')))[copyIndex('metrics')], 'enabled'), true())]",
                                      "timeGrain": null
                                    }
                                  },
                                  {
                                    "name": "logs",
                                    "count": "[length(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs'))))]",
                                    "input": {
                                      "categoryGroup": "[tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'categoryGroup')]",
                                      "category": "[tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'category')]",
                                      "enabled": "[coalesce(tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'enabled'), true())]"
                                    }
                                  }
                                ],
                                "storageAccountId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'storageAccountResourceId')]",
                                "workspaceId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'workspaceResourceId')]",
                                "eventHubAuthorizationRuleId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubAuthorizationRuleResourceId')]",
                                "eventHubName": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubName')]",
                                "marketplacePartnerId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'marketplacePartnerResourceId')]",
                                "logAnalyticsDestinationType": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logAnalyticsDestinationType')]"
                              },
                              "dependsOn": [
                                "blobServices"
                              ]
                            },
                            "blobServices_container": {
                              "copy": {
                                "name": "blobServices_container",
                                "count": "[length(coalesce(parameters('containers'), createArray()))]"
                              },
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('{0}-Container-{1}', deployment().name, copyIndex())]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "storageAccountName": {
                                    "value": "[parameters('storageAccountName')]"
                                  },
                                  "blobServiceName": {
                                    "value": "[variables('name')]"
                                  },
                                  "name": {
                                    "value": "[coalesce(parameters('containers'), createArray())[copyIndex()].name]"
                                  },
                                  "defaultEncryptionScope": {
                                    "value": "[tryGet(coalesce(parameters('containers'), createArray())[copyIndex()], 'defaultEncryptionScope')]"
                                  },
                                  "denyEncryptionScopeOverride": {
                                    "value": "[tryGet(coalesce(parameters('containers'), createArray())[copyIndex()], 'denyEncryptionScopeOverride')]"
                                  },
                                  "enableNfsV3AllSquash": {
                                    "value": "[tryGet(coalesce(parameters('containers'), createArray())[copyIndex()], 'enableNfsV3AllSquash')]"
                                  },
                                  "enableNfsV3RootSquash": {
                                    "value": "[tryGet(coalesce(parameters('containers'), createArray())[copyIndex()], 'enableNfsV3RootSquash')]"
                                  },
                                  "immutableStorageWithVersioningEnabled": {
                                    "value": "[tryGet(coalesce(parameters('containers'), createArray())[copyIndex()], 'immutableStorageWithVersioningEnabled')]"
                                  },
                                  "metadata": {
                                    "value": "[tryGet(coalesce(parameters('containers'), createArray())[copyIndex()], 'metadata')]"
                                  },
                                  "publicAccess": {
                                    "value": "[tryGet(coalesce(parameters('containers'), createArray())[copyIndex()], 'publicAccess')]"
                                  },
                                  "roleAssignments": {
                                    "value": "[tryGet(coalesce(parameters('containers'), createArray())[copyIndex()], 'roleAssignments')]"
                                  },
                                  "immutabilityPolicyProperties": {
                                    "value": "[tryGet(coalesce(parameters('containers'), createArray())[copyIndex()], 'immutabilityPolicyProperties')]"
                                  },
                                  "enableTelemetry": {
                                    "value": "[variables('enableReferencedModulesTelemetry')]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "languageVersion": "2.0",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.37.4.10188",
                                      "templateHash": "15600440533481093288"
                                    },
                                    "name": "Storage Account Blob Containers",
                                    "description": "This module deploys a Storage Account Blob Container."
                                  },
                                  "definitions": {
                                    "roleAssignmentType": {
                                      "type": "object",
                                      "properties": {
                                        "name": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The name (as GUID) of the role assignment. If not provided, a GUID will be generated."
                                          }
                                        },
                                        "roleDefinitionIdOrName": {
                                          "type": "string",
                                          "metadata": {
                                            "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                                          }
                                        },
                                        "principalId": {
                                          "type": "string",
                                          "metadata": {
                                            "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                                          }
                                        },
                                        "principalType": {
                                          "type": "string",
                                          "allowedValues": [
                                            "Device",
                                            "ForeignGroup",
                                            "Group",
                                            "ServicePrincipal",
                                            "User"
                                          ],
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The principal type of the assigned principal ID."
                                          }
                                        },
                                        "description": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The description of the role assignment."
                                          }
                                        },
                                        "condition": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                                          }
                                        },
                                        "conditionVersion": {
                                          "type": "string",
                                          "allowedValues": [
                                            "2.0"
                                          ],
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Version of the condition."
                                          }
                                        },
                                        "delegatedManagedIdentityResourceId": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The Resource Id of the delegated managed identity resource."
                                          }
                                        }
                                      },
                                      "metadata": {
                                        "description": "An AVM-aligned type for a role assignment.",
                                        "__bicep_imported_from!": {
                                          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.6.0"
                                        }
                                      }
                                    }
                                  },
                                  "parameters": {
                                    "storageAccountName": {
                                      "type": "string",
                                      "maxLength": 24,
                                      "metadata": {
                                        "description": "Conditional. The name of the parent Storage Account. Required if the template is used in a standalone deployment."
                                      }
                                    },
                                    "blobServiceName": {
                                      "type": "string",
                                      "defaultValue": "default",
                                      "metadata": {
                                        "description": "Optional. The name of the parent Blob Service. Required if the template is used in a standalone deployment."
                                      }
                                    },
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The name of the Storage Container to deploy."
                                      }
                                    },
                                    "defaultEncryptionScope": {
                                      "type": "string",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Default the container to use specified encryption scope for all writes."
                                      }
                                    },
                                    "denyEncryptionScopeOverride": {
                                      "type": "bool",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Block override of encryption scope from the container default."
                                      }
                                    },
                                    "enableNfsV3AllSquash": {
                                      "type": "bool",
                                      "defaultValue": false,
                                      "metadata": {
                                        "description": "Optional. Enable NFSv3 all squash on blob container."
                                      }
                                    },
                                    "enableNfsV3RootSquash": {
                                      "type": "bool",
                                      "defaultValue": false,
                                      "metadata": {
                                        "description": "Optional. Enable NFSv3 root squash on blob container."
                                      }
                                    },
                                    "immutableStorageWithVersioningEnabled": {
                                      "type": "bool",
                                      "defaultValue": false,
                                      "metadata": {
                                        "description": "Optional. This is an immutable property, when set to true it enables object level immutability at the container level. The property is immutable and can only be set to true at the container creation time. Existing containers must undergo a migration process."
                                      }
                                    },
                                    "immutabilityPolicyName": {
                                      "type": "string",
                                      "defaultValue": "default",
                                      "metadata": {
                                        "description": "Optional. Name of the immutable policy."
                                      }
                                    },
                                    "immutabilityPolicyProperties": {
                                      "type": "object",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Configure immutability policy."
                                      }
                                    },
                                    "metadata": {
                                      "type": "object",
                                      "metadata": {
                                        "__bicep_resource_derived_type!": {
                                          "source": "Microsoft.Storage/storageAccounts/blobServices/containers@2024-01-01#properties/properties/properties/metadata"
                                        },
                                        "description": "Optional. A name-value pair to associate with the container as metadata."
                                      },
                                      "defaultValue": {}
                                    },
                                    "publicAccess": {
                                      "type": "string",
                                      "defaultValue": "None",
                                      "allowedValues": [
                                        "Container",
                                        "Blob",
                                        "None"
                                      ],
                                      "metadata": {
                                        "description": "Optional. Specifies whether data in the container may be accessed publicly and the level of access."
                                      }
                                    },
                                    "enableTelemetry": {
                                      "type": "bool",
                                      "defaultValue": true,
                                      "metadata": {
                                        "description": "Optional. Enable/Disable usage telemetry for module."
                                      }
                                    },
                                    "roleAssignments": {
                                      "type": "array",
                                      "items": {
                                        "$ref": "#/definitions/roleAssignmentType"
                                      },
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Array of role assignments to create."
                                      }
                                    }
                                  },
                                  "variables": {
                                    "copy": [
                                      {
                                        "name": "formattedRoleAssignments",
                                        "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]",
                                        "input": "[union(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')], createObject('roleDefinitionId', coalesce(tryGet(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName), if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName)))))]"
                                      }
                                    ],
                                    "builtInRoleNames": {
                                      "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                                      "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                                      "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                                      "Reader and Data Access": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'c12c1c16-33a1-487b-954d-41c89c60f349')]",
                                      "Role Based Access Control Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
                                      "Storage Account Backup Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'e5e2a7ff-d759-4cd2-bb51-3152d37e2eb1')]",
                                      "Storage Account Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '17d1049b-9a84-46fb-8f53-869881c3d3ab')]",
                                      "Storage Account Key Operator Service Role": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '81a9662b-bebf-436f-a333-f67b29880f12')]",
                                      "Storage Blob Data Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'ba92f5b4-2d11-453d-a403-e96b0029c9fe')]",
                                      "Storage Blob Data Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b7e6dc6d-f1e8-4753-8033-0f276bb0955b')]",
                                      "Storage Blob Data Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '2a2b9908-6ea1-4ae2-8e65-a410df84e7d1')]",
                                      "Storage Blob Delegator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'db58b8e5-c6ad-4a2a-8342-4190687cbf4a')]",
                                      "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
                                    }
                                  },
                                  "resources": {
                                    "storageAccount::blobServices": {
                                      "existing": true,
                                      "type": "Microsoft.Storage/storageAccounts/blobServices",
                                      "apiVersion": "2024-01-01",
                                      "name": "[format('{0}/{1}', parameters('storageAccountName'), parameters('blobServiceName'))]"
                                    },
                                    "avmTelemetry": {
                                      "condition": "[parameters('enableTelemetry')]",
                                      "type": "Microsoft.Resources/deployments",
                                      "apiVersion": "2024-03-01",
                                      "name": "[format('46d3xbcp.res.storage-blobcontainer.{0}.{1}', replace('-..--..-', '.', '-'), substring(uniqueString(deployment().name), 0, 4))]",
                                      "properties": {
                                        "mode": "Incremental",
                                        "template": {
                                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                          "contentVersion": "1.0.0.0",
                                          "resources": [],
                                          "outputs": {
                                            "telemetry": {
                                              "type": "String",
                                              "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                                            }
                                          }
                                        }
                                      }
                                    },
                                    "storageAccount": {
                                      "existing": true,
                                      "type": "Microsoft.Storage/storageAccounts",
                                      "apiVersion": "2024-01-01",
                                      "name": "[parameters('storageAccountName')]"
                                    },
                                    "container": {
                                      "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
                                      "apiVersion": "2024-01-01",
                                      "name": "[format('{0}/{1}/{2}', parameters('storageAccountName'), parameters('blobServiceName'), parameters('name'))]",
                                      "properties": {
                                        "defaultEncryptionScope": "[parameters('defaultEncryptionScope')]",
                                        "denyEncryptionScopeOverride": "[parameters('denyEncryptionScopeOverride')]",
                                        "enableNfsV3AllSquash": "[if(equals(parameters('enableNfsV3AllSquash'), true()), parameters('enableNfsV3AllSquash'), null())]",
                                        "enableNfsV3RootSquash": "[if(equals(parameters('enableNfsV3RootSquash'), true()), parameters('enableNfsV3RootSquash'), null())]",
                                        "immutableStorageWithVersioning": "[if(equals(parameters('immutableStorageWithVersioningEnabled'), true()), createObject('enabled', parameters('immutableStorageWithVersioningEnabled')), null())]",
                                        "metadata": "[parameters('metadata')]",
                                        "publicAccess": "[parameters('publicAccess')]"
                                      }
                                    },
                                    "container_roleAssignments": {
                                      "copy": {
                                        "name": "container_roleAssignments",
                                        "count": "[length(coalesce(variables('formattedRoleAssignments'), createArray()))]"
                                      },
                                      "type": "Microsoft.Authorization/roleAssignments",
                                      "apiVersion": "2022-04-01",
                                      "scope": "[format('Microsoft.Storage/storageAccounts/{0}/blobServices/{1}/containers/{2}', parameters('storageAccountName'), parameters('blobServiceName'), parameters('name'))]",
                                      "name": "[coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'name'), guid(resourceId('Microsoft.Storage/storageAccounts/blobServices/containers', parameters('storageAccountName'), parameters('blobServiceName'), parameters('name')), coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId, coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId))]",
                                      "properties": {
                                        "roleDefinitionId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId]",
                                        "principalId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId]",
                                        "description": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'description')]",
                                        "principalType": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'principalType')]",
                                        "condition": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition')]",
                                        "conditionVersion": "[if(not(empty(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                                        "delegatedManagedIdentityResourceId": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                                      },
                                      "dependsOn": [
                                        "container"
                                      ]
                                    },
                                    "immutabilityPolicy": {
                                      "condition": "[not(empty(coalesce(parameters('immutabilityPolicyProperties'), createObject())))]",
                                      "type": "Microsoft.Resources/deployments",
                                      "apiVersion": "2022-09-01",
                                      "name": "[format('{0}-{1}', parameters('name'), parameters('immutabilityPolicyName'))]",
                                      "properties": {
                                        "expressionEvaluationOptions": {
                                          "scope": "inner"
                                        },
                                        "mode": "Incremental",
                                        "parameters": {
                                          "storageAccountName": {
                                            "value": "[parameters('storageAccountName')]"
                                          },
                                          "containerName": {
                                            "value": "[parameters('name')]"
                                          },
                                          "immutabilityPeriodSinceCreationInDays": {
                                            "value": "[tryGet(parameters('immutabilityPolicyProperties'), 'immutabilityPeriodSinceCreationInDays')]"
                                          },
                                          "allowProtectedAppendWrites": {
                                            "value": "[tryGet(parameters('immutabilityPolicyProperties'), 'allowProtectedAppendWrites')]"
                                          },
                                          "allowProtectedAppendWritesAll": {
                                            "value": "[tryGet(parameters('immutabilityPolicyProperties'), 'allowProtectedAppendWritesAll')]"
                                          }
                                        },
                                        "template": {
                                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                          "contentVersion": "1.0.0.0",
                                          "metadata": {
                                            "_generator": {
                                              "name": "bicep",
                                              "version": "0.37.4.10188",
                                              "templateHash": "2858994808980111017"
                                            },
                                            "name": "Storage Account Blob Container Immutability Policies",
                                            "description": "This module deploys a Storage Account Blob Container Immutability Policy."
                                          },
                                          "parameters": {
                                            "storageAccountName": {
                                              "type": "string",
                                              "maxLength": 24,
                                              "metadata": {
                                                "description": "Conditional. The name of the parent Storage Account. Required if the template is used in a standalone deployment."
                                              }
                                            },
                                            "containerName": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Conditional. The name of the parent container to apply the policy to. Required if the template is used in a standalone deployment."
                                              }
                                            },
                                            "immutabilityPeriodSinceCreationInDays": {
                                              "type": "int",
                                              "defaultValue": 365,
                                              "metadata": {
                                                "description": "Optional. The immutability period for the blobs in the container since the policy creation, in days."
                                              }
                                            },
                                            "allowProtectedAppendWrites": {
                                              "type": "bool",
                                              "defaultValue": true,
                                              "metadata": {
                                                "description": "Optional. This property can only be changed for unlocked time-based retention policies. When enabled, new blocks can be written to an append blob while maintaining immutability protection and compliance. Only new blocks can be added and any existing blocks cannot be modified or deleted. This property cannot be changed with ExtendImmutabilityPolicy API."
                                              }
                                            },
                                            "allowProtectedAppendWritesAll": {
                                              "type": "bool",
                                              "defaultValue": true,
                                              "metadata": {
                                                "description": "Optional. This property can only be changed for unlocked time-based retention policies. When enabled, new blocks can be written to both \"Append and Block Blobs\" while maintaining immutability protection and compliance. Only new blocks can be added and any existing blocks cannot be modified or deleted. This property cannot be changed with ExtendImmutabilityPolicy API. The \"allowProtectedAppendWrites\" and \"allowProtectedAppendWritesAll\" properties are mutually exclusive."
                                              }
                                            }
                                          },
                                          "resources": [
                                            {
                                              "type": "Microsoft.Storage/storageAccounts/blobServices/containers/immutabilityPolicies",
                                              "apiVersion": "2024-01-01",
                                              "name": "[format('{0}/{1}/{2}/{3}', parameters('storageAccountName'), 'default', parameters('containerName'), 'default')]",
                                              "properties": {
                                                "immutabilityPeriodSinceCreationInDays": "[parameters('immutabilityPeriodSinceCreationInDays')]",
                                                "allowProtectedAppendWrites": "[parameters('allowProtectedAppendWrites')]",
                                                "allowProtectedAppendWritesAll": "[parameters('allowProtectedAppendWritesAll')]"
                                              }
                                            }
                                          ],
                                          "outputs": {
                                            "name": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The name of the deployed immutability policy."
                                              },
                                              "value": "default"
                                            },
                                            "resourceId": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The resource ID of the deployed immutability policy."
                                              },
                                              "value": "[resourceId('Microsoft.Storage/storageAccounts/blobServices/containers/immutabilityPolicies', parameters('storageAccountName'), 'default', parameters('containerName'), 'default')]"
                                            },
                                            "resourceGroupName": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The resource group of the deployed immutability policy."
                                              },
                                              "value": "[resourceGroup().name]"
                                            }
                                          }
                                        }
                                      },
                                      "dependsOn": [
                                        "container"
                                      ]
                                    }
                                  },
                                  "outputs": {
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the deployed container."
                                      },
                                      "value": "[parameters('name')]"
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource ID of the deployed container."
                                      },
                                      "value": "[resourceId('Microsoft.Storage/storageAccounts/blobServices/containers', parameters('storageAccountName'), parameters('blobServiceName'), parameters('name'))]"
                                    },
                                    "resourceGroupName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource group of the deployed container."
                                      },
                                      "value": "[resourceGroup().name]"
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "blobServices"
                              ]
                            }
                          },
                          "outputs": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the deployed blob service."
                              },
                              "value": "[variables('name')]"
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource ID of the deployed blob service."
                              },
                              "value": "[resourceId('Microsoft.Storage/storageAccounts/blobServices', parameters('storageAccountName'), variables('name'))]"
                            },
                            "resourceGroupName": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the deployed blob service."
                              },
                              "value": "[resourceGroup().name]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "storageAccount"
                      ]
                    },
                    "storageAccount_fileServices": {
                      "condition": "[not(empty(parameters('fileServices')))]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('{0}-Storage-FileServices', uniqueString(deployment().name, parameters('location')))]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "storageAccountName": {
                            "value": "[parameters('name')]"
                          },
                          "diagnosticSettings": {
                            "value": "[tryGet(parameters('fileServices'), 'diagnosticSettings')]"
                          },
                          "protocolSettings": {
                            "value": "[tryGet(parameters('fileServices'), 'protocolSettings')]"
                          },
                          "shareDeleteRetentionPolicy": {
                            "value": "[tryGet(parameters('fileServices'), 'shareDeleteRetentionPolicy')]"
                          },
                          "shares": {
                            "value": "[tryGet(parameters('fileServices'), 'shares')]"
                          },
                          "corsRules": {
                            "value": "[tryGet(parameters('queueServices'), 'corsRules')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "languageVersion": "2.0",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.37.4.10188",
                              "templateHash": "2735186993322606805"
                            },
                            "name": "Storage Account File Share Services",
                            "description": "This module deploys a Storage Account File Share Service."
                          },
                          "definitions": {
                            "corsRuleType": {
                              "type": "object",
                              "properties": {
                                "allowedHeaders": {
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  },
                                  "metadata": {
                                    "description": "Required. A list of headers allowed to be part of the cross-origin request."
                                  }
                                },
                                "allowedMethods": {
                                  "type": "array",
                                  "allowedValues": [
                                    "CONNECT",
                                    "DELETE",
                                    "GET",
                                    "HEAD",
                                    "MERGE",
                                    "OPTIONS",
                                    "PATCH",
                                    "POST",
                                    "PUT",
                                    "TRACE"
                                  ],
                                  "metadata": {
                                    "description": "Required. A list of HTTP methods that are allowed to be executed by the origin."
                                  }
                                },
                                "allowedOrigins": {
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  },
                                  "metadata": {
                                    "description": "Required. A list of origin domains that will be allowed via CORS, or \"*\" to allow all domains."
                                  }
                                },
                                "exposedHeaders": {
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  },
                                  "metadata": {
                                    "description": "Required. A list of response headers to expose to CORS clients."
                                  }
                                },
                                "maxAgeInSeconds": {
                                  "type": "int",
                                  "metadata": {
                                    "description": "Required. The number of seconds that the client/browser should cache a preflight response."
                                  }
                                }
                              },
                              "metadata": {
                                "__bicep_export!": true,
                                "description": "The type for a cors rule."
                              }
                            },
                            "diagnosticSettingFullType": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The name of the diagnostic setting."
                                  }
                                },
                                "logCategoriesAndGroups": {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "properties": {
                                      "category": {
                                        "type": "string",
                                        "nullable": true,
                                        "metadata": {
                                          "description": "Optional. Name of a Diagnostic Log category for a resource type this setting is applied to. Set the specific logs to collect here."
                                        }
                                      },
                                      "categoryGroup": {
                                        "type": "string",
                                        "nullable": true,
                                        "metadata": {
                                          "description": "Optional. Name of a Diagnostic Log category group for a resource type this setting is applied to. Set to `allLogs` to collect all logs."
                                        }
                                      },
                                      "enabled": {
                                        "type": "bool",
                                        "nullable": true,
                                        "metadata": {
                                          "description": "Optional. Enable or disable the category explicitly. Default is `true`."
                                        }
                                      }
                                    }
                                  },
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The name of logs that will be streamed. \"allLogs\" includes all possible logs for the resource. Set to `[]` to disable log collection."
                                  }
                                },
                                "metricCategories": {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "properties": {
                                      "category": {
                                        "type": "string",
                                        "metadata": {
                                          "description": "Required. Name of a Diagnostic Metric category for a resource type this setting is applied to. Set to `AllMetrics` to collect all metrics."
                                        }
                                      },
                                      "enabled": {
                                        "type": "bool",
                                        "nullable": true,
                                        "metadata": {
                                          "description": "Optional. Enable or disable the category explicitly. Default is `true`."
                                        }
                                      }
                                    }
                                  },
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The name of metrics that will be streamed. \"allMetrics\" includes all possible metrics for the resource. Set to `[]` to disable metric collection."
                                  }
                                },
                                "logAnalyticsDestinationType": {
                                  "type": "string",
                                  "allowedValues": [
                                    "AzureDiagnostics",
                                    "Dedicated"
                                  ],
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. A string indicating whether the export to Log Analytics should use the default destination type, i.e. AzureDiagnostics, or use a destination type."
                                  }
                                },
                                "workspaceResourceId": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Resource ID of the diagnostic log analytics workspace. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                                  }
                                },
                                "storageAccountResourceId": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Resource ID of the diagnostic storage account. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                                  }
                                },
                                "eventHubAuthorizationRuleResourceId": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
                                  }
                                },
                                "eventHubName": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                                  }
                                },
                                "marketplacePartnerResourceId": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The full ARM resource ID of the Marketplace resource to which you would like to send Diagnostic Logs."
                                  }
                                }
                              },
                              "metadata": {
                                "description": "An AVM-aligned type for a diagnostic setting. To be used if both logs & metrics are supported by the resource provider.",
                                "__bicep_imported_from!": {
                                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.6.0"
                                }
                              }
                            }
                          },
                          "parameters": {
                            "storageAccountName": {
                              "type": "string",
                              "maxLength": 24,
                              "metadata": {
                                "description": "Conditional. The name of the parent Storage Account. Required if the template is used in a standalone deployment."
                              }
                            },
                            "name": {
                              "type": "string",
                              "defaultValue": "default",
                              "metadata": {
                                "description": "Optional. The name of the file service."
                              }
                            },
                            "protocolSettings": {
                              "type": "object",
                              "metadata": {
                                "__bicep_resource_derived_type!": {
                                  "source": "Microsoft.Storage/storageAccounts/fileServices@2024-01-01#properties/properties/properties/protocolSettings"
                                },
                                "description": "Optional. Protocol settings for file service."
                              },
                              "defaultValue": {}
                            },
                            "shareDeleteRetentionPolicy": {
                              "type": "object",
                              "metadata": {
                                "__bicep_resource_derived_type!": {
                                  "source": "Microsoft.Storage/storageAccounts/fileServices@2024-01-01#properties/properties/properties/shareDeleteRetentionPolicy"
                                },
                                "description": "Optional. The service properties for soft delete."
                              },
                              "defaultValue": {
                                "enabled": true,
                                "days": 7
                              }
                            },
                            "corsRules": {
                              "type": "array",
                              "items": {
                                "$ref": "#/definitions/corsRuleType"
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The List of CORS rules. You can include up to five CorsRule elements in the request."
                              }
                            },
                            "diagnosticSettings": {
                              "type": "array",
                              "items": {
                                "$ref": "#/definitions/diagnosticSettingFullType"
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The diagnostic settings of the service."
                              }
                            },
                            "shares": {
                              "type": "array",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. File shares to create."
                              }
                            }
                          },
                          "variables": {
                            "enableReferencedModulesTelemetry": false
                          },
                          "resources": {
                            "storageAccount": {
                              "existing": true,
                              "type": "Microsoft.Storage/storageAccounts",
                              "apiVersion": "2024-01-01",
                              "name": "[parameters('storageAccountName')]"
                            },
                            "fileServices": {
                              "type": "Microsoft.Storage/storageAccounts/fileServices",
                              "apiVersion": "2024-01-01",
                              "name": "[format('{0}/{1}', parameters('storageAccountName'), parameters('name'))]",
                              "properties": {
                                "cors": "[if(not(equals(parameters('corsRules'), null())), createObject('corsRules', parameters('corsRules')), null())]",
                                "protocolSettings": "[parameters('protocolSettings')]",
                                "shareDeleteRetentionPolicy": "[parameters('shareDeleteRetentionPolicy')]"
                              }
                            },
                            "fileServices_diagnosticSettings": {
                              "copy": {
                                "name": "fileServices_diagnosticSettings",
                                "count": "[length(coalesce(parameters('diagnosticSettings'), createArray()))]"
                              },
                              "type": "Microsoft.Insights/diagnosticSettings",
                              "apiVersion": "2021-05-01-preview",
                              "scope": "[format('Microsoft.Storage/storageAccounts/{0}/fileServices/{1}', parameters('storageAccountName'), parameters('name'))]",
                              "name": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'name'), format('{0}-diagnosticSettings', parameters('name')))]",
                              "properties": {
                                "copy": [
                                  {
                                    "name": "metrics",
                                    "count": "[length(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics'))))]",
                                    "input": {
                                      "category": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics')))[copyIndex('metrics')].category]",
                                      "enabled": "[coalesce(tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics')))[copyIndex('metrics')], 'enabled'), true())]",
                                      "timeGrain": null
                                    }
                                  },
                                  {
                                    "name": "logs",
                                    "count": "[length(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs'))))]",
                                    "input": {
                                      "categoryGroup": "[tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'categoryGroup')]",
                                      "category": "[tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'category')]",
                                      "enabled": "[coalesce(tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'enabled'), true())]"
                                    }
                                  }
                                ],
                                "storageAccountId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'storageAccountResourceId')]",
                                "workspaceId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'workspaceResourceId')]",
                                "eventHubAuthorizationRuleId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubAuthorizationRuleResourceId')]",
                                "eventHubName": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubName')]",
                                "marketplacePartnerId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'marketplacePartnerResourceId')]",
                                "logAnalyticsDestinationType": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logAnalyticsDestinationType')]"
                              },
                              "dependsOn": [
                                "fileServices"
                              ]
                            },
                            "fileServices_shares": {
                              "copy": {
                                "name": "fileServices_shares",
                                "count": "[length(coalesce(parameters('shares'), createArray()))]"
                              },
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('{0}-shares-{1}', deployment().name, copyIndex())]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "storageAccountName": {
                                    "value": "[parameters('storageAccountName')]"
                                  },
                                  "fileServicesName": {
                                    "value": "[parameters('name')]"
                                  },
                                  "name": {
                                    "value": "[coalesce(parameters('shares'), createArray())[copyIndex()].name]"
                                  },
                                  "accessTier": {
                                    "value": "[coalesce(tryGet(coalesce(parameters('shares'), createArray())[copyIndex()], 'accessTier'), if(equals(reference('storageAccount', '2024-01-01', 'full').kind, 'FileStorage'), 'Premium', 'TransactionOptimized'))]"
                                  },
                                  "enabledProtocols": {
                                    "value": "[tryGet(coalesce(parameters('shares'), createArray())[copyIndex()], 'enabledProtocols')]"
                                  },
                                  "rootSquash": {
                                    "value": "[tryGet(coalesce(parameters('shares'), createArray())[copyIndex()], 'rootSquash')]"
                                  },
                                  "shareQuota": {
                                    "value": "[tryGet(coalesce(parameters('shares'), createArray())[copyIndex()], 'shareQuota')]"
                                  },
                                  "roleAssignments": {
                                    "value": "[tryGet(coalesce(parameters('shares'), createArray())[copyIndex()], 'roleAssignments')]"
                                  },
                                  "enableTelemetry": {
                                    "value": "[variables('enableReferencedModulesTelemetry')]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "languageVersion": "2.0",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.37.4.10188",
                                      "templateHash": "15881640847294537074"
                                    },
                                    "name": "Storage Account File Shares",
                                    "description": "This module deploys a Storage Account File Share."
                                  },
                                  "definitions": {
                                    "roleAssignmentType": {
                                      "type": "object",
                                      "properties": {
                                        "name": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The name (as GUID) of the role assignment. If not provided, a GUID will be generated."
                                          }
                                        },
                                        "roleDefinitionIdOrName": {
                                          "type": "string",
                                          "metadata": {
                                            "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                                          }
                                        },
                                        "principalId": {
                                          "type": "string",
                                          "metadata": {
                                            "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                                          }
                                        },
                                        "principalType": {
                                          "type": "string",
                                          "allowedValues": [
                                            "Device",
                                            "ForeignGroup",
                                            "Group",
                                            "ServicePrincipal",
                                            "User"
                                          ],
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The principal type of the assigned principal ID."
                                          }
                                        },
                                        "description": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The description of the role assignment."
                                          }
                                        },
                                        "condition": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                                          }
                                        },
                                        "conditionVersion": {
                                          "type": "string",
                                          "allowedValues": [
                                            "2.0"
                                          ],
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Version of the condition."
                                          }
                                        },
                                        "delegatedManagedIdentityResourceId": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The Resource Id of the delegated managed identity resource."
                                          }
                                        }
                                      },
                                      "metadata": {
                                        "description": "An AVM-aligned type for a role assignment.",
                                        "__bicep_imported_from!": {
                                          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.6.0"
                                        }
                                      }
                                    }
                                  },
                                  "parameters": {
                                    "storageAccountName": {
                                      "type": "string",
                                      "maxLength": 24,
                                      "metadata": {
                                        "description": "Conditional. The name of the parent Storage Account. Required if the template is used in a standalone deployment."
                                      }
                                    },
                                    "fileServicesName": {
                                      "type": "string",
                                      "defaultValue": "default",
                                      "metadata": {
                                        "description": "Conditional. The name of the parent file service. Required if the template is used in a standalone deployment."
                                      }
                                    },
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The name of the file share to create."
                                      }
                                    },
                                    "accessTier": {
                                      "type": "string",
                                      "defaultValue": "TransactionOptimized",
                                      "allowedValues": [
                                        "Premium",
                                        "Hot",
                                        "Cool",
                                        "TransactionOptimized"
                                      ],
                                      "metadata": {
                                        "description": "Conditional. Access tier for specific share. Required if the Storage Account kind is set to FileStorage (should be set to \"Premium\"). GpV2 account can choose between TransactionOptimized (default), Hot, and Cool."
                                      }
                                    },
                                    "shareQuota": {
                                      "type": "int",
                                      "defaultValue": 5120,
                                      "metadata": {
                                        "description": "Optional. The maximum size of the share, in gigabytes. Must be greater than 0, and less than or equal to 5120 (5TB). For Large File Shares, the maximum size is 102400 (100TB)."
                                      }
                                    },
                                    "enabledProtocols": {
                                      "type": "string",
                                      "defaultValue": "SMB",
                                      "allowedValues": [
                                        "NFS",
                                        "SMB"
                                      ],
                                      "metadata": {
                                        "description": "Optional. The authentication protocol that is used for the file share. Can only be specified when creating a share."
                                      }
                                    },
                                    "rootSquash": {
                                      "type": "string",
                                      "defaultValue": "NoRootSquash",
                                      "allowedValues": [
                                        "AllSquash",
                                        "NoRootSquash",
                                        "RootSquash"
                                      ],
                                      "metadata": {
                                        "description": "Optional. Permissions for NFS file shares are enforced by the client OS rather than the Azure Files service. Toggling the root squash behavior reduces the rights of the root user for NFS shares."
                                      }
                                    },
                                    "enableTelemetry": {
                                      "type": "bool",
                                      "defaultValue": true,
                                      "metadata": {
                                        "description": "Optional. Enable/Disable usage telemetry for module."
                                      }
                                    },
                                    "roleAssignments": {
                                      "type": "array",
                                      "items": {
                                        "$ref": "#/definitions/roleAssignmentType"
                                      },
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Array of role assignments to create."
                                      }
                                    }
                                  },
                                  "variables": {
                                    "copy": [
                                      {
                                        "name": "formattedRoleAssignments",
                                        "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]",
                                        "input": "[union(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')], createObject('roleDefinitionId', coalesce(tryGet(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName), if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName)))))]"
                                      }
                                    ],
                                    "builtInRoleNames": {
                                      "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                                      "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                                      "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                                      "Reader and Data Access": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'c12c1c16-33a1-487b-954d-41c89c60f349')]",
                                      "Role Based Access Control Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
                                      "Storage Account Backup Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'e5e2a7ff-d759-4cd2-bb51-3152d37e2eb1')]",
                                      "Storage Account Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '17d1049b-9a84-46fb-8f53-869881c3d3ab')]",
                                      "Storage Account Key Operator Service Role": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '81a9662b-bebf-436f-a333-f67b29880f12')]",
                                      "Storage File Data SMB Share Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '0c867c2a-1d8c-454a-a3db-ab2ea1bdc8bb')]",
                                      "Storage File Data SMB Share Elevated Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'a7264617-510b-434b-a828-9731dc254ea7')]",
                                      "Storage File Data SMB Share Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'aba4ae5f-2193-4029-9191-0cb91df5e314')]",
                                      "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
                                    }
                                  },
                                  "resources": {
                                    "storageAccount::fileService": {
                                      "existing": true,
                                      "type": "Microsoft.Storage/storageAccounts/fileServices",
                                      "apiVersion": "2024-01-01",
                                      "name": "[format('{0}/{1}', parameters('storageAccountName'), parameters('fileServicesName'))]"
                                    },
                                    "avmTelemetry": {
                                      "condition": "[parameters('enableTelemetry')]",
                                      "type": "Microsoft.Resources/deployments",
                                      "apiVersion": "2024-03-01",
                                      "name": "[format('46d3xbcp.res.storage-fileshare.{0}.{1}', replace('-..--..-', '.', '-'), substring(uniqueString(deployment().name), 0, 4))]",
                                      "properties": {
                                        "mode": "Incremental",
                                        "template": {
                                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                          "contentVersion": "1.0.0.0",
                                          "resources": [],
                                          "outputs": {
                                            "telemetry": {
                                              "type": "String",
                                              "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                                            }
                                          }
                                        }
                                      }
                                    },
                                    "storageAccount": {
                                      "existing": true,
                                      "type": "Microsoft.Storage/storageAccounts",
                                      "apiVersion": "2024-01-01",
                                      "name": "[parameters('storageAccountName')]"
                                    },
                                    "fileShare": {
                                      "type": "Microsoft.Storage/storageAccounts/fileServices/shares",
                                      "apiVersion": "2024-01-01",
                                      "name": "[format('{0}/{1}/{2}', parameters('storageAccountName'), parameters('fileServicesName'), parameters('name'))]",
                                      "properties": {
                                        "accessTier": "[parameters('accessTier')]",
                                        "shareQuota": "[parameters('shareQuota')]",
                                        "rootSquash": "[if(equals(parameters('enabledProtocols'), 'NFS'), parameters('rootSquash'), null())]",
                                        "enabledProtocols": "[parameters('enabledProtocols')]"
                                      }
                                    },
                                    "fileShare_roleAssignments": {
                                      "copy": {
                                        "name": "fileShare_roleAssignments",
                                        "count": "[length(coalesce(variables('formattedRoleAssignments'), createArray()))]"
                                      },
                                      "type": "Microsoft.Resources/deployments",
                                      "apiVersion": "2022-09-01",
                                      "name": "[format('{0}-Share-Rbac-{1}', uniqueString(deployment().name), copyIndex())]",
                                      "properties": {
                                        "expressionEvaluationOptions": {
                                          "scope": "inner"
                                        },
                                        "mode": "Incremental",
                                        "parameters": {
                                          "scope": {
                                            "value": "[replace(resourceId('Microsoft.Storage/storageAccounts/fileServices/shares', parameters('storageAccountName'), parameters('fileServicesName'), parameters('name')), '/shares/', '/fileshares/')]"
                                          },
                                          "name": {
                                            "value": "[coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'name'), guid(resourceId('Microsoft.Storage/storageAccounts/fileServices/shares', parameters('storageAccountName'), parameters('fileServicesName'), parameters('name')), coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId, coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId))]"
                                          },
                                          "roleDefinitionId": {
                                            "value": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId]"
                                          },
                                          "principalId": {
                                            "value": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId]"
                                          },
                                          "principalType": {
                                            "value": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'principalType')]"
                                          },
                                          "condition": {
                                            "value": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition')]"
                                          },
                                          "conditionVersion": "[if(not(empty(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition'))), createObject('value', coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0')), createObject('value', null()))]",
                                          "delegatedManagedIdentityResourceId": {
                                            "value": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                                          },
                                          "description": {
                                            "value": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'description')]"
                                          }
                                        },
                                        "template": {
                                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                          "contentVersion": "1.0.0.0",
                                          "parameters": {
                                            "scope": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Required. The scope to deploy the role assignment to."
                                              }
                                            },
                                            "name": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Required. The name of the role assignment."
                                              }
                                            },
                                            "roleDefinitionId": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Required. The role definition Id to assign."
                                              }
                                            },
                                            "principalId": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                                              }
                                            },
                                            "principalType": {
                                              "type": "string",
                                              "allowedValues": [
                                                "Device",
                                                "ForeignGroup",
                                                "Group",
                                                "ServicePrincipal",
                                                "User",
                                                ""
                                              ],
                                              "defaultValue": "",
                                              "metadata": {
                                                "description": "Optional. The principal type of the assigned principal ID."
                                              }
                                            },
                                            "description": {
                                              "type": "string",
                                              "defaultValue": "",
                                              "metadata": {
                                                "description": "Optional. The description of the role assignment."
                                              }
                                            },
                                            "condition": {
                                              "type": "string",
                                              "defaultValue": "",
                                              "metadata": {
                                                "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\""
                                              }
                                            },
                                            "conditionVersion": {
                                              "type": "string",
                                              "allowedValues": [
                                                "2.0"
                                              ],
                                              "defaultValue": "2.0",
                                              "metadata": {
                                                "description": "Optional. Version of the condition."
                                              }
                                            },
                                            "delegatedManagedIdentityResourceId": {
                                              "type": "string",
                                              "defaultValue": "",
                                              "metadata": {
                                                "description": "Optional. The Resource Id of the delegated managed identity resource."
                                              }
                                            }
                                          },
                                          "resources": [
                                            {
                                              "type": "Microsoft.Authorization/roleAssignments",
                                              "apiVersion": "2022-04-01",
                                              "scope": "[parameters('scope')]",
                                              "name": "[parameters('name')]",
                                              "properties": {
                                                "roleDefinitionId": "[parameters('roleDefinitionId')]",
                                                "principalId": "[parameters('principalId')]",
                                                "description": "[parameters('description')]",
                                                "principalType": "[if(not(empty(parameters('principalType'))), parameters('principalType'), null())]",
                                                "condition": "[if(not(empty(parameters('condition'))), parameters('condition'), null())]",
                                                "conditionVersion": "[if(and(not(empty(parameters('conditionVersion'))), not(empty(parameters('condition')))), parameters('conditionVersion'), null())]",
                                                "delegatedManagedIdentityResourceId": "[if(not(empty(parameters('delegatedManagedIdentityResourceId'))), parameters('delegatedManagedIdentityResourceId'), null())]"
                                              }
                                            }
                                          ]
                                        }
                                      },
                                      "dependsOn": [
                                        "fileShare"
                                      ]
                                    }
                                  },
                                  "outputs": {
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the deployed file share."
                                      },
                                      "value": "[parameters('name')]"
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource ID of the deployed file share."
                                      },
                                      "value": "[resourceId('Microsoft.Storage/storageAccounts/fileServices/shares', parameters('storageAccountName'), parameters('fileServicesName'), parameters('name'))]"
                                    },
                                    "resourceGroupName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource group of the deployed file share."
                                      },
                                      "value": "[resourceGroup().name]"
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "fileServices",
                                "storageAccount"
                              ]
                            }
                          },
                          "outputs": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the deployed file share service."
                              },
                              "value": "[parameters('name')]"
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource ID of the deployed file share service."
                              },
                              "value": "[resourceId('Microsoft.Storage/storageAccounts/fileServices', parameters('storageAccountName'), parameters('name'))]"
                            },
                            "resourceGroupName": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource group of the deployed file share service."
                              },
                              "value": "[resourceGroup().name]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "storageAccount"
                      ]
                    },
                    "storageAccount_queueServices": {
                      "condition": "[not(empty(parameters('queueServices')))]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('{0}-Storage-QueueServices', uniqueString(deployment().name, parameters('location')))]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "storageAccountName": {
                            "value": "[parameters('name')]"
                          },
                          "diagnosticSettings": {
                            "value": "[tryGet(parameters('queueServices'), 'diagnosticSettings')]"
                          },
                          "queues": {
                            "value": "[tryGet(parameters('queueServices'), 'queues')]"
                          },
                          "corsRules": {
                            "value": "[tryGet(parameters('queueServices'), 'corsRules')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "languageVersion": "2.0",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.37.4.10188",
                              "templateHash": "1100093319443502715"
                            },
                            "name": "Storage Account Queue Services",
                            "description": "This module deploys a Storage Account Queue Service."
                          },
                          "definitions": {
                            "corsRuleType": {
                              "type": "object",
                              "properties": {
                                "allowedHeaders": {
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  },
                                  "metadata": {
                                    "description": "Required. A list of headers allowed to be part of the cross-origin request."
                                  }
                                },
                                "allowedMethods": {
                                  "type": "array",
                                  "allowedValues": [
                                    "CONNECT",
                                    "DELETE",
                                    "GET",
                                    "HEAD",
                                    "MERGE",
                                    "OPTIONS",
                                    "PATCH",
                                    "POST",
                                    "PUT",
                                    "TRACE"
                                  ],
                                  "metadata": {
                                    "description": "Required. A list of HTTP methods that are allowed to be executed by the origin."
                                  }
                                },
                                "allowedOrigins": {
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  },
                                  "metadata": {
                                    "description": "Required. A list of origin domains that will be allowed via CORS, or \"*\" to allow all domains."
                                  }
                                },
                                "exposedHeaders": {
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  },
                                  "metadata": {
                                    "description": "Required. A list of response headers to expose to CORS clients."
                                  }
                                },
                                "maxAgeInSeconds": {
                                  "type": "int",
                                  "metadata": {
                                    "description": "Required. The number of seconds that the client/browser should cache a preflight response."
                                  }
                                }
                              },
                              "metadata": {
                                "__bicep_export!": true,
                                "description": "The type for a cors rule."
                              }
                            },
                            "diagnosticSettingFullType": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The name of the diagnostic setting."
                                  }
                                },
                                "logCategoriesAndGroups": {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "properties": {
                                      "category": {
                                        "type": "string",
                                        "nullable": true,
                                        "metadata": {
                                          "description": "Optional. Name of a Diagnostic Log category for a resource type this setting is applied to. Set the specific logs to collect here."
                                        }
                                      },
                                      "categoryGroup": {
                                        "type": "string",
                                        "nullable": true,
                                        "metadata": {
                                          "description": "Optional. Name of a Diagnostic Log category group for a resource type this setting is applied to. Set to `allLogs` to collect all logs."
                                        }
                                      },
                                      "enabled": {
                                        "type": "bool",
                                        "nullable": true,
                                        "metadata": {
                                          "description": "Optional. Enable or disable the category explicitly. Default is `true`."
                                        }
                                      }
                                    }
                                  },
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The name of logs that will be streamed. \"allLogs\" includes all possible logs for the resource. Set to `[]` to disable log collection."
                                  }
                                },
                                "metricCategories": {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "properties": {
                                      "category": {
                                        "type": "string",
                                        "metadata": {
                                          "description": "Required. Name of a Diagnostic Metric category for a resource type this setting is applied to. Set to `AllMetrics` to collect all metrics."
                                        }
                                      },
                                      "enabled": {
                                        "type": "bool",
                                        "nullable": true,
                                        "metadata": {
                                          "description": "Optional. Enable or disable the category explicitly. Default is `true`."
                                        }
                                      }
                                    }
                                  },
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The name of metrics that will be streamed. \"allMetrics\" includes all possible metrics for the resource. Set to `[]` to disable metric collection."
                                  }
                                },
                                "logAnalyticsDestinationType": {
                                  "type": "string",
                                  "allowedValues": [
                                    "AzureDiagnostics",
                                    "Dedicated"
                                  ],
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. A string indicating whether the export to Log Analytics should use the default destination type, i.e. AzureDiagnostics, or use a destination type."
                                  }
                                },
                                "workspaceResourceId": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Resource ID of the diagnostic log analytics workspace. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                                  }
                                },
                                "storageAccountResourceId": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Resource ID of the diagnostic storage account. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                                  }
                                },
                                "eventHubAuthorizationRuleResourceId": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
                                  }
                                },
                                "eventHubName": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                                  }
                                },
                                "marketplacePartnerResourceId": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The full ARM resource ID of the Marketplace resource to which you would like to send Diagnostic Logs."
                                  }
                                }
                              },
                              "metadata": {
                                "description": "An AVM-aligned type for a diagnostic setting. To be used if both logs & metrics are supported by the resource provider.",
                                "__bicep_imported_from!": {
                                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.6.0"
                                }
                              }
                            }
                          },
                          "parameters": {
                            "storageAccountName": {
                              "type": "string",
                              "maxLength": 24,
                              "metadata": {
                                "description": "Conditional. The name of the parent Storage Account. Required if the template is used in a standalone deployment."
                              }
                            },
                            "queues": {
                              "type": "array",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Queues to create."
                              }
                            },
                            "corsRules": {
                              "type": "array",
                              "items": {
                                "$ref": "#/definitions/corsRuleType"
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The List of CORS rules. You can include up to five CorsRule elements in the request."
                              }
                            },
                            "diagnosticSettings": {
                              "type": "array",
                              "items": {
                                "$ref": "#/definitions/diagnosticSettingFullType"
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The diagnostic settings of the service."
                              }
                            }
                          },
                          "variables": {
                            "name": "default"
                          },
                          "resources": {
                            "storageAccount": {
                              "existing": true,
                              "type": "Microsoft.Storage/storageAccounts",
                              "apiVersion": "2024-01-01",
                              "name": "[parameters('storageAccountName')]"
                            },
                            "queueServices": {
                              "type": "Microsoft.Storage/storageAccounts/queueServices",
                              "apiVersion": "2024-01-01",
                              "name": "[format('{0}/{1}', parameters('storageAccountName'), variables('name'))]",
                              "properties": {
                                "cors": "[if(not(equals(parameters('corsRules'), null())), createObject('corsRules', parameters('corsRules')), null())]"
                              }
                            },
                            "queueServices_diagnosticSettings": {
                              "copy": {
                                "name": "queueServices_diagnosticSettings",
                                "count": "[length(coalesce(parameters('diagnosticSettings'), createArray()))]"
                              },
                              "type": "Microsoft.Insights/diagnosticSettings",
                              "apiVersion": "2021-05-01-preview",
                              "scope": "[format('Microsoft.Storage/storageAccounts/{0}/queueServices/{1}', parameters('storageAccountName'), variables('name'))]",
                              "name": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'name'), format('{0}-diagnosticSettings', variables('name')))]",
                              "properties": {
                                "copy": [
                                  {
                                    "name": "metrics",
                                    "count": "[length(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics'))))]",
                                    "input": {
                                      "category": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics')))[copyIndex('metrics')].category]",
                                      "enabled": "[coalesce(tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics')))[copyIndex('metrics')], 'enabled'), true())]",
                                      "timeGrain": null
                                    }
                                  },
                                  {
                                    "name": "logs",
                                    "count": "[length(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs'))))]",
                                    "input": {
                                      "categoryGroup": "[tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'categoryGroup')]",
                                      "category": "[tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'category')]",
                                      "enabled": "[coalesce(tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'enabled'), true())]"
                                    }
                                  }
                                ],
                                "storageAccountId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'storageAccountResourceId')]",
                                "workspaceId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'workspaceResourceId')]",
                                "eventHubAuthorizationRuleId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubAuthorizationRuleResourceId')]",
                                "eventHubName": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubName')]",
                                "marketplacePartnerId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'marketplacePartnerResourceId')]",
                                "logAnalyticsDestinationType": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logAnalyticsDestinationType')]"
                              },
                              "dependsOn": [
                                "queueServices"
                              ]
                            },
                            "queueServices_queues": {
                              "copy": {
                                "name": "queueServices_queues",
                                "count": "[length(coalesce(parameters('queues'), createArray()))]"
                              },
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('{0}-Queue-{1}', deployment().name, copyIndex())]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "storageAccountName": {
                                    "value": "[parameters('storageAccountName')]"
                                  },
                                  "name": {
                                    "value": "[coalesce(parameters('queues'), createArray())[copyIndex()].name]"
                                  },
                                  "metadata": {
                                    "value": "[tryGet(coalesce(parameters('queues'), createArray())[copyIndex()], 'metadata')]"
                                  },
                                  "roleAssignments": {
                                    "value": "[tryGet(coalesce(parameters('queues'), createArray())[copyIndex()], 'roleAssignments')]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "languageVersion": "2.0",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.37.4.10188",
                                      "templateHash": "17963799770990303971"
                                    },
                                    "name": "Storage Account Queues",
                                    "description": "This module deploys a Storage Account Queue."
                                  },
                                  "definitions": {
                                    "roleAssignmentType": {
                                      "type": "object",
                                      "properties": {
                                        "name": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The name (as GUID) of the role assignment. If not provided, a GUID will be generated."
                                          }
                                        },
                                        "roleDefinitionIdOrName": {
                                          "type": "string",
                                          "metadata": {
                                            "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                                          }
                                        },
                                        "principalId": {
                                          "type": "string",
                                          "metadata": {
                                            "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                                          }
                                        },
                                        "principalType": {
                                          "type": "string",
                                          "allowedValues": [
                                            "Device",
                                            "ForeignGroup",
                                            "Group",
                                            "ServicePrincipal",
                                            "User"
                                          ],
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The principal type of the assigned principal ID."
                                          }
                                        },
                                        "description": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The description of the role assignment."
                                          }
                                        },
                                        "condition": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                                          }
                                        },
                                        "conditionVersion": {
                                          "type": "string",
                                          "allowedValues": [
                                            "2.0"
                                          ],
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Version of the condition."
                                          }
                                        },
                                        "delegatedManagedIdentityResourceId": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The Resource Id of the delegated managed identity resource."
                                          }
                                        }
                                      },
                                      "metadata": {
                                        "description": "An AVM-aligned type for a role assignment.",
                                        "__bicep_imported_from!": {
                                          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.6.0"
                                        }
                                      }
                                    }
                                  },
                                  "parameters": {
                                    "storageAccountName": {
                                      "type": "string",
                                      "maxLength": 24,
                                      "metadata": {
                                        "description": "Conditional. The name of the parent Storage Account. Required if the template is used in a standalone deployment."
                                      }
                                    },
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The name of the storage queue to deploy."
                                      }
                                    },
                                    "metadata": {
                                      "type": "object",
                                      "metadata": {
                                        "__bicep_resource_derived_type!": {
                                          "source": "Microsoft.Storage/storageAccounts/queueServices/queues@2024-01-01#properties/properties/properties/metadata"
                                        },
                                        "description": "Optional. A name-value pair that represents queue metadata."
                                      },
                                      "defaultValue": {}
                                    },
                                    "roleAssignments": {
                                      "type": "array",
                                      "items": {
                                        "$ref": "#/definitions/roleAssignmentType"
                                      },
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Array of role assignments to create."
                                      }
                                    }
                                  },
                                  "variables": {
                                    "copy": [
                                      {
                                        "name": "formattedRoleAssignments",
                                        "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]",
                                        "input": "[union(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')], createObject('roleDefinitionId', coalesce(tryGet(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName), if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName)))))]"
                                      }
                                    ],
                                    "builtInRoleNames": {
                                      "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                                      "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                                      "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                                      "Reader and Data Access": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'c12c1c16-33a1-487b-954d-41c89c60f349')]",
                                      "Role Based Access Control Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
                                      "Storage Account Backup Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'e5e2a7ff-d759-4cd2-bb51-3152d37e2eb1')]",
                                      "Storage Account Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '17d1049b-9a84-46fb-8f53-869881c3d3ab')]",
                                      "Storage Account Key Operator Service Role": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '81a9662b-bebf-436f-a333-f67b29880f12')]",
                                      "Storage Queue Data Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '974c5e8b-45b9-4653-ba55-5f855dd0fb88')]",
                                      "Storage Queue Data Message Processor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8a0f0c08-91a1-4084-bc3d-661d67233fed')]",
                                      "Storage Queue Data Message Sender": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'c6a89b2d-59bc-44d0-9896-0f6e12d7b80a')]",
                                      "Storage Queue Data Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '19e7f393-937e-4f77-808e-94535e297925')]",
                                      "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
                                    }
                                  },
                                  "resources": {
                                    "storageAccount::queueServices": {
                                      "existing": true,
                                      "type": "Microsoft.Storage/storageAccounts/queueServices",
                                      "apiVersion": "2024-01-01",
                                      "name": "[format('{0}/{1}', parameters('storageAccountName'), 'default')]"
                                    },
                                    "storageAccount": {
                                      "existing": true,
                                      "type": "Microsoft.Storage/storageAccounts",
                                      "apiVersion": "2024-01-01",
                                      "name": "[parameters('storageAccountName')]"
                                    },
                                    "queue": {
                                      "type": "Microsoft.Storage/storageAccounts/queueServices/queues",
                                      "apiVersion": "2024-01-01",
                                      "name": "[format('{0}/{1}/{2}', parameters('storageAccountName'), 'default', parameters('name'))]",
                                      "properties": {
                                        "metadata": "[parameters('metadata')]"
                                      }
                                    },
                                    "queue_roleAssignments": {
                                      "copy": {
                                        "name": "queue_roleAssignments",
                                        "count": "[length(coalesce(variables('formattedRoleAssignments'), createArray()))]"
                                      },
                                      "type": "Microsoft.Authorization/roleAssignments",
                                      "apiVersion": "2022-04-01",
                                      "scope": "[format('Microsoft.Storage/storageAccounts/{0}/queueServices/{1}/queues/{2}', parameters('storageAccountName'), 'default', parameters('name'))]",
                                      "name": "[coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'name'), guid(resourceId('Microsoft.Storage/storageAccounts/queueServices/queues', parameters('storageAccountName'), 'default', parameters('name')), coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId, coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId))]",
                                      "properties": {
                                        "roleDefinitionId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId]",
                                        "principalId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId]",
                                        "description": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'description')]",
                                        "principalType": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'principalType')]",
                                        "condition": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition')]",
                                        "conditionVersion": "[if(not(empty(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                                        "delegatedManagedIdentityResourceId": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                                      },
                                      "dependsOn": [
                                        "queue"
                                      ]
                                    }
                                  },
                                  "outputs": {
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the deployed queue."
                                      },
                                      "value": "[parameters('name')]"
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource ID of the deployed queue."
                                      },
                                      "value": "[resourceId('Microsoft.Storage/storageAccounts/queueServices/queues', parameters('storageAccountName'), 'default', parameters('name'))]"
                                    },
                                    "resourceGroupName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource group of the deployed queue."
                                      },
                                      "value": "[resourceGroup().name]"
                                    }
                                  }
                                }
                              }
                            }
                          },
                          "outputs": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the deployed file share service."
                              },
                              "value": "[variables('name')]"
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource ID of the deployed file share service."
                              },
                              "value": "[resourceId('Microsoft.Storage/storageAccounts/queueServices', parameters('storageAccountName'), variables('name'))]"
                            },
                            "resourceGroupName": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource group of the deployed file share service."
                              },
                              "value": "[resourceGroup().name]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "storageAccount"
                      ]
                    },
                    "storageAccount_tableServices": {
                      "condition": "[not(empty(parameters('tableServices')))]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('{0}-Storage-TableServices', uniqueString(deployment().name, parameters('location')))]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "storageAccountName": {
                            "value": "[parameters('name')]"
                          },
                          "diagnosticSettings": {
                            "value": "[tryGet(parameters('tableServices'), 'diagnosticSettings')]"
                          },
                          "tables": {
                            "value": "[tryGet(parameters('tableServices'), 'tables')]"
                          },
                          "corsRules": {
                            "value": "[tryGet(parameters('tableServices'), 'corsRules')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "languageVersion": "2.0",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.37.4.10188",
                              "templateHash": "13069389074590786512"
                            },
                            "name": "Storage Account Table Services",
                            "description": "This module deploys a Storage Account Table Service."
                          },
                          "definitions": {
                            "corsRuleType": {
                              "type": "object",
                              "properties": {
                                "allowedHeaders": {
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  },
                                  "metadata": {
                                    "description": "Required. A list of headers allowed to be part of the cross-origin request."
                                  }
                                },
                                "allowedMethods": {
                                  "type": "array",
                                  "allowedValues": [
                                    "CONNECT",
                                    "DELETE",
                                    "GET",
                                    "HEAD",
                                    "MERGE",
                                    "OPTIONS",
                                    "PATCH",
                                    "POST",
                                    "PUT",
                                    "TRACE"
                                  ],
                                  "metadata": {
                                    "description": "Required. A list of HTTP methods that are allowed to be executed by the origin."
                                  }
                                },
                                "allowedOrigins": {
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  },
                                  "metadata": {
                                    "description": "Required. A list of origin domains that will be allowed via CORS, or \"*\" to allow all domains."
                                  }
                                },
                                "exposedHeaders": {
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  },
                                  "metadata": {
                                    "description": "Required. A list of response headers to expose to CORS clients."
                                  }
                                },
                                "maxAgeInSeconds": {
                                  "type": "int",
                                  "metadata": {
                                    "description": "Required. The number of seconds that the client/browser should cache a preflight response."
                                  }
                                }
                              },
                              "metadata": {
                                "__bicep_export!": true,
                                "description": "The type for a cors rule."
                              }
                            },
                            "diagnosticSettingFullType": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The name of the diagnostic setting."
                                  }
                                },
                                "logCategoriesAndGroups": {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "properties": {
                                      "category": {
                                        "type": "string",
                                        "nullable": true,
                                        "metadata": {
                                          "description": "Optional. Name of a Diagnostic Log category for a resource type this setting is applied to. Set the specific logs to collect here."
                                        }
                                      },
                                      "categoryGroup": {
                                        "type": "string",
                                        "nullable": true,
                                        "metadata": {
                                          "description": "Optional. Name of a Diagnostic Log category group for a resource type this setting is applied to. Set to `allLogs` to collect all logs."
                                        }
                                      },
                                      "enabled": {
                                        "type": "bool",
                                        "nullable": true,
                                        "metadata": {
                                          "description": "Optional. Enable or disable the category explicitly. Default is `true`."
                                        }
                                      }
                                    }
                                  },
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The name of logs that will be streamed. \"allLogs\" includes all possible logs for the resource. Set to `[]` to disable log collection."
                                  }
                                },
                                "metricCategories": {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "properties": {
                                      "category": {
                                        "type": "string",
                                        "metadata": {
                                          "description": "Required. Name of a Diagnostic Metric category for a resource type this setting is applied to. Set to `AllMetrics` to collect all metrics."
                                        }
                                      },
                                      "enabled": {
                                        "type": "bool",
                                        "nullable": true,
                                        "metadata": {
                                          "description": "Optional. Enable or disable the category explicitly. Default is `true`."
                                        }
                                      }
                                    }
                                  },
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The name of metrics that will be streamed. \"allMetrics\" includes all possible metrics for the resource. Set to `[]` to disable metric collection."
                                  }
                                },
                                "logAnalyticsDestinationType": {
                                  "type": "string",
                                  "allowedValues": [
                                    "AzureDiagnostics",
                                    "Dedicated"
                                  ],
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. A string indicating whether the export to Log Analytics should use the default destination type, i.e. AzureDiagnostics, or use a destination type."
                                  }
                                },
                                "workspaceResourceId": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Resource ID of the diagnostic log analytics workspace. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                                  }
                                },
                                "storageAccountResourceId": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Resource ID of the diagnostic storage account. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                                  }
                                },
                                "eventHubAuthorizationRuleResourceId": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
                                  }
                                },
                                "eventHubName": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                                  }
                                },
                                "marketplacePartnerResourceId": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The full ARM resource ID of the Marketplace resource to which you would like to send Diagnostic Logs."
                                  }
                                }
                              },
                              "metadata": {
                                "description": "An AVM-aligned type for a diagnostic setting. To be used if both logs & metrics are supported by the resource provider.",
                                "__bicep_imported_from!": {
                                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.6.0"
                                }
                              }
                            }
                          },
                          "parameters": {
                            "storageAccountName": {
                              "type": "string",
                              "maxLength": 24,
                              "metadata": {
                                "description": "Conditional. The name of the parent Storage Account. Required if the template is used in a standalone deployment."
                              }
                            },
                            "tables": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. tables to create."
                              }
                            },
                            "corsRules": {
                              "type": "array",
                              "items": {
                                "$ref": "#/definitions/corsRuleType"
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The List of CORS rules. You can include up to five CorsRule elements in the request."
                              }
                            },
                            "diagnosticSettings": {
                              "type": "array",
                              "items": {
                                "$ref": "#/definitions/diagnosticSettingFullType"
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The diagnostic settings of the service."
                              }
                            }
                          },
                          "variables": {
                            "name": "default"
                          },
                          "resources": {
                            "storageAccount": {
                              "existing": true,
                              "type": "Microsoft.Storage/storageAccounts",
                              "apiVersion": "2024-01-01",
                              "name": "[parameters('storageAccountName')]"
                            },
                            "tableServices": {
                              "type": "Microsoft.Storage/storageAccounts/tableServices",
                              "apiVersion": "2024-01-01",
                              "name": "[format('{0}/{1}', parameters('storageAccountName'), variables('name'))]",
                              "properties": {
                                "cors": "[if(not(equals(parameters('corsRules'), null())), createObject('corsRules', parameters('corsRules')), null())]"
                              }
                            },
                            "tableServices_diagnosticSettings": {
                              "copy": {
                                "name": "tableServices_diagnosticSettings",
                                "count": "[length(coalesce(parameters('diagnosticSettings'), createArray()))]"
                              },
                              "type": "Microsoft.Insights/diagnosticSettings",
                              "apiVersion": "2021-05-01-preview",
                              "scope": "[format('Microsoft.Storage/storageAccounts/{0}/tableServices/{1}', parameters('storageAccountName'), variables('name'))]",
                              "name": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'name'), format('{0}-diagnosticSettings', variables('name')))]",
                              "properties": {
                                "copy": [
                                  {
                                    "name": "metrics",
                                    "count": "[length(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics'))))]",
                                    "input": {
                                      "category": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics')))[copyIndex('metrics')].category]",
                                      "enabled": "[coalesce(tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics')))[copyIndex('metrics')], 'enabled'), true())]",
                                      "timeGrain": null
                                    }
                                  },
                                  {
                                    "name": "logs",
                                    "count": "[length(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs'))))]",
                                    "input": {
                                      "categoryGroup": "[tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'categoryGroup')]",
                                      "category": "[tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'category')]",
                                      "enabled": "[coalesce(tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'enabled'), true())]"
                                    }
                                  }
                                ],
                                "storageAccountId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'storageAccountResourceId')]",
                                "workspaceId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'workspaceResourceId')]",
                                "eventHubAuthorizationRuleId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubAuthorizationRuleResourceId')]",
                                "eventHubName": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubName')]",
                                "marketplacePartnerId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'marketplacePartnerResourceId')]",
                                "logAnalyticsDestinationType": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logAnalyticsDestinationType')]"
                              },
                              "dependsOn": [
                                "tableServices"
                              ]
                            },
                            "tableServices_tables": {
                              "copy": {
                                "name": "tableServices_tables",
                                "count": "[length(parameters('tables'))]"
                              },
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('{0}-Table-{1}', deployment().name, copyIndex())]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "name": {
                                    "value": "[parameters('tables')[copyIndex()].name]"
                                  },
                                  "storageAccountName": {
                                    "value": "[parameters('storageAccountName')]"
                                  },
                                  "roleAssignments": {
                                    "value": "[tryGet(parameters('tables')[copyIndex()], 'roleAssignments')]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "languageVersion": "2.0",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.37.4.10188",
                                      "templateHash": "10905926757212375091"
                                    },
                                    "name": "Storage Account Table",
                                    "description": "This module deploys a Storage Account Table."
                                  },
                                  "definitions": {
                                    "roleAssignmentType": {
                                      "type": "object",
                                      "properties": {
                                        "name": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The name (as GUID) of the role assignment. If not provided, a GUID will be generated."
                                          }
                                        },
                                        "roleDefinitionIdOrName": {
                                          "type": "string",
                                          "metadata": {
                                            "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                                          }
                                        },
                                        "principalId": {
                                          "type": "string",
                                          "metadata": {
                                            "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                                          }
                                        },
                                        "principalType": {
                                          "type": "string",
                                          "allowedValues": [
                                            "Device",
                                            "ForeignGroup",
                                            "Group",
                                            "ServicePrincipal",
                                            "User"
                                          ],
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The principal type of the assigned principal ID."
                                          }
                                        },
                                        "description": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The description of the role assignment."
                                          }
                                        },
                                        "condition": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                                          }
                                        },
                                        "conditionVersion": {
                                          "type": "string",
                                          "allowedValues": [
                                            "2.0"
                                          ],
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Version of the condition."
                                          }
                                        },
                                        "delegatedManagedIdentityResourceId": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The Resource Id of the delegated managed identity resource."
                                          }
                                        }
                                      },
                                      "metadata": {
                                        "description": "An AVM-aligned type for a role assignment.",
                                        "__bicep_imported_from!": {
                                          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.6.0"
                                        }
                                      }
                                    }
                                  },
                                  "parameters": {
                                    "storageAccountName": {
                                      "type": "string",
                                      "maxLength": 24,
                                      "metadata": {
                                        "description": "Conditional. The name of the parent Storage Account. Required if the template is used in a standalone deployment."
                                      }
                                    },
                                    "roleAssignments": {
                                      "type": "array",
                                      "items": {
                                        "$ref": "#/definitions/roleAssignmentType"
                                      },
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Array of role assignments to create."
                                      }
                                    },
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. Name of the table."
                                      }
                                    }
                                  },
                                  "variables": {
                                    "copy": [
                                      {
                                        "name": "formattedRoleAssignments",
                                        "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]",
                                        "input": "[union(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')], createObject('roleDefinitionId', coalesce(tryGet(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName), if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName)))))]"
                                      }
                                    ],
                                    "builtInRoleNames": {
                                      "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                                      "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                                      "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                                      "Reader and Data Access": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'c12c1c16-33a1-487b-954d-41c89c60f349')]",
                                      "Role Based Access Control Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
                                      "Storage Account Backup Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'e5e2a7ff-d759-4cd2-bb51-3152d37e2eb1')]",
                                      "Storage Account Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '17d1049b-9a84-46fb-8f53-869881c3d3ab')]",
                                      "Storage Account Key Operator Service Role": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '81a9662b-bebf-436f-a333-f67b29880f12')]",
                                      "Storage Table Data Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '0a9a7e1f-b9d0-4cc4-a60d-0319b160aaa3')]",
                                      "Storage Table Data Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '76199698-9eea-4c19-bc75-cec21354c6b6')]",
                                      "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
                                    }
                                  },
                                  "resources": {
                                    "storageAccount::tableServices": {
                                      "existing": true,
                                      "type": "Microsoft.Storage/storageAccounts/tableServices",
                                      "apiVersion": "2024-01-01",
                                      "name": "[format('{0}/{1}', parameters('storageAccountName'), 'default')]"
                                    },
                                    "storageAccount": {
                                      "existing": true,
                                      "type": "Microsoft.Storage/storageAccounts",
                                      "apiVersion": "2024-01-01",
                                      "name": "[parameters('storageAccountName')]"
                                    },
                                    "table": {
                                      "type": "Microsoft.Storage/storageAccounts/tableServices/tables",
                                      "apiVersion": "2024-01-01",
                                      "name": "[format('{0}/{1}/{2}', parameters('storageAccountName'), 'default', parameters('name'))]"
                                    },
                                    "table_roleAssignments": {
                                      "copy": {
                                        "name": "table_roleAssignments",
                                        "count": "[length(coalesce(variables('formattedRoleAssignments'), createArray()))]"
                                      },
                                      "type": "Microsoft.Authorization/roleAssignments",
                                      "apiVersion": "2022-04-01",
                                      "scope": "[format('Microsoft.Storage/storageAccounts/{0}/tableServices/{1}/tables/{2}', parameters('storageAccountName'), 'default', parameters('name'))]",
                                      "name": "[coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'name'), guid(resourceId('Microsoft.Storage/storageAccounts/tableServices/tables', parameters('storageAccountName'), 'default', parameters('name')), coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId, coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId))]",
                                      "properties": {
                                        "roleDefinitionId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId]",
                                        "principalId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId]",
                                        "description": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'description')]",
                                        "principalType": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'principalType')]",
                                        "condition": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition')]",
                                        "conditionVersion": "[if(not(empty(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                                        "delegatedManagedIdentityResourceId": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                                      },
                                      "dependsOn": [
                                        "table"
                                      ]
                                    }
                                  },
                                  "outputs": {
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the deployed file share service."
                                      },
                                      "value": "[parameters('name')]"
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource ID of the deployed file share service."
                                      },
                                      "value": "[resourceId('Microsoft.Storage/storageAccounts/tableServices/tables', parameters('storageAccountName'), 'default', parameters('name'))]"
                                    },
                                    "resourceGroupName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource group of the deployed file share service."
                                      },
                                      "value": "[resourceGroup().name]"
                                    }
                                  }
                                }
                              }
                            }
                          },
                          "outputs": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the deployed table service."
                              },
                              "value": "[variables('name')]"
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource ID of the deployed table service."
                              },
                              "value": "[resourceId('Microsoft.Storage/storageAccounts/tableServices', parameters('storageAccountName'), variables('name'))]"
                            },
                            "resourceGroupName": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource group of the deployed table service."
                              },
                              "value": "[resourceGroup().name]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "storageAccount"
                      ]
                    },
                    "secretsExport": {
                      "condition": "[not(equals(parameters('secretsExportConfiguration'), null()))]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('{0}-secrets-kv', uniqueString(deployment().name, parameters('location')))]",
                      "subscriptionId": "[split(tryGet(parameters('secretsExportConfiguration'), 'keyVaultResourceId'), '/')[2]]",
                      "resourceGroup": "[split(tryGet(parameters('secretsExportConfiguration'), 'keyVaultResourceId'), '/')[4]]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "keyVaultName": {
                            "value": "[last(split(tryGet(parameters('secretsExportConfiguration'), 'keyVaultResourceId'), '/'))]"
                          },
                          "secretsToSet": {
                            "value": "[union(createArray(), if(contains(parameters('secretsExportConfiguration'), 'accessKey1Name'), createArray(createObject('name', tryGet(parameters('secretsExportConfiguration'), 'accessKey1Name'), 'value', listKeys('storageAccount', '2024-01-01').keys[0].value)), createArray()), if(contains(parameters('secretsExportConfiguration'), 'connectionString1Name'), createArray(createObject('name', tryGet(parameters('secretsExportConfiguration'), 'connectionString1Name'), 'value', format('DefaultEndpointsProtocol=https;AccountName={0};AccountKey={1};EndpointSuffix={2}', parameters('name'), listKeys('storageAccount', '2024-01-01').keys[0].value, environment().suffixes.storage))), createArray()), if(contains(parameters('secretsExportConfiguration'), 'accessKey2Name'), createArray(createObject('name', tryGet(parameters('secretsExportConfiguration'), 'accessKey2Name'), 'value', listKeys('storageAccount', '2024-01-01').keys[1].value)), createArray()), if(contains(parameters('secretsExportConfiguration'), 'connectionString2Name'), createArray(createObject('name', tryGet(parameters('secretsExportConfiguration'), 'connectionString2Name'), 'value', format('DefaultEndpointsProtocol=https;AccountName={0};AccountKey={1};EndpointSuffix={2}', parameters('name'), listKeys('storageAccount', '2024-01-01').keys[1].value, environment().suffixes.storage))), createArray()))]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "languageVersion": "2.0",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.37.4.10188",
                              "templateHash": "9368972709899985618"
                            }
                          },
                          "definitions": {
                            "secretSetOutputType": {
                              "type": "object",
                              "properties": {
                                "secretResourceId": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "The resourceId of the exported secret."
                                  }
                                },
                                "secretUri": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "The secret URI of the exported secret."
                                  }
                                },
                                "secretUriWithVersion": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "The secret URI with version of the exported secret."
                                  }
                                }
                              },
                              "metadata": {
                                "description": "An AVM-aligned type for the output of the secret set via the secrets export feature.",
                                "__bicep_imported_from!": {
                                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.6.0"
                                }
                              }
                            },
                            "secretToSetType": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. The name of the secret to set."
                                  }
                                },
                                "value": {
                                  "type": "securestring",
                                  "metadata": {
                                    "description": "Required. The value of the secret to set."
                                  }
                                }
                              },
                              "metadata": {
                                "description": "An AVM-aligned type for the secret to set via the secrets export feature.",
                                "__bicep_imported_from!": {
                                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.6.0"
                                }
                              }
                            }
                          },
                          "parameters": {
                            "keyVaultName": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The name of the Key Vault to set the ecrets in."
                              }
                            },
                            "secretsToSet": {
                              "type": "array",
                              "items": {
                                "$ref": "#/definitions/secretToSetType"
                              },
                              "metadata": {
                                "description": "Required. The secrets to set in the Key Vault."
                              }
                            }
                          },
                          "resources": {
                            "keyVault": {
                              "existing": true,
                              "type": "Microsoft.KeyVault/vaults",
                              "apiVersion": "2024-11-01",
                              "name": "[parameters('keyVaultName')]"
                            },
                            "secrets": {
                              "copy": {
                                "name": "secrets",
                                "count": "[length(parameters('secretsToSet'))]"
                              },
                              "type": "Microsoft.KeyVault/vaults/secrets",
                              "apiVersion": "2024-11-01",
                              "name": "[format('{0}/{1}', parameters('keyVaultName'), parameters('secretsToSet')[copyIndex()].name)]",
                              "properties": {
                                "value": "[parameters('secretsToSet')[copyIndex()].value]"
                              }
                            }
                          },
                          "outputs": {
                            "secretsSet": {
                              "type": "array",
                              "items": {
                                "$ref": "#/definitions/secretSetOutputType"
                              },
                              "metadata": {
                                "description": "The references to the secrets exported to the provided Key Vault."
                              },
                              "copy": {
                                "count": "[length(range(0, length(coalesce(parameters('secretsToSet'), createArray()))))]",
                                "input": {
                                  "secretResourceId": "[resourceId('Microsoft.KeyVault/vaults/secrets', parameters('keyVaultName'), parameters('secretsToSet')[range(0, length(coalesce(parameters('secretsToSet'), createArray())))[copyIndex()]].name)]",
                                  "secretUri": "[reference(format('secrets[{0}]', range(0, length(coalesce(parameters('secretsToSet'), createArray())))[copyIndex()])).secretUri]",
                                  "secretUriWithVersion": "[reference(format('secrets[{0}]', range(0, length(coalesce(parameters('secretsToSet'), createArray())))[copyIndex()])).secretUriWithVersion]"
                                }
                              }
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "storageAccount"
                      ]
                    }
                  },
                  "outputs": {
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the deployed storage account."
                      },
                      "value": "[resourceId('Microsoft.Storage/storageAccounts', parameters('name'))]"
                    },
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the deployed storage account."
                      },
                      "value": "[parameters('name')]"
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource group of the deployed storage account."
                      },
                      "value": "[resourceGroup().name]"
                    },
                    "primaryBlobEndpoint": {
                      "type": "string",
                      "metadata": {
                        "description": "The primary blob endpoint reference if blob services are deployed."
                      },
                      "value": "[if(and(not(empty(parameters('blobServices'))), contains(parameters('blobServices'), 'containers')), reference(format('Microsoft.Storage/storageAccounts/{0}', parameters('name')), '2019-04-01').primaryEndpoints.blob, '')]"
                    },
                    "systemAssignedMIPrincipalId": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "The principal ID of the system assigned identity."
                      },
                      "value": "[tryGet(tryGet(reference('storageAccount', '2024-01-01', 'full'), 'identity'), 'principalId')]"
                    },
                    "location": {
                      "type": "string",
                      "metadata": {
                        "description": "The location the resource was deployed into."
                      },
                      "value": "[reference('storageAccount', '2024-01-01', 'full').location]"
                    },
                    "serviceEndpoints": {
                      "type": "object",
                      "metadata": {
                        "description": "All service endpoints of the deployed storage account, Note Standard_LRS and Standard_ZRS accounts only have a blob service endpoint."
                      },
                      "value": "[reference('storageAccount').primaryEndpoints]"
                    },
                    "privateEndpoints": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/privateEndpointOutputType"
                      },
                      "metadata": {
                        "description": "The private endpoints of the Storage Account."
                      },
                      "copy": {
                        "count": "[length(coalesce(parameters('privateEndpoints'), createArray()))]",
                        "input": {
                          "name": "[reference(format('storageAccount_privateEndpoints[{0}]', copyIndex())).outputs.name.value]",
                          "resourceId": "[reference(format('storageAccount_privateEndpoints[{0}]', copyIndex())).outputs.resourceId.value]",
                          "groupId": "[tryGet(tryGet(reference(format('storageAccount_privateEndpoints[{0}]', copyIndex())).outputs, 'groupId'), 'value')]",
                          "customDnsConfigs": "[reference(format('storageAccount_privateEndpoints[{0}]', copyIndex())).outputs.customDnsConfigs.value]",
                          "networkInterfaceResourceIds": "[reference(format('storageAccount_privateEndpoints[{0}]', copyIndex())).outputs.networkInterfaceResourceIds.value]"
                        }
                      }
                    },
                    "exportedSecrets": {
                      "$ref": "#/definitions/secretsOutputType",
                      "metadata": {
                        "description": "A hashtable of references to the secrets exported to the provided Key Vault. The key of each reference is each secret's name."
                      },
                      "value": "[if(not(equals(parameters('secretsExportConfiguration'), null())), toObject(reference('secretsExport').outputs.secretsSet.value, lambda('secret', last(split(lambdaVariables('secret').secretResourceId, '/'))), lambda('secret', lambdaVariables('secret'))), createObject())]"
                    },
                    "primaryAccessKey": {
                      "type": "securestring",
                      "metadata": {
                        "description": "The primary access key of the storage account."
                      },
                      "value": "[listKeys('storageAccount', '2024-01-01').keys[0].value]"
                    },
                    "secondaryAccessKey": {
                      "type": "securestring",
                      "metadata": {
                        "description": "The secondary access key of the storage account."
                      },
                      "value": "[listKeys('storageAccount', '2024-01-01').keys[1].value]"
                    },
                    "primaryConnectionString": {
                      "type": "securestring",
                      "metadata": {
                        "description": "The primary connection string of the storage account."
                      },
                      "value": "[format('DefaultEndpointsProtocol=https;AccountName={0};AccountKey={1};EndpointSuffix={2}', parameters('name'), listKeys('storageAccount', '2024-01-01').keys[0].value, environment().suffixes.storage)]"
                    },
                    "secondaryConnectionString": {
                      "type": "securestring",
                      "metadata": {
                        "description": "The secondary connection string of the storage account."
                      },
                      "value": "[format('DefaultEndpointsProtocol=https;AccountName={0};AccountKey={1};EndpointSuffix={2}', parameters('name'), listKeys('storageAccount', '2024-01-01').keys[1].value, environment().suffixes.storage)]"
                    }
                  }
                }
              }
            }
          },
          "outputs": {
            "name": {
              "type": "string",
              "metadata": {
                "description": "Name of the Storage Account."
              },
              "value": "[if(empty(parameters('existingResourceId')), reference('storageAccount').outputs.name.value, variables('existingName'))]"
            },
            "resourceId": {
              "type": "string",
              "metadata": {
                "description": "Resource ID of the Storage Account."
              },
              "value": "[if(empty(parameters('existingResourceId')), reference('storageAccount').outputs.resourceId.value, extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('existingSubscriptionId'), variables('existingResourceGroupName')), 'Microsoft.Storage/storageAccounts', variables('existingName')))]"
            },
            "subscriptionId": {
              "type": "string",
              "metadata": {
                "description": "Subscription ID of the Storage Account."
              },
              "value": "[if(empty(parameters('existingResourceId')), subscription().subscriptionId, variables('existingSubscriptionId'))]"
            },
            "resourceGroupName": {
              "type": "string",
              "metadata": {
                "description": "Resource Group Name of the Storage Account."
              },
              "value": "[if(empty(parameters('existingResourceId')), resourceGroup().name, variables('existingResourceGroupName'))]"
            }
          }
        }
      },
      "dependsOn": [
        "aiSearch",
        "foundryAccount"
      ]
    },
    "cosmosDb": {
      "condition": "[parameters('includeAssociatedResources')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[take(format('module.cosmosDb.{0}', variables('resourcesName')), 64)]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "existingResourceId": {
            "value": "[tryGet(parameters('cosmosDbConfiguration'), 'existingResourceId')]"
          },
          "name": {
            "value": "[take(if(not(empty(tryGet(parameters('cosmosDbConfiguration'), 'name'))), parameters('cosmosDbConfiguration').name, format('cos{0}', variables('resourcesName'))), 44)]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "tags": {
            "value": "[parameters('tags')]"
          },
          "enableTelemetry": {
            "value": "[parameters('enableTelemetry')]"
          },
          "privateEndpointSubnetResourceId": {
            "value": "[parameters('privateEndpointSubnetResourceId')]"
          },
          "privateDnsZoneResourceId": {
            "value": "[tryGet(parameters('cosmosDbConfiguration'), 'privateDnsZoneResourceId')]"
          },
          "roleAssignments": {
            "value": "[tryGet(parameters('cosmosDbConfiguration'), 'roleAssignments')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "languageVersion": "2.0",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "9713840631975182834"
            }
          },
          "definitions": {
            "roleAssignmentType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The name (as GUID) of the role assignment. If not provided, a GUID will be generated."
                  }
                },
                "roleDefinitionIdOrName": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                  }
                },
                "principalId": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                  }
                },
                "principalType": {
                  "type": "string",
                  "allowedValues": [
                    "Device",
                    "ForeignGroup",
                    "Group",
                    "ServicePrincipal",
                    "User"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The principal type of the assigned principal ID."
                  }
                },
                "description": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The description of the role assignment."
                  }
                },
                "condition": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                  }
                },
                "conditionVersion": {
                  "type": "string",
                  "allowedValues": [
                    "2.0"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Version of the condition."
                  }
                },
                "delegatedManagedIdentityResourceId": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The Resource Id of the delegated managed identity resource."
                  }
                }
              },
              "metadata": {
                "description": "An AVM-aligned type for a role assignment.",
                "__bicep_imported_from!": {
                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.6.0"
                }
              }
            }
          },
          "functions": [
            {
              "namespace": "__bicep",
              "members": {
                "getResourceGroupName": {
                  "parameters": [
                    {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "name": "parts"
                    }
                  ],
                  "output": {
                    "type": "string",
                    "value": "[if(greater(length(parameters('parts')), 4), parameters('parts')[4], resourceGroup().name)]"
                  },
                  "metadata": {
                    "description": "Extracts the Resource Group Name from a Resource ID.",
                    "__bicep_imported_from!": {
                      "sourceTemplate": "parseResourceIdFunctions.bicep"
                    }
                  }
                },
                "getResourceName": {
                  "parameters": [
                    {
                      "type": "string",
                      "nullable": true,
                      "name": "resourceId"
                    },
                    {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "name": "parts"
                    }
                  ],
                  "output": {
                    "type": "string",
                    "value": "[if(and(and(not(empty(parameters('resourceId'))), contains(parameters('resourceId'), '/')), not(empty(parameters('parts')))), last(parameters('parts')), coalesce(parameters('resourceId'), ''))]"
                  },
                  "metadata": {
                    "description": "Extracts the Resource Name from a Resource ID.",
                    "__bicep_imported_from!": {
                      "sourceTemplate": "parseResourceIdFunctions.bicep"
                    }
                  }
                },
                "getResourceParts": {
                  "parameters": [
                    {
                      "type": "string",
                      "nullable": true,
                      "name": "resourceId"
                    }
                  ],
                  "output": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "value": "[split(coalesce(parameters('resourceId'), ''), '/')]"
                  },
                  "metadata": {
                    "description": "Splits Resource ID into its components.",
                    "__bicep_imported_from!": {
                      "sourceTemplate": "parseResourceIdFunctions.bicep"
                    }
                  }
                },
                "getSubscriptionId": {
                  "parameters": [
                    {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "name": "parts"
                    }
                  ],
                  "output": {
                    "type": "string",
                    "value": "[if(greater(length(parameters('parts')), 2), parameters('parts')[2], subscription().subscriptionId)]"
                  },
                  "metadata": {
                    "description": "Extracts the Subscription ID from a Resource ID.",
                    "__bicep_imported_from!": {
                      "sourceTemplate": "parseResourceIdFunctions.bicep"
                    }
                  }
                }
              }
            }
          ],
          "parameters": {
            "name": {
              "type": "string",
              "maxLength": 44,
              "metadata": {
                "description": "Required. The name of the Cosmos DB."
              }
            },
            "location": {
              "type": "string",
              "metadata": {
                "description": "Required. The location for the Cosmos DB."
              }
            },
            "existingResourceId": {
              "type": "string",
              "nullable": true,
              "metadata": {
                "description": "Optional. The full resource ID of an existing Cosmos DB to use instead of creating a new one."
              }
            },
            "privateEndpointSubnetResourceId": {
              "type": "string",
              "nullable": true,
              "metadata": {
                "description": "Optional. Resource Id of an existing subnet to use for private connectivity. This is required along with 'privateDnsZoneResourceId' to establish private endpoints."
              }
            },
            "privateDnsZoneResourceId": {
              "type": "string",
              "nullable": true,
              "metadata": {
                "description": "Optional. The resource ID of the private DNS zone for the Cosmos DB to establish private endpoints."
              }
            },
            "roleAssignments": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/roleAssignmentType"
              },
              "nullable": true,
              "metadata": {
                "description": "Optional. Specifies the role assignments for the Cosmos DB."
              }
            },
            "enableTelemetry": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Optional. Enable/Disable usage telemetry for module."
              }
            },
            "tags": {
              "type": "object",
              "metadata": {
                "__bicep_resource_derived_type!": {
                  "source": "Microsoft.Resources/resourceGroups@2025-04-01#properties/tags"
                },
                "description": "Optional. Specifies the resource tags for all the resources."
              },
              "defaultValue": {}
            }
          },
          "variables": {
            "existingResourceParts": "[__bicep.getResourceParts(parameters('existingResourceId'))]",
            "existingName": "[__bicep.getResourceName(parameters('existingResourceId'), variables('existingResourceParts'))]",
            "existingSubscriptionId": "[__bicep.getSubscriptionId(variables('existingResourceParts'))]",
            "existingResourceGroupName": "[__bicep.getResourceGroupName(variables('existingResourceParts'))]",
            "privateNetworkingEnabled": "[and(not(empty(parameters('privateDnsZoneResourceId'))), not(empty(parameters('privateEndpointSubnetResourceId'))))]"
          },
          "resources": {
            "existingCosmosDb": {
              "condition": "[not(empty(parameters('existingResourceId')))]",
              "existing": true,
              "type": "Microsoft.DocumentDB/databaseAccounts",
              "apiVersion": "2025-04-15",
              "subscriptionId": "[variables('existingSubscriptionId')]",
              "resourceGroup": "[variables('existingResourceGroupName')]",
              "name": "[variables('existingName')]"
            },
            "cosmosDb": {
              "condition": "[empty(parameters('existingResourceId'))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[take(format('avm.res.document-db.database-account.{0}', parameters('name')), 64)]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "[parameters('name')]"
                  },
                  "enableTelemetry": {
                    "value": "[parameters('enableTelemetry')]"
                  },
                  "automaticFailover": {
                    "value": true
                  },
                  "disableKeyBasedMetadataWriteAccess": {
                    "value": true
                  },
                  "disableLocalAuthentication": {
                    "value": true
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "minimumTlsVersion": {
                    "value": "Tls12"
                  },
                  "defaultConsistencyLevel": {
                    "value": "Session"
                  },
                  "networkRestrictions": {
                    "value": {
                      "networkAclBypass": "AzureServices",
                      "publicNetworkAccess": "[if(variables('privateNetworkingEnabled'), 'Disabled', 'Enabled')]"
                    }
                  },
                  "privateEndpoints": "[if(variables('privateNetworkingEnabled'), createObject('value', createArray(createObject('privateDnsZoneGroup', createObject('privateDnsZoneGroupConfigs', createArray(createObject('privateDnsZoneResourceId', parameters('privateDnsZoneResourceId')))), 'service', 'Sql', 'subnetResourceId', parameters('privateEndpointSubnetResourceId')))), createObject('value', createArray()))]",
                  "roleAssignments": {
                    "value": "[parameters('roleAssignments')]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "languageVersion": "2.0",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.35.1.17967",
                      "templateHash": "8020152823352819436"
                    },
                    "name": "Azure Cosmos DB account",
                    "description": "This module deploys an Azure Cosmos DB account. The API used for the account is determined by the child resources that are deployed."
                  },
                  "definitions": {
                    "privateEndpointOutputType": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "metadata": {
                            "description": "The name of the private endpoint."
                          }
                        },
                        "resourceId": {
                          "type": "string",
                          "metadata": {
                            "description": "The resource ID of the private endpoint."
                          }
                        },
                        "groupId": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "The group ID for the private endpoint group."
                          }
                        },
                        "customDnsConfigs": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "fqdn": {
                                "type": "string",
                                "nullable": true,
                                "metadata": {
                                  "description": "fully-qualified domain name (FQDN) that resolves to private endpoint IP address."
                                }
                              },
                              "ipAddresses": {
                                "type": "array",
                                "items": {
                                  "type": "string"
                                },
                                "metadata": {
                                  "description": "A list of private IP addresses for the private endpoint."
                                }
                              }
                            }
                          },
                          "metadata": {
                            "description": "The custom DNS configurations of the private endpoint."
                          }
                        },
                        "networkInterfaceResourceIds": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "metadata": {
                            "description": "The IDs of the network interfaces associated with the private endpoint."
                          }
                        }
                      },
                      "metadata": {
                        "__bicep_export!": true,
                        "description": "The type for the private endpoint output."
                      }
                    },
                    "failoverLocationType": {
                      "type": "object",
                      "properties": {
                        "failoverPriority": {
                          "type": "int",
                          "metadata": {
                            "description": "Required. The failover priority of the region. A failover priority of 0 indicates a write region. The maximum value for a failover priority = (total number of regions - 1). Failover priority values must be unique for each of the regions in which the database account exists."
                          }
                        },
                        "isZoneRedundant": {
                          "type": "bool",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Flag to indicate whether or not this region is an AvailabilityZone region. Defaults to true."
                          }
                        },
                        "locationName": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The name of the region."
                          }
                        }
                      },
                      "metadata": {
                        "__bicep_export!": true,
                        "description": "The type for the failover location."
                      }
                    },
                    "dataPlaneRoleAssignmentType": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The unique name of the role assignment."
                          }
                        },
                        "roleDefinitionId": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The unique identifier of the Azure Cosmos DB for NoSQL native role-based access control definition."
                          }
                        },
                        "principalId": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The unique identifier for the associated Microsoft Entra ID principal to which access is being granted through this role-based access control assignment. The tenant ID for the principal is inferred using the tenant associated with the subscription."
                          }
                        }
                      },
                      "metadata": {
                        "__bicep_export!": true,
                        "description": "The type for an Azure Cosmos DB for NoSQL native role-based access control assignment."
                      }
                    },
                    "dataPlaneRoleDefinitionType": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The unique identifier of the role-based access control definition."
                          }
                        },
                        "roleName": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. A user-friendly name for the role-based access control definition. This must be unique within the database account."
                          }
                        },
                        "dataActions": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. An array of data actions that are allowed."
                          }
                        },
                        "assignableScopes": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. A set of fully-qualified scopes at or below which role-based access control assignments may be created using this definition. This setting allows application of this definition on the entire account or any underlying resource. This setting must have at least one element. Scopes higher than the account level are not enforceable as assignable scopes. Resources referenced in assignable scopes do not need to exist at creation. Defaults to the current account scope."
                          }
                        },
                        "assignments": {
                          "type": "array",
                          "items": {
                            "$ref": "#/definitions/sqlRoleAssignmentType"
                          },
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. An array of role-based access control assignments to be created for the definition."
                          }
                        }
                      },
                      "metadata": {
                        "__bicep_export!": true,
                        "description": "The type for an Azure Cosmos DB for NoSQL or Table native role-based access control definition."
                      }
                    },
                    "sqlDatabaseType": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. Name of the database ."
                          }
                        },
                        "throughput": {
                          "type": "int",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Request units per second. Will be ignored if `autoscaleSettingsMaxThroughput` is used. Setting throughput at the database level is only recommended for development/test or when workload across all containers in the shared throughput database is uniform. For best performance for large production workloads, it is recommended to set dedicated throughput (autoscale or manual) at the container level and not at the database level. Defaults to 400."
                          }
                        },
                        "autoscaleSettingsMaxThroughput": {
                          "type": "int",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Specifies the autoscale settings and represents maximum throughput the resource can scale up to. The autoscale throughput should have valid throughput values between 1000 and 1000000 inclusive in increments of 1000. If the value is not set, then autoscale will be disabled. Setting throughput at the database level is only recommended for development/test or when workload across all containers in the shared throughput database is uniform. For best performance for large production workloads, it is recommended to set dedicated throughput (autoscale or manual) at the container level and not at the database level."
                          }
                        },
                        "containers": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "name": {
                                "type": "string",
                                "metadata": {
                                  "description": "Required. Name of the container."
                                }
                              },
                              "paths": {
                                "type": "array",
                                "items": {
                                  "type": "string"
                                },
                                "minLength": 1,
                                "maxLength": 3,
                                "metadata": {
                                  "description": "Required. List of paths using which data within the container can be partitioned. For kind=MultiHash it can be up to 3. For anything else it needs to be exactly 1."
                                }
                              },
                              "analyticalStorageTtl": {
                                "type": "int",
                                "nullable": true,
                                "metadata": {
                                  "description": "Optional. Default to 0. Indicates how long data should be retained in the analytical store, for a container. Analytical store is enabled when ATTL is set with a value other than 0. If the value is set to -1, the analytical store retains all historical data, irrespective of the retention of the data in the transactional store."
                                }
                              },
                              "autoscaleSettingsMaxThroughput": {
                                "type": "int",
                                "nullable": true,
                                "maxValue": 1000000,
                                "metadata": {
                                  "description": "Optional. Specifies the Autoscale settings and represents maximum throughput, the resource can scale up to. The autoscale throughput should have valid throughput values between 1000 and 1000000 inclusive in increments of 1000. If value is set to null, then autoscale will be disabled. For best performance for large production workloads, it is recommended to set dedicated throughput (autoscale or manual) at the container level."
                                }
                              },
                              "conflictResolutionPolicy": {
                                "type": "object",
                                "properties": {
                                  "conflictResolutionPath": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Conditional. The conflict resolution path in the case of LastWriterWins mode. Required if `mode` is set to 'LastWriterWins'."
                                    }
                                  },
                                  "conflictResolutionProcedure": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Conditional. The procedure to resolve conflicts in the case of custom mode. Required if `mode` is set to 'Custom'."
                                    }
                                  },
                                  "mode": {
                                    "type": "string",
                                    "allowedValues": [
                                      "Custom",
                                      "LastWriterWins"
                                    ],
                                    "metadata": {
                                      "description": "Required. Indicates the conflict resolution mode."
                                    }
                                  }
                                },
                                "nullable": true,
                                "metadata": {
                                  "description": "Optional. The conflict resolution policy for the container. Conflicts and conflict resolution policies are applicable if the Azure Cosmos DB account is configured with multiple write regions."
                                }
                              },
                              "defaultTtl": {
                                "type": "int",
                                "nullable": true,
                                "minValue": -1,
                                "maxValue": 2147483647,
                                "metadata": {
                                  "description": "Optional. Default to -1. Default time to live (in seconds). With Time to Live or TTL, Azure Cosmos DB provides the ability to delete items automatically from a container after a certain time period. If the value is set to \"-1\", it is equal to infinity, and items don't expire by default."
                                }
                              },
                              "indexingPolicy": {
                                "type": "object",
                                "nullable": true,
                                "metadata": {
                                  "description": "Optional. Indexing policy of the container."
                                }
                              },
                              "kind": {
                                "type": "string",
                                "allowedValues": [
                                  "Hash",
                                  "MultiHash"
                                ],
                                "nullable": true,
                                "metadata": {
                                  "description": "Optional. Default to Hash. Indicates the kind of algorithm used for partitioning."
                                }
                              },
                              "version": {
                                "type": "int",
                                "allowedValues": [
                                  1,
                                  2
                                ],
                                "nullable": true,
                                "metadata": {
                                  "description": "Optional. Default to 1 for Hash and 2 for MultiHash - 1 is not allowed for MultiHash. Version of the partition key definition."
                                }
                              },
                              "throughput": {
                                "type": "int",
                                "nullable": true,
                                "metadata": {
                                  "description": "Optional. Default to 400. Request Units per second. Will be ignored if autoscaleSettingsMaxThroughput is used."
                                }
                              },
                              "uniqueKeyPolicyKeys": {
                                "type": "array",
                                "items": {
                                  "type": "object",
                                  "properties": {
                                    "paths": {
                                      "type": "array",
                                      "items": {
                                        "type": "string"
                                      },
                                      "metadata": {
                                        "description": "Required. List of paths must be unique for each document in the Azure Cosmos DB service."
                                      }
                                    }
                                  }
                                },
                                "nullable": true,
                                "metadata": {
                                  "description": "Optional. The unique key policy configuration containing a list of unique keys that enforces uniqueness constraint on documents in the collection in the Azure Cosmos DB service."
                                }
                              }
                            }
                          },
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Set of containers to deploy in the database."
                          }
                        }
                      },
                      "metadata": {
                        "__bicep_export!": true,
                        "description": "The type for an Azure Cosmos DB for NoSQL database."
                      }
                    },
                    "networkRestrictionType": {
                      "type": "object",
                      "properties": {
                        "ipRules": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. A single IPv4 address or a single IPv4 address range in Classless Inter-Domain Routing (CIDR) format. Provided IPs must be well-formatted and cannot be contained in one of the following ranges: `10.0.0.0/8`, `100.64.0.0/10`, `172.16.0.0/12`, `192.168.0.0/16`, since these are not enforceable by the IP address filter. Example of valid inputs: `23.40.210.245` or `23.40.210.0/8`."
                          }
                        },
                        "networkAclBypass": {
                          "type": "string",
                          "allowedValues": [
                            "AzureServices",
                            "None"
                          ],
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Specifies the network ACL bypass for Azure services. Default to \"None\"."
                          }
                        },
                        "publicNetworkAccess": {
                          "type": "string",
                          "allowedValues": [
                            "Disabled",
                            "Enabled"
                          ],
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Whether requests from the public network are allowed. Default to \"Disabled\"."
                          }
                        },
                        "virtualNetworkRules": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "subnetResourceId": {
                                "type": "string",
                                "metadata": {
                                  "description": "Required. Resource ID of a subnet."
                                }
                              }
                            }
                          },
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. List of virtual network access control list (ACL) rules configured for the account."
                          }
                        }
                      },
                      "metadata": {
                        "__bicep_export!": true,
                        "description": "The type for the network restriction."
                      }
                    },
                    "_1.privateEndpointCustomDnsConfigType": {
                      "type": "object",
                      "properties": {
                        "fqdn": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. FQDN that resolves to private endpoint IP address."
                          }
                        },
                        "ipAddresses": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "metadata": {
                            "description": "Required. A list of private IP addresses of the private endpoint."
                          }
                        }
                      },
                      "metadata": {
                        "__bicep_imported_from!": {
                          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
                        }
                      }
                    },
                    "_1.privateEndpointIpConfigurationType": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The name of the resource that is unique within a resource group."
                          }
                        },
                        "properties": {
                          "type": "object",
                          "properties": {
                            "groupId": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The ID of a group obtained from the remote resource that this private endpoint should connect to."
                              }
                            },
                            "memberName": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The member name of a group obtained from the remote resource that this private endpoint should connect to."
                              }
                            },
                            "privateIPAddress": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. A private IP address obtained from the private endpoint's subnet."
                              }
                            }
                          },
                          "metadata": {
                            "description": "Required. Properties of private endpoint IP configurations."
                          }
                        }
                      },
                      "metadata": {
                        "__bicep_imported_from!": {
                          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
                        }
                      }
                    },
                    "_1.privateEndpointPrivateDnsZoneGroupType": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The name of the Private DNS Zone Group."
                          }
                        },
                        "privateDnsZoneGroupConfigs": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "name": {
                                "type": "string",
                                "nullable": true,
                                "metadata": {
                                  "description": "Optional. The name of the private DNS Zone Group config."
                                }
                              },
                              "privateDnsZoneResourceId": {
                                "type": "string",
                                "metadata": {
                                  "description": "Required. The resource id of the private DNS zone."
                                }
                              }
                            }
                          },
                          "metadata": {
                            "description": "Required. The private DNS Zone Groups to associate the Private Endpoint. A DNS Zone Group can support up to 5 DNS zones."
                          }
                        }
                      },
                      "metadata": {
                        "__bicep_imported_from!": {
                          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
                        }
                      }
                    },
                    "diagnosticSettingFullType": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The name of the diagnostic setting."
                          }
                        },
                        "logCategoriesAndGroups": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "category": {
                                "type": "string",
                                "nullable": true,
                                "metadata": {
                                  "description": "Optional. Name of a Diagnostic Log category for a resource type this setting is applied to. Set the specific logs to collect here."
                                }
                              },
                              "categoryGroup": {
                                "type": "string",
                                "nullable": true,
                                "metadata": {
                                  "description": "Optional. Name of a Diagnostic Log category group for a resource type this setting is applied to. Set to `allLogs` to collect all logs."
                                }
                              },
                              "enabled": {
                                "type": "bool",
                                "nullable": true,
                                "metadata": {
                                  "description": "Optional. Enable or disable the category explicitly. Default is `true`."
                                }
                              }
                            }
                          },
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The name of logs that will be streamed. \"allLogs\" includes all possible logs for the resource. Set to `[]` to disable log collection."
                          }
                        },
                        "metricCategories": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "category": {
                                "type": "string",
                                "metadata": {
                                  "description": "Required. Name of a Diagnostic Metric category for a resource type this setting is applied to. Set to `AllMetrics` to collect all metrics."
                                }
                              },
                              "enabled": {
                                "type": "bool",
                                "nullable": true,
                                "metadata": {
                                  "description": "Optional. Enable or disable the category explicitly. Default is `true`."
                                }
                              }
                            }
                          },
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The name of metrics that will be streamed. \"allMetrics\" includes all possible metrics for the resource. Set to `[]` to disable metric collection."
                          }
                        },
                        "logAnalyticsDestinationType": {
                          "type": "string",
                          "allowedValues": [
                            "AzureDiagnostics",
                            "Dedicated"
                          ],
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. A string indicating whether the export to Log Analytics should use the default destination type, i.e. AzureDiagnostics, or use a destination type."
                          }
                        },
                        "workspaceResourceId": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Resource ID of the diagnostic log analytics workspace. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                          }
                        },
                        "storageAccountResourceId": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Resource ID of the diagnostic storage account. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                          }
                        },
                        "eventHubAuthorizationRuleResourceId": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
                          }
                        },
                        "eventHubName": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                          }
                        },
                        "marketplacePartnerResourceId": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The full ARM resource ID of the Marketplace resource to which you would like to send Diagnostic Logs."
                          }
                        }
                      },
                      "metadata": {
                        "description": "An AVM-aligned type for a diagnostic setting. To be used if both logs & metrics are supported by the resource provider.",
                        "__bicep_imported_from!": {
                          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
                        }
                      }
                    },
                    "lockType": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Specify the name of lock."
                          }
                        },
                        "kind": {
                          "type": "string",
                          "allowedValues": [
                            "CanNotDelete",
                            "None",
                            "ReadOnly"
                          ],
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Specify the type of lock."
                          }
                        }
                      },
                      "metadata": {
                        "description": "An AVM-aligned type for a lock.",
                        "__bicep_imported_from!": {
                          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
                        }
                      }
                    },
                    "managedIdentityAllType": {
                      "type": "object",
                      "properties": {
                        "systemAssigned": {
                          "type": "bool",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Enables system assigned managed identity on the resource."
                          }
                        },
                        "userAssignedResourceIds": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The resource ID(s) to assign to the resource. Required if a user assigned identity is used for encryption."
                          }
                        }
                      },
                      "metadata": {
                        "description": "An AVM-aligned type for a managed identity configuration. To be used if both a system-assigned & user-assigned identities are supported by the resource provider.",
                        "__bicep_imported_from!": {
                          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
                        }
                      }
                    },
                    "privateEndpointMultiServiceType": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The name of the private endpoint."
                          }
                        },
                        "location": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The location to deploy the private endpoint to."
                          }
                        },
                        "privateLinkServiceConnectionName": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The name of the private link connection to create."
                          }
                        },
                        "service": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The subresource to deploy the private endpoint for. For example \"blob\", \"table\", \"queue\" or \"file\" for a Storage Account's Private Endpoints."
                          }
                        },
                        "subnetResourceId": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. Resource ID of the subnet where the endpoint needs to be created."
                          }
                        },
                        "resourceGroupResourceId": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The resource ID of the Resource Group the Private Endpoint will be created in. If not specified, the Resource Group of the provided Virtual Network Subnet is used."
                          }
                        },
                        "privateDnsZoneGroup": {
                          "$ref": "#/definitions/_1.privateEndpointPrivateDnsZoneGroupType",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The private DNS zone group to configure for the private endpoint."
                          }
                        },
                        "isManualConnection": {
                          "type": "bool",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. If Manual Private Link Connection is required."
                          }
                        },
                        "manualConnectionRequestMessage": {
                          "type": "string",
                          "nullable": true,
                          "maxLength": 140,
                          "metadata": {
                            "description": "Optional. A message passed to the owner of the remote resource with the manual connection request."
                          }
                        },
                        "customDnsConfigs": {
                          "type": "array",
                          "items": {
                            "$ref": "#/definitions/_1.privateEndpointCustomDnsConfigType"
                          },
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Custom DNS configurations."
                          }
                        },
                        "ipConfigurations": {
                          "type": "array",
                          "items": {
                            "$ref": "#/definitions/_1.privateEndpointIpConfigurationType"
                          },
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. A list of IP configurations of the private endpoint. This will be used to map to the First Party Service endpoints."
                          }
                        },
                        "applicationSecurityGroupResourceIds": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Application security groups in which the private endpoint IP configuration is included."
                          }
                        },
                        "customNetworkInterfaceName": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The custom name of the network interface attached to the private endpoint."
                          }
                        },
                        "lock": {
                          "$ref": "#/definitions/lockType",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Specify the type of lock."
                          }
                        },
                        "roleAssignments": {
                          "type": "array",
                          "items": {
                            "$ref": "#/definitions/roleAssignmentType"
                          },
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Array of role assignments to create."
                          }
                        },
                        "tags": {
                          "type": "object",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Tags to be applied on all resources/resource groups in this deployment."
                          }
                        },
                        "enableTelemetry": {
                          "type": "bool",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Enable/Disable usage telemetry for module."
                          }
                        }
                      },
                      "metadata": {
                        "description": "An AVM-aligned type for a private endpoint. To be used if the private endpoint's default service / groupId can NOT be assumed (i.e., for services that have more than one subresource, like Storage Account with Blob (blob, table, queue, file, ...).",
                        "__bicep_imported_from!": {
                          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
                        }
                      }
                    },
                    "roleAssignmentType": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The name (as GUID) of the role assignment. If not provided, a GUID will be generated."
                          }
                        },
                        "roleDefinitionIdOrName": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                          }
                        },
                        "principalId": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                          }
                        },
                        "principalType": {
                          "type": "string",
                          "allowedValues": [
                            "Device",
                            "ForeignGroup",
                            "Group",
                            "ServicePrincipal",
                            "User"
                          ],
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The principal type of the assigned principal ID."
                          }
                        },
                        "description": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The description of the role assignment."
                          }
                        },
                        "condition": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                          }
                        },
                        "conditionVersion": {
                          "type": "string",
                          "allowedValues": [
                            "2.0"
                          ],
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Version of the condition."
                          }
                        },
                        "delegatedManagedIdentityResourceId": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The Resource Id of the delegated managed identity resource."
                          }
                        }
                      },
                      "metadata": {
                        "description": "An AVM-aligned type for a role assignment.",
                        "__bicep_imported_from!": {
                          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
                        }
                      }
                    },
                    "sqlRoleAssignmentType": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Name unique identifier of the SQL Role Assignment."
                          }
                        },
                        "principalId": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The unique identifier for the associated AAD principal in the AAD graph to which access is being granted through this Role Assignment. Tenant ID for the principal is inferred using the tenant associated with the subscription."
                          }
                        }
                      },
                      "metadata": {
                        "description": "The type for the SQL Role Assignments.",
                        "__bicep_imported_from!": {
                          "sourceTemplate": "sql-role-definition/main.bicep"
                        }
                      }
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The name of the account."
                      }
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]",
                      "metadata": {
                        "description": "Optional. Defaults to the current resource group scope location. Location for all resources."
                      }
                    },
                    "tags": {
                      "type": "object",
                      "metadata": {
                        "__bicep_resource_derived_type!": {
                          "source": "Microsoft.DocumentDB/databaseAccounts@2024-11-15#properties/tags"
                        },
                        "description": "Optional. Tags for the resource."
                      },
                      "nullable": true
                    },
                    "managedIdentities": {
                      "$ref": "#/definitions/managedIdentityAllType",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The managed identity definition for this resource."
                      }
                    },
                    "databaseAccountOfferType": {
                      "type": "string",
                      "defaultValue": "Standard",
                      "allowedValues": [
                        "Standard"
                      ],
                      "metadata": {
                        "description": "Optional. The offer type for the account. Defaults to \"Standard\"."
                      }
                    },
                    "failoverLocations": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/failoverLocationType"
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The set of locations enabled for the account. Defaults to the location where the account is deployed."
                      }
                    },
                    "zoneRedundant": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. Indicates whether the single-region account is zone redundant. Defaults to true. This property is ignored for multi-region accounts."
                      }
                    },
                    "defaultConsistencyLevel": {
                      "type": "string",
                      "defaultValue": "Session",
                      "allowedValues": [
                        "Eventual",
                        "ConsistentPrefix",
                        "Session",
                        "BoundedStaleness",
                        "Strong"
                      ],
                      "metadata": {
                        "description": "Optional. The default consistency level of the account. Defaults to \"Session\"."
                      }
                    },
                    "disableLocalAuthentication": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. Opt-out of local authentication and ensure that only Microsoft Entra can be used exclusively for authentication. Defaults to true."
                      }
                    },
                    "enableAnalyticalStorage": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. Flag to indicate whether to enable storage analytics. Defaults to false."
                      }
                    },
                    "automaticFailover": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. Enable automatic failover for regions. Defaults to true."
                      }
                    },
                    "enableFreeTier": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. Flag to indicate whether \"Free Tier\" is enabled. Defaults to false."
                      }
                    },
                    "enableMultipleWriteLocations": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. Enables the account to write in multiple locations. Periodic backup must be used if enabled. Defaults to false."
                      }
                    },
                    "disableKeyBasedMetadataWriteAccess": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. Disable write operations on metadata resources (databases, containers, throughput) via account keys. Defaults to true."
                      }
                    },
                    "maxStalenessPrefix": {
                      "type": "int",
                      "defaultValue": 100000,
                      "minValue": 1,
                      "maxValue": 2147483647,
                      "metadata": {
                        "description": "Optional. The maximum stale requests. Required for \"BoundedStaleness\" consistency level. Valid ranges, Single Region: 10 to 1000000. Multi Region: 100000 to 1000000. Defaults to 100000."
                      }
                    },
                    "maxIntervalInSeconds": {
                      "type": "int",
                      "defaultValue": 300,
                      "minValue": 5,
                      "maxValue": 86400,
                      "metadata": {
                        "description": "Optional. The maximum lag time in minutes. Required for \"BoundedStaleness\" consistency level. Valid ranges, Single Region: 5 to 84600. Multi Region: 300 to 86400. Defaults to 300."
                      }
                    },
                    "serverVersion": {
                      "type": "string",
                      "defaultValue": "4.2",
                      "allowedValues": [
                        "3.2",
                        "3.6",
                        "4.0",
                        "4.2",
                        "5.0",
                        "6.0",
                        "7.0"
                      ],
                      "metadata": {
                        "description": "Optional. Specifies the MongoDB server version to use if using Azure Cosmos DB for MongoDB RU. Defaults to \"4.2\"."
                      }
                    },
                    "sqlDatabases": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/sqlDatabaseType"
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Configuration for databases when using Azure Cosmos DB for NoSQL."
                      }
                    },
                    "mongodbDatabases": {
                      "type": "array",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Configuration for databases when using Azure Cosmos DB for MongoDB RU."
                      }
                    },
                    "gremlinDatabases": {
                      "type": "array",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Configuration for databases when using Azure Cosmos DB for Apache Gremlin."
                      }
                    },
                    "tables": {
                      "type": "array",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Configuration for databases when using Azure Cosmos DB for Table."
                      }
                    },
                    "enableTelemetry": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. Enable/Disable usage telemetry for module."
                      }
                    },
                    "totalThroughputLimit": {
                      "type": "int",
                      "defaultValue": -1,
                      "metadata": {
                        "description": "Optional. The total throughput limit imposed on this account in request units per second (RU/s). Default to unlimited throughput."
                      }
                    },
                    "lock": {
                      "$ref": "#/definitions/lockType",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The lock settings of the service."
                      }
                    },
                    "roleAssignments": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/roleAssignmentType"
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. An array of control plane Azure role-based access control assignments."
                      }
                    },
                    "dataPlaneRoleDefinitions": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/dataPlaneRoleDefinitionType"
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Configurations for Azure Cosmos DB for NoSQL native role-based access control definitions. Allows the creations of custom role definitions."
                      }
                    },
                    "dataPlaneRoleAssignments": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/dataPlaneRoleAssignmentType"
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Configurations for Azure Cosmos DB for NoSQL native role-based access control assignments."
                      }
                    },
                    "diagnosticSettings": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/diagnosticSettingFullType"
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The diagnostic settings for the service."
                      }
                    },
                    "capabilitiesToAdd": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "nullable": true,
                      "allowedValues": [
                        "EnableCassandra",
                        "EnableTable",
                        "EnableGremlin",
                        "EnableMongo",
                        "DisableRateLimitingResponses",
                        "EnableServerless",
                        "EnableNoSQLVectorSearch",
                        "EnableNoSQLFullTextSearch",
                        "EnableMaterializedViews",
                        "DeleteAllItemsByPartitionKey"
                      ],
                      "metadata": {
                        "description": "Optional. A list of Azure Cosmos DB specific capabilities for the account."
                      }
                    },
                    "backupPolicyType": {
                      "type": "string",
                      "defaultValue": "Continuous",
                      "allowedValues": [
                        "Periodic",
                        "Continuous"
                      ],
                      "metadata": {
                        "description": "Optional. Configures the backup mode. Periodic backup must be used if multiple write locations are used. Defaults to \"Continuous\"."
                      }
                    },
                    "backupPolicyContinuousTier": {
                      "type": "string",
                      "defaultValue": "Continuous30Days",
                      "allowedValues": [
                        "Continuous30Days",
                        "Continuous7Days"
                      ],
                      "metadata": {
                        "description": "Optional. Configuration values to specify the retention period for continuous mode backup. Default to \"Continuous30Days\"."
                      }
                    },
                    "backupIntervalInMinutes": {
                      "type": "int",
                      "defaultValue": 240,
                      "minValue": 60,
                      "maxValue": 1440,
                      "metadata": {
                        "description": "Optional. An integer representing the interval in minutes between two backups. This setting only applies to the periodic backup type. Defaults to 240."
                      }
                    },
                    "backupRetentionIntervalInHours": {
                      "type": "int",
                      "defaultValue": 8,
                      "minValue": 2,
                      "maxValue": 720,
                      "metadata": {
                        "description": "Optional. An integer representing the time (in hours) that each backup is retained. This setting only applies to the periodic backup type. Defaults to 8."
                      }
                    },
                    "backupStorageRedundancy": {
                      "type": "string",
                      "defaultValue": "Local",
                      "allowedValues": [
                        "Geo",
                        "Local",
                        "Zone"
                      ],
                      "metadata": {
                        "description": "Optional. Setting that indicates the type of backup residency. This setting only applies to the periodic backup type. Defaults to \"Local\"."
                      }
                    },
                    "privateEndpoints": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/privateEndpointMultiServiceType"
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Configuration details for private endpoints. For security reasons, it is advised to use private endpoints whenever possible."
                      }
                    },
                    "networkRestrictions": {
                      "$ref": "#/definitions/networkRestrictionType",
                      "defaultValue": {
                        "ipRules": [],
                        "virtualNetworkRules": [],
                        "publicNetworkAccess": "Disabled"
                      },
                      "metadata": {
                        "description": "Optional. The network configuration of this module. Defaults to `{ ipRules: [], virtualNetworkRules: [], publicNetworkAccess: 'Disabled' }`."
                      }
                    },
                    "minimumTlsVersion": {
                      "type": "string",
                      "defaultValue": "Tls12",
                      "allowedValues": [
                        "Tls12"
                      ],
                      "metadata": {
                        "description": "Optional. Setting that indicates the minimum allowed TLS version. Azure Cosmos DB for MongoDB RU and Apache Cassandra only work with TLS 1.2 or later. Defaults to \"Tls12\" (TLS 1.2)."
                      }
                    }
                  },
                  "variables": {
                    "copy": [
                      {
                        "name": "formattedRoleAssignments",
                        "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]",
                        "input": "[union(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')], createObject('roleDefinitionId', coalesce(tryGet(variables('builtInControlPlaneRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName), if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName)))))]"
                      }
                    ],
                    "enableReferencedModulesTelemetry": false,
                    "formattedUserAssignedIdentities": "[reduce(map(coalesce(tryGet(parameters('managedIdentities'), 'userAssignedResourceIds'), createArray()), lambda('id', createObject(format('{0}', lambdaVariables('id')), createObject()))), createObject(), lambda('cur', 'next', union(lambdaVariables('cur'), lambdaVariables('next'))))]",
                    "identity": "[if(not(empty(parameters('managedIdentities'))), createObject('type', if(coalesce(tryGet(parameters('managedIdentities'), 'systemAssigned'), false()), if(not(empty(coalesce(tryGet(parameters('managedIdentities'), 'userAssignedResourceIds'), createObject()))), 'SystemAssigned,UserAssigned', 'SystemAssigned'), if(not(empty(coalesce(tryGet(parameters('managedIdentities'), 'userAssignedResourceIds'), createObject()))), 'UserAssigned', null())), 'userAssignedIdentities', if(not(empty(variables('formattedUserAssignedIdentities'))), variables('formattedUserAssignedIdentities'), null())), null())]",
                    "builtInControlPlaneRoleNames": {
                      "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                      "Cosmos DB Account Reader Role": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'fbdf93bf-df7d-467e-a4d2-9458aa1360c8')]",
                      "Cosmos DB Operator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '230815da-be43-4aae-9cb4-875f7bd000aa')]",
                      "CosmosBackupOperator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'db7b14f2-5adf-42da-9f96-f2ee17bab5cb')]",
                      "CosmosRestoreOperator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '5432c526-bc82-444a-b7ba-57c5b0b5b34f')]",
                      "DocumentDB Account Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '5bd9cd88-fe45-4216-938b-f97437e15450')]",
                      "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                      "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                      "Role Based Access Control Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
                      "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
                    }
                  },
                  "resources": {
                    "avmTelemetry": {
                      "condition": "[parameters('enableTelemetry')]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2024-07-01",
                      "name": "[format('46d3xbcp.res.documentdb-databaseaccount.{0}.{1}', replace('0.15.0', '.', '-'), substring(uniqueString(deployment().name, parameters('location')), 0, 4))]",
                      "properties": {
                        "mode": "Incremental",
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "resources": [],
                          "outputs": {
                            "telemetry": {
                              "type": "String",
                              "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                            }
                          }
                        }
                      }
                    },
                    "databaseAccount": {
                      "type": "Microsoft.DocumentDB/databaseAccounts",
                      "apiVersion": "2024-11-15",
                      "name": "[parameters('name')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "identity": "[variables('identity')]",
                      "kind": "[if(not(empty(parameters('mongodbDatabases'))), 'MongoDB', 'GlobalDocumentDB')]",
                      "properties": "[shallowMerge(createArray(createObject('databaseAccountOfferType', parameters('databaseAccountOfferType'), 'backupPolicy', shallowMerge(createArray(createObject('type', parameters('backupPolicyType')), if(equals(parameters('backupPolicyType'), 'Continuous'), createObject('continuousModeProperties', createObject('tier', parameters('backupPolicyContinuousTier'))), createObject()), if(equals(parameters('backupPolicyType'), 'Periodic'), createObject('periodicModeProperties', createObject('backupIntervalInMinutes', parameters('backupIntervalInMinutes'), 'backupRetentionIntervalInHours', parameters('backupRetentionIntervalInHours'), 'backupStorageRedundancy', parameters('backupStorageRedundancy'))), createObject()))), 'capabilities', map(coalesce(parameters('capabilitiesToAdd'), createArray()), lambda('capability', createObject('name', lambdaVariables('capability')))), 'minimalTlsVersion', parameters('minimumTlsVersion'), 'capacity', createObject('totalThroughputLimit', parameters('totalThroughputLimit')), 'publicNetworkAccess', coalesce(tryGet(parameters('networkRestrictions'), 'publicNetworkAccess'), 'Disabled')), if(or(or(or(not(empty(parameters('sqlDatabases'))), not(empty(parameters('mongodbDatabases')))), not(empty(parameters('gremlinDatabases')))), not(empty(parameters('tables')))), createObject('consistencyPolicy', shallowMerge(createArray(createObject('defaultConsistencyLevel', parameters('defaultConsistencyLevel')), if(equals(parameters('defaultConsistencyLevel'), 'BoundedStaleness'), createObject('maxStalenessPrefix', parameters('maxStalenessPrefix'), 'maxIntervalInSeconds', parameters('maxIntervalInSeconds')), createObject()))), 'enableMultipleWriteLocations', parameters('enableMultipleWriteLocations'), 'locations', if(not(empty(parameters('failoverLocations'))), map(parameters('failoverLocations'), lambda('failoverLocation', createObject('failoverPriority', lambdaVariables('failoverLocation').failoverPriority, 'locationName', lambdaVariables('failoverLocation').locationName, 'isZoneRedundant', coalesce(tryGet(lambdaVariables('failoverLocation'), 'isZoneRedundant'), true())))), createArray(createObject('failoverPriority', 0, 'locationName', parameters('location'), 'isZoneRedundant', parameters('zoneRedundant')))), 'ipRules', map(coalesce(tryGet(parameters('networkRestrictions'), 'ipRules'), createArray()), lambda('ipRule', createObject('ipAddressOrRange', lambdaVariables('ipRule')))), 'virtualNetworkRules', map(coalesce(tryGet(parameters('networkRestrictions'), 'virtualNetworkRules'), createArray()), lambda('rule', createObject('id', lambdaVariables('rule').subnetResourceId, 'ignoreMissingVNetServiceEndpoint', false()))), 'networkAclBypass', coalesce(tryGet(parameters('networkRestrictions'), 'networkAclBypass'), 'None'), 'isVirtualNetworkFilterEnabled', or(not(empty(tryGet(parameters('networkRestrictions'), 'ipRules'))), not(empty(tryGet(parameters('networkRestrictions'), 'virtualNetworkRules')))), 'enableFreeTier', parameters('enableFreeTier'), 'enableAutomaticFailover', parameters('automaticFailover'), 'enableAnalyticalStorage', parameters('enableAnalyticalStorage')), createObject()), if(or(not(empty(parameters('mongodbDatabases'))), not(empty(parameters('gremlinDatabases')))), createObject('disableLocalAuth', false(), 'disableKeyBasedMetadataWriteAccess', false()), createObject('disableLocalAuth', parameters('disableLocalAuthentication'), 'disableKeyBasedMetadataWriteAccess', parameters('disableKeyBasedMetadataWriteAccess'))), if(not(empty(parameters('mongodbDatabases'))), createObject('apiProperties', createObject('serverVersion', parameters('serverVersion'))), createObject())))]"
                    },
                    "databaseAccount_lock": {
                      "condition": "[and(not(empty(coalesce(parameters('lock'), createObject()))), not(equals(tryGet(parameters('lock'), 'kind'), 'None')))]",
                      "type": "Microsoft.Authorization/locks",
                      "apiVersion": "2020-05-01",
                      "scope": "[format('Microsoft.DocumentDB/databaseAccounts/{0}', parameters('name'))]",
                      "name": "[coalesce(tryGet(parameters('lock'), 'name'), format('lock-{0}', parameters('name')))]",
                      "properties": {
                        "level": "[coalesce(tryGet(parameters('lock'), 'kind'), '')]",
                        "notes": "[if(equals(tryGet(parameters('lock'), 'kind'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot delete or modify the resource or child resources.')]"
                      },
                      "dependsOn": [
                        "databaseAccount"
                      ]
                    },
                    "databaseAccount_diagnosticSettings": {
                      "copy": {
                        "name": "databaseAccount_diagnosticSettings",
                        "count": "[length(coalesce(parameters('diagnosticSettings'), createArray()))]"
                      },
                      "type": "Microsoft.Insights/diagnosticSettings",
                      "apiVersion": "2021-05-01-preview",
                      "scope": "[format('Microsoft.DocumentDB/databaseAccounts/{0}', parameters('name'))]",
                      "name": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'name'), format('{0}-diagnosticSettings', parameters('name')))]",
                      "properties": {
                        "copy": [
                          {
                            "name": "metrics",
                            "count": "[length(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics'))))]",
                            "input": {
                              "category": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics')))[copyIndex('metrics')].category]",
                              "enabled": "[coalesce(tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics')))[copyIndex('metrics')], 'enabled'), true())]",
                              "timeGrain": null
                            }
                          },
                          {
                            "name": "logs",
                            "count": "[length(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs'))))]",
                            "input": {
                              "categoryGroup": "[tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'categoryGroup')]",
                              "category": "[tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'category')]",
                              "enabled": "[coalesce(tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'enabled'), true())]"
                            }
                          }
                        ],
                        "storageAccountId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'storageAccountResourceId')]",
                        "workspaceId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'workspaceResourceId')]",
                        "eventHubAuthorizationRuleId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubAuthorizationRuleResourceId')]",
                        "eventHubName": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubName')]",
                        "marketplacePartnerId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'marketplacePartnerResourceId')]",
                        "logAnalyticsDestinationType": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logAnalyticsDestinationType')]"
                      },
                      "dependsOn": [
                        "databaseAccount"
                      ]
                    },
                    "databaseAccount_roleAssignments": {
                      "copy": {
                        "name": "databaseAccount_roleAssignments",
                        "count": "[length(coalesce(variables('formattedRoleAssignments'), createArray()))]"
                      },
                      "type": "Microsoft.Authorization/roleAssignments",
                      "apiVersion": "2022-04-01",
                      "scope": "[format('Microsoft.DocumentDB/databaseAccounts/{0}', parameters('name'))]",
                      "name": "[coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'name'), guid(resourceId('Microsoft.DocumentDB/databaseAccounts', parameters('name')), coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId, coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId))]",
                      "properties": {
                        "roleDefinitionId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId]",
                        "principalId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId]",
                        "description": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'description')]",
                        "principalType": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'principalType')]",
                        "condition": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition')]",
                        "conditionVersion": "[if(not(empty(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                        "delegatedManagedIdentityResourceId": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                      },
                      "dependsOn": [
                        "databaseAccount"
                      ]
                    },
                    "databaseAccount_sqlDatabases": {
                      "copy": {
                        "name": "databaseAccount_sqlDatabases",
                        "count": "[length(coalesce(parameters('sqlDatabases'), createArray()))]"
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('{0}-sqldb-{1}', uniqueString(deployment().name, parameters('location')), coalesce(parameters('sqlDatabases'), createArray())[copyIndex()].name)]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "name": {
                            "value": "[coalesce(parameters('sqlDatabases'), createArray())[copyIndex()].name]"
                          },
                          "containers": {
                            "value": "[tryGet(coalesce(parameters('sqlDatabases'), createArray())[copyIndex()], 'containers')]"
                          },
                          "throughput": {
                            "value": "[tryGet(coalesce(parameters('sqlDatabases'), createArray())[copyIndex()], 'throughput')]"
                          },
                          "databaseAccountName": {
                            "value": "[parameters('name')]"
                          },
                          "autoscaleSettingsMaxThroughput": {
                            "value": "[tryGet(coalesce(parameters('sqlDatabases'), createArray())[copyIndex()], 'autoscaleSettingsMaxThroughput')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "languageVersion": "2.0",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.35.1.17967",
                              "templateHash": "6801379641184405078"
                            },
                            "name": "DocumentDB Database Account SQL Databases",
                            "description": "This module deploys a SQL Database in a CosmosDB Account."
                          },
                          "parameters": {
                            "databaseAccountName": {
                              "type": "string",
                              "metadata": {
                                "description": "Conditional. The name of the parent Database Account. Required if the template is used in a standalone deployment."
                              }
                            },
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. Name of the SQL database ."
                              }
                            },
                            "containers": {
                              "type": "array",
                              "items": {
                                "type": "object"
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Array of containers to deploy in the SQL database."
                              }
                            },
                            "throughput": {
                              "type": "int",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Request units per second. Will be ignored if autoscaleSettingsMaxThroughput is used. Setting throughput at the database level is only recommended for development/test or when workload across all containers in the shared throughput database is uniform. For best performance for large production workloads, it is recommended to set dedicated throughput (autoscale or manual) at the container level and not at the database level."
                              }
                            },
                            "autoscaleSettingsMaxThroughput": {
                              "type": "int",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Specifies the Autoscale settings and represents maximum throughput, the resource can scale up to. The autoscale throughput should have valid throughput values between 1000 and 1000000 inclusive in increments of 1000. If value is set to null, then autoscale will be disabled. Setting throughput at the database level is only recommended for development/test or when workload across all containers in the shared throughput database is uniform. For best performance for large production workloads, it is recommended to set dedicated throughput (autoscale or manual) at the container level and not at the database level."
                              }
                            },
                            "tags": {
                              "type": "object",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Tags of the SQL database resource."
                              }
                            }
                          },
                          "resources": {
                            "databaseAccount": {
                              "existing": true,
                              "type": "Microsoft.DocumentDB/databaseAccounts",
                              "apiVersion": "2024-11-15",
                              "name": "[parameters('databaseAccountName')]"
                            },
                            "sqlDatabase": {
                              "type": "Microsoft.DocumentDB/databaseAccounts/sqlDatabases",
                              "apiVersion": "2024-11-15",
                              "name": "[format('{0}/{1}', parameters('databaseAccountName'), parameters('name'))]",
                              "tags": "[parameters('tags')]",
                              "properties": {
                                "resource": {
                                  "id": "[parameters('name')]"
                                },
                                "options": "[if(contains(reference('databaseAccount').capabilities, createObject('name', 'EnableServerless')), null(), createObject('throughput', if(equals(parameters('autoscaleSettingsMaxThroughput'), null()), parameters('throughput'), null()), 'autoscaleSettings', if(not(equals(parameters('autoscaleSettingsMaxThroughput'), null())), createObject('maxThroughput', parameters('autoscaleSettingsMaxThroughput')), null())))]"
                              },
                              "dependsOn": [
                                "databaseAccount"
                              ]
                            },
                            "container": {
                              "copy": {
                                "name": "container",
                                "count": "[length(coalesce(parameters('containers'), createArray()))]"
                              },
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('{0}-sqldb-{1}', uniqueString(deployment().name, parameters('name')), coalesce(parameters('containers'), createArray())[copyIndex()].name)]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "databaseAccountName": {
                                    "value": "[parameters('databaseAccountName')]"
                                  },
                                  "sqlDatabaseName": {
                                    "value": "[parameters('name')]"
                                  },
                                  "name": {
                                    "value": "[coalesce(parameters('containers'), createArray())[copyIndex()].name]"
                                  },
                                  "analyticalStorageTtl": {
                                    "value": "[tryGet(coalesce(parameters('containers'), createArray())[copyIndex()], 'analyticalStorageTtl')]"
                                  },
                                  "autoscaleSettingsMaxThroughput": {
                                    "value": "[tryGet(coalesce(parameters('containers'), createArray())[copyIndex()], 'autoscaleSettingsMaxThroughput')]"
                                  },
                                  "conflictResolutionPolicy": {
                                    "value": "[tryGet(coalesce(parameters('containers'), createArray())[copyIndex()], 'conflictResolutionPolicy')]"
                                  },
                                  "defaultTtl": {
                                    "value": "[tryGet(coalesce(parameters('containers'), createArray())[copyIndex()], 'defaultTtl')]"
                                  },
                                  "indexingPolicy": {
                                    "value": "[tryGet(coalesce(parameters('containers'), createArray())[copyIndex()], 'indexingPolicy')]"
                                  },
                                  "kind": {
                                    "value": "[tryGet(coalesce(parameters('containers'), createArray())[copyIndex()], 'kind')]"
                                  },
                                  "version": {
                                    "value": "[tryGet(coalesce(parameters('containers'), createArray())[copyIndex()], 'version')]"
                                  },
                                  "paths": {
                                    "value": "[tryGet(coalesce(parameters('containers'), createArray())[copyIndex()], 'paths')]"
                                  },
                                  "throughput": "[if(and(or(not(equals(parameters('throughput'), null())), not(equals(parameters('autoscaleSettingsMaxThroughput'), null()))), equals(tryGet(coalesce(parameters('containers'), createArray())[copyIndex()], 'throughput'), null())), createObject('value', -1), createObject('value', tryGet(coalesce(parameters('containers'), createArray())[copyIndex()], 'throughput')))]",
                                  "uniqueKeyPolicyKeys": {
                                    "value": "[tryGet(coalesce(parameters('containers'), createArray())[copyIndex()], 'uniqueKeyPolicyKeys')]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "languageVersion": "2.0",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.35.1.17967",
                                      "templateHash": "5467755913632158534"
                                    },
                                    "name": "DocumentDB Database Account SQL Database Containers",
                                    "description": "This module deploys a SQL Database Container in a CosmosDB Account."
                                  },
                                  "parameters": {
                                    "databaseAccountName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Conditional. The name of the parent Database Account. Required if the template is used in a standalone deployment."
                                      }
                                    },
                                    "sqlDatabaseName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Conditional. The name of the parent SQL Database. Required if the template is used in a standalone deployment."
                                      }
                                    },
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. Name of the container."
                                      }
                                    },
                                    "analyticalStorageTtl": {
                                      "type": "int",
                                      "defaultValue": 0,
                                      "metadata": {
                                        "description": "Optional. Default to 0. Indicates how long data should be retained in the analytical store, for a container. Analytical store is enabled when ATTL is set with a value other than 0. If the value is set to -1, the analytical store retains all historical data, irrespective of the retention of the data in the transactional store."
                                      }
                                    },
                                    "conflictResolutionPolicy": {
                                      "type": "object",
                                      "defaultValue": {},
                                      "metadata": {
                                        "description": "Optional. The conflict resolution policy for the container. Conflicts and conflict resolution policies are applicable if the Azure Cosmos DB account is configured with multiple write regions."
                                      }
                                    },
                                    "defaultTtl": {
                                      "type": "int",
                                      "defaultValue": -1,
                                      "minValue": -1,
                                      "maxValue": 2147483647,
                                      "metadata": {
                                        "description": "Optional. Default to -1. Default time to live (in seconds). With Time to Live or TTL, Azure Cosmos DB provides the ability to delete items automatically from a container after a certain time period. If the value is set to \"-1\", it is equal to infinity, and items don't expire by default."
                                      }
                                    },
                                    "throughput": {
                                      "type": "int",
                                      "defaultValue": 400,
                                      "metadata": {
                                        "description": "Optional. Default to 400. Request Units per second. Will be ignored if autoscaleSettingsMaxThroughput is used. For best performance for large production workloads, it is recommended to set dedicated throughput (autoscale or manual) at the container level and not at the database level."
                                      }
                                    },
                                    "autoscaleSettingsMaxThroughput": {
                                      "type": "int",
                                      "nullable": true,
                                      "maxValue": 1000000,
                                      "metadata": {
                                        "description": "Optional. Specifies the Autoscale settings and represents maximum throughput, the resource can scale up to. The autoscale throughput should have valid throughput values between 1000 and 1000000 inclusive in increments of 1000. If value is set to null, then autoscale will be disabled. For best performance for large production workloads, it is recommended to set dedicated throughput (autoscale or manual) at the container level and not at the database level."
                                      }
                                    },
                                    "tags": {
                                      "type": "object",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Tags of the SQL Database resource."
                                      }
                                    },
                                    "paths": {
                                      "type": "array",
                                      "items": {
                                        "type": "string"
                                      },
                                      "minLength": 1,
                                      "maxLength": 3,
                                      "metadata": {
                                        "description": "Required. List of paths using which data within the container can be partitioned. For kind=MultiHash it can be up to 3. For anything else it needs to be exactly 1."
                                      }
                                    },
                                    "indexingPolicy": {
                                      "type": "object",
                                      "defaultValue": {},
                                      "metadata": {
                                        "description": "Optional. Indexing policy of the container."
                                      }
                                    },
                                    "uniqueKeyPolicyKeys": {
                                      "type": "array",
                                      "defaultValue": [],
                                      "metadata": {
                                        "description": "Optional. The unique key policy configuration containing a list of unique keys that enforces uniqueness constraint on documents in the collection in the Azure Cosmos DB service."
                                      }
                                    },
                                    "kind": {
                                      "type": "string",
                                      "defaultValue": "Hash",
                                      "allowedValues": [
                                        "Hash",
                                        "MultiHash"
                                      ],
                                      "metadata": {
                                        "description": "Optional. Default to Hash. Indicates the kind of algorithm used for partitioning."
                                      }
                                    },
                                    "version": {
                                      "type": "int",
                                      "defaultValue": 1,
                                      "allowedValues": [
                                        1,
                                        2
                                      ],
                                      "metadata": {
                                        "description": "Optional. Default to 1 for Hash and 2 for MultiHash - 1 is not allowed for MultiHash. Version of the partition key definition."
                                      }
                                    }
                                  },
                                  "variables": {
                                    "copy": [
                                      {
                                        "name": "partitionKeyPaths",
                                        "count": "[length(parameters('paths'))]",
                                        "input": "[if(startsWith(parameters('paths')[copyIndex('partitionKeyPaths')], '/'), parameters('paths')[copyIndex('partitionKeyPaths')], format('/{0}', parameters('paths')[copyIndex('partitionKeyPaths')]))]"
                                      }
                                    ],
                                    "containerResourceParams": "[union(createObject('conflictResolutionPolicy', parameters('conflictResolutionPolicy'), 'defaultTtl', parameters('defaultTtl'), 'id', parameters('name'), 'indexingPolicy', if(not(empty(parameters('indexingPolicy'))), parameters('indexingPolicy'), null()), 'partitionKey', createObject('paths', variables('partitionKeyPaths'), 'kind', parameters('kind'), 'version', if(equals(parameters('kind'), 'MultiHash'), 2, parameters('version'))), 'uniqueKeyPolicy', if(not(empty(parameters('uniqueKeyPolicyKeys'))), createObject('uniqueKeys', parameters('uniqueKeyPolicyKeys')), null())), if(not(equals(parameters('analyticalStorageTtl'), 0)), createObject('analyticalStorageTtl', parameters('analyticalStorageTtl')), createObject()))]"
                                  },
                                  "resources": {
                                    "databaseAccount::sqlDatabase": {
                                      "existing": true,
                                      "type": "Microsoft.DocumentDB/databaseAccounts/sqlDatabases",
                                      "apiVersion": "2024-11-15",
                                      "name": "[format('{0}/{1}', parameters('databaseAccountName'), parameters('sqlDatabaseName'))]"
                                    },
                                    "databaseAccount": {
                                      "existing": true,
                                      "type": "Microsoft.DocumentDB/databaseAccounts",
                                      "apiVersion": "2024-11-15",
                                      "name": "[parameters('databaseAccountName')]"
                                    },
                                    "container": {
                                      "type": "Microsoft.DocumentDB/databaseAccounts/sqlDatabases/containers",
                                      "apiVersion": "2024-11-15",
                                      "name": "[format('{0}/{1}/{2}', parameters('databaseAccountName'), parameters('sqlDatabaseName'), parameters('name'))]",
                                      "tags": "[parameters('tags')]",
                                      "properties": {
                                        "resource": "[variables('containerResourceParams')]",
                                        "options": "[if(contains(reference('databaseAccount').capabilities, createObject('name', 'EnableServerless')), null(), createObject('throughput', if(and(equals(parameters('autoscaleSettingsMaxThroughput'), null()), not(equals(parameters('throughput'), -1))), parameters('throughput'), null()), 'autoscaleSettings', if(not(equals(parameters('autoscaleSettingsMaxThroughput'), null())), createObject('maxThroughput', parameters('autoscaleSettingsMaxThroughput')), null())))]"
                                      },
                                      "dependsOn": [
                                        "databaseAccount"
                                      ]
                                    }
                                  },
                                  "outputs": {
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the container."
                                      },
                                      "value": "[parameters('name')]"
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource ID of the container."
                                      },
                                      "value": "[resourceId('Microsoft.DocumentDB/databaseAccounts/sqlDatabases/containers', parameters('databaseAccountName'), parameters('sqlDatabaseName'), parameters('name'))]"
                                    },
                                    "resourceGroupName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the resource group the container was created in."
                                      },
                                      "value": "[resourceGroup().name]"
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "sqlDatabase"
                              ]
                            }
                          },
                          "outputs": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the SQL database."
                              },
                              "value": "[parameters('name')]"
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource ID of the SQL database."
                              },
                              "value": "[resourceId('Microsoft.DocumentDB/databaseAccounts/sqlDatabases', parameters('databaseAccountName'), parameters('name'))]"
                            },
                            "resourceGroupName": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the resource group the SQL database was created in."
                              },
                              "value": "[resourceGroup().name]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "databaseAccount"
                      ]
                    },
                    "databaseAccount_sqlRoleDefinitions": {
                      "copy": {
                        "name": "databaseAccount_sqlRoleDefinitions",
                        "count": "[length(coalesce(parameters('dataPlaneRoleDefinitions'), createArray()))]"
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('{0}-sqlrd-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "databaseAccountName": {
                            "value": "[parameters('name')]"
                          },
                          "name": {
                            "value": "[tryGet(coalesce(parameters('dataPlaneRoleDefinitions'), createArray())[copyIndex()], 'name')]"
                          },
                          "dataActions": {
                            "value": "[tryGet(coalesce(parameters('dataPlaneRoleDefinitions'), createArray())[copyIndex()], 'dataActions')]"
                          },
                          "roleName": {
                            "value": "[coalesce(parameters('dataPlaneRoleDefinitions'), createArray())[copyIndex()].roleName]"
                          },
                          "assignableScopes": {
                            "value": "[tryGet(coalesce(parameters('dataPlaneRoleDefinitions'), createArray())[copyIndex()], 'assignableScopes')]"
                          },
                          "sqlRoleAssignments": {
                            "value": "[tryGet(coalesce(parameters('dataPlaneRoleDefinitions'), createArray())[copyIndex()], 'assignments')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "languageVersion": "2.0",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.35.1.17967",
                              "templateHash": "12119240119487993734"
                            },
                            "name": "DocumentDB Database Account SQL Role Definitions.",
                            "description": "This module deploys a SQL Role Definision in a CosmosDB Account."
                          },
                          "definitions": {
                            "sqlRoleAssignmentType": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Name unique identifier of the SQL Role Assignment."
                                  }
                                },
                                "principalId": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. The unique identifier for the associated AAD principal in the AAD graph to which access is being granted through this Role Assignment. Tenant ID for the principal is inferred using the tenant associated with the subscription."
                                  }
                                }
                              },
                              "metadata": {
                                "__bicep_export!": true,
                                "description": "The type for the SQL Role Assignments."
                              }
                            }
                          },
                          "parameters": {
                            "databaseAccountName": {
                              "type": "string",
                              "metadata": {
                                "description": "Conditional. The name of the parent Database Account. Required if the template is used in a standalone deployment."
                              }
                            },
                            "name": {
                              "type": "string",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The unique identifier of the Role Definition."
                              }
                            },
                            "roleName": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. A user-friendly name for the Role Definition. Must be unique for the database account."
                              }
                            },
                            "dataActions": {
                              "type": "array",
                              "items": {
                                "type": "string"
                              },
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. An array of data actions that are allowed."
                              }
                            },
                            "assignableScopes": {
                              "type": "array",
                              "items": {
                                "type": "string"
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. A set of fully qualified Scopes at or below which Role Assignments may be created using this Role Definition. This will allow application of this Role Definition on the entire database account or any underlying Database / Collection. Must have at least one element. Scopes higher than Database account are not enforceable as assignable Scopes. Note that resources referenced in assignable Scopes need not exist. Defaults to the current account."
                              }
                            },
                            "sqlRoleAssignments": {
                              "type": "array",
                              "items": {
                                "$ref": "#/definitions/sqlRoleAssignmentType"
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. An array of SQL Role Assignments to be created for the SQL Role Definition."
                              }
                            }
                          },
                          "resources": {
                            "databaseAccount": {
                              "existing": true,
                              "type": "Microsoft.DocumentDB/databaseAccounts",
                              "apiVersion": "2024-11-15",
                              "name": "[parameters('databaseAccountName')]"
                            },
                            "sqlRoleDefinition": {
                              "type": "Microsoft.DocumentDB/databaseAccounts/sqlRoleDefinitions",
                              "apiVersion": "2024-11-15",
                              "name": "[format('{0}/{1}', parameters('databaseAccountName'), coalesce(parameters('name'), guid(resourceId('Microsoft.DocumentDB/databaseAccounts', parameters('databaseAccountName')), parameters('databaseAccountName'), 'sql-role')))]",
                              "properties": {
                                "assignableScopes": "[coalesce(parameters('assignableScopes'), createArray(resourceId('Microsoft.DocumentDB/databaseAccounts', parameters('databaseAccountName'))))]",
                                "permissions": [
                                  {
                                    "dataActions": "[parameters('dataActions')]"
                                  }
                                ],
                                "roleName": "[parameters('roleName')]",
                                "type": "CustomRole"
                              }
                            },
                            "databaseAccount_sqlRoleAssignments": {
                              "copy": {
                                "name": "databaseAccount_sqlRoleAssignments",
                                "count": "[length(coalesce(parameters('sqlRoleAssignments'), createArray()))]"
                              },
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('{0}-sqlra-{1}', uniqueString(deployment().name), copyIndex())]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "databaseAccountName": {
                                    "value": "[parameters('databaseAccountName')]"
                                  },
                                  "roleDefinitionId": {
                                    "value": "[resourceId('Microsoft.DocumentDB/databaseAccounts/sqlRoleDefinitions', parameters('databaseAccountName'), coalesce(parameters('name'), guid(resourceId('Microsoft.DocumentDB/databaseAccounts', parameters('databaseAccountName')), parameters('databaseAccountName'), 'sql-role')))]"
                                  },
                                  "principalId": {
                                    "value": "[coalesce(parameters('sqlRoleAssignments'), createArray())[copyIndex()].principalId]"
                                  },
                                  "name": {
                                    "value": "[tryGet(coalesce(parameters('sqlRoleAssignments'), createArray())[copyIndex()], 'name')]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "languageVersion": "2.0",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.35.1.17967",
                                      "templateHash": "11941443499827753966"
                                    },
                                    "name": "DocumentDB Database Account SQL Role Assignments.",
                                    "description": "This module deploys a SQL Role Assignment in a CosmosDB Account."
                                  },
                                  "parameters": {
                                    "databaseAccountName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Conditional. The name of the parent Database Account. Required if the template is used in a standalone deployment."
                                      }
                                    },
                                    "name": {
                                      "type": "string",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Name unique identifier of the SQL Role Assignment."
                                      }
                                    },
                                    "principalId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The unique identifier for the associated AAD principal in the AAD graph to which access is being granted through this Role Assignment. Tenant ID for the principal is inferred using the tenant associated with the subscription."
                                      }
                                    },
                                    "roleDefinitionId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The unique identifier of the associated SQL Role Definition."
                                      }
                                    }
                                  },
                                  "resources": {
                                    "databaseAccount": {
                                      "existing": true,
                                      "type": "Microsoft.DocumentDB/databaseAccounts",
                                      "apiVersion": "2024-11-15",
                                      "name": "[parameters('databaseAccountName')]"
                                    },
                                    "sqlRoleAssignment": {
                                      "type": "Microsoft.DocumentDB/databaseAccounts/sqlRoleAssignments",
                                      "apiVersion": "2024-11-15",
                                      "name": "[format('{0}/{1}', parameters('databaseAccountName'), coalesce(parameters('name'), guid(parameters('roleDefinitionId'), parameters('principalId'), resourceId('Microsoft.DocumentDB/databaseAccounts', parameters('databaseAccountName')))))]",
                                      "properties": {
                                        "principalId": "[parameters('principalId')]",
                                        "roleDefinitionId": "[parameters('roleDefinitionId')]",
                                        "scope": "[resourceId('Microsoft.DocumentDB/databaseAccounts', parameters('databaseAccountName'))]"
                                      }
                                    }
                                  },
                                  "outputs": {
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the SQL Role Assignment."
                                      },
                                      "value": "[coalesce(parameters('name'), guid(parameters('roleDefinitionId'), parameters('principalId'), resourceId('Microsoft.DocumentDB/databaseAccounts', parameters('databaseAccountName'))))]"
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource ID of the SQL Role Assignment."
                                      },
                                      "value": "[resourceId('Microsoft.DocumentDB/databaseAccounts/sqlRoleAssignments', parameters('databaseAccountName'), coalesce(parameters('name'), guid(parameters('roleDefinitionId'), parameters('principalId'), resourceId('Microsoft.DocumentDB/databaseAccounts', parameters('databaseAccountName')))))]"
                                    },
                                    "resourceGroupName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the resource group the SQL Role Definition was created in."
                                      },
                                      "value": "[resourceGroup().name]"
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "sqlRoleDefinition"
                              ]
                            }
                          },
                          "outputs": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the SQL Role Definition."
                              },
                              "value": "[coalesce(parameters('name'), guid(resourceId('Microsoft.DocumentDB/databaseAccounts', parameters('databaseAccountName')), parameters('databaseAccountName'), 'sql-role'))]"
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource ID of the SQL Role Definition."
                              },
                              "value": "[resourceId('Microsoft.DocumentDB/databaseAccounts/sqlRoleDefinitions', parameters('databaseAccountName'), coalesce(parameters('name'), guid(resourceId('Microsoft.DocumentDB/databaseAccounts', parameters('databaseAccountName')), parameters('databaseAccountName'), 'sql-role')))]"
                            },
                            "resourceGroupName": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the resource group the SQL Role Definition was created in."
                              },
                              "value": "[resourceGroup().name]"
                            },
                            "roleName": {
                              "type": "string",
                              "metadata": {
                                "description": "The role name of the SQL Role Definition."
                              },
                              "value": "[reference('sqlRoleDefinition').roleName]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "databaseAccount"
                      ]
                    },
                    "databaseAccount_sqlRoleAssignments": {
                      "copy": {
                        "name": "databaseAccount_sqlRoleAssignments",
                        "count": "[length(coalesce(parameters('dataPlaneRoleAssignments'), createArray()))]"
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('{0}-sqlra-{1}', uniqueString(deployment().name), copyIndex())]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "databaseAccountName": {
                            "value": "[parameters('name')]"
                          },
                          "roleDefinitionId": {
                            "value": "[coalesce(parameters('dataPlaneRoleAssignments'), createArray())[copyIndex()].roleDefinitionId]"
                          },
                          "principalId": {
                            "value": "[coalesce(parameters('dataPlaneRoleAssignments'), createArray())[copyIndex()].principalId]"
                          },
                          "name": {
                            "value": "[tryGet(coalesce(parameters('dataPlaneRoleAssignments'), createArray())[copyIndex()], 'name')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "languageVersion": "2.0",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.35.1.17967",
                              "templateHash": "11941443499827753966"
                            },
                            "name": "DocumentDB Database Account SQL Role Assignments.",
                            "description": "This module deploys a SQL Role Assignment in a CosmosDB Account."
                          },
                          "parameters": {
                            "databaseAccountName": {
                              "type": "string",
                              "metadata": {
                                "description": "Conditional. The name of the parent Database Account. Required if the template is used in a standalone deployment."
                              }
                            },
                            "name": {
                              "type": "string",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Name unique identifier of the SQL Role Assignment."
                              }
                            },
                            "principalId": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The unique identifier for the associated AAD principal in the AAD graph to which access is being granted through this Role Assignment. Tenant ID for the principal is inferred using the tenant associated with the subscription."
                              }
                            },
                            "roleDefinitionId": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The unique identifier of the associated SQL Role Definition."
                              }
                            }
                          },
                          "resources": {
                            "databaseAccount": {
                              "existing": true,
                              "type": "Microsoft.DocumentDB/databaseAccounts",
                              "apiVersion": "2024-11-15",
                              "name": "[parameters('databaseAccountName')]"
                            },
                            "sqlRoleAssignment": {
                              "type": "Microsoft.DocumentDB/databaseAccounts/sqlRoleAssignments",
                              "apiVersion": "2024-11-15",
                              "name": "[format('{0}/{1}', parameters('databaseAccountName'), coalesce(parameters('name'), guid(parameters('roleDefinitionId'), parameters('principalId'), resourceId('Microsoft.DocumentDB/databaseAccounts', parameters('databaseAccountName')))))]",
                              "properties": {
                                "principalId": "[parameters('principalId')]",
                                "roleDefinitionId": "[parameters('roleDefinitionId')]",
                                "scope": "[resourceId('Microsoft.DocumentDB/databaseAccounts', parameters('databaseAccountName'))]"
                              }
                            }
                          },
                          "outputs": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the SQL Role Assignment."
                              },
                              "value": "[coalesce(parameters('name'), guid(parameters('roleDefinitionId'), parameters('principalId'), resourceId('Microsoft.DocumentDB/databaseAccounts', parameters('databaseAccountName'))))]"
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource ID of the SQL Role Assignment."
                              },
                              "value": "[resourceId('Microsoft.DocumentDB/databaseAccounts/sqlRoleAssignments', parameters('databaseAccountName'), coalesce(parameters('name'), guid(parameters('roleDefinitionId'), parameters('principalId'), resourceId('Microsoft.DocumentDB/databaseAccounts', parameters('databaseAccountName')))))]"
                            },
                            "resourceGroupName": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the resource group the SQL Role Definition was created in."
                              },
                              "value": "[resourceGroup().name]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "databaseAccount"
                      ]
                    },
                    "databaseAccount_mongodbDatabases": {
                      "copy": {
                        "name": "databaseAccount_mongodbDatabases",
                        "count": "[length(coalesce(parameters('mongodbDatabases'), createArray()))]"
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('{0}-mongodb-{1}', uniqueString(deployment().name, parameters('location')), coalesce(parameters('mongodbDatabases'), createArray())[copyIndex()].name)]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "databaseAccountName": {
                            "value": "[parameters('name')]"
                          },
                          "name": {
                            "value": "[coalesce(parameters('mongodbDatabases'), createArray())[copyIndex()].name]"
                          },
                          "tags": {
                            "value": "[coalesce(tryGet(coalesce(parameters('mongodbDatabases'), createArray())[copyIndex()], 'tags'), parameters('tags'))]"
                          },
                          "collections": {
                            "value": "[tryGet(coalesce(parameters('mongodbDatabases'), createArray())[copyIndex()], 'collections')]"
                          },
                          "throughput": {
                            "value": "[tryGet(coalesce(parameters('mongodbDatabases'), createArray())[copyIndex()], 'throughput')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "languageVersion": "2.0",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.35.1.17967",
                              "templateHash": "16911349070369924403"
                            },
                            "name": "DocumentDB Database Account MongoDB Databases",
                            "description": "This module deploys a MongoDB Database within a CosmosDB Account."
                          },
                          "parameters": {
                            "databaseAccountName": {
                              "type": "string",
                              "metadata": {
                                "description": "Conditional. The name of the parent Cosmos DB database account. Required if the template is used in a standalone deployment."
                              }
                            },
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. Name of the mongodb database."
                              }
                            },
                            "throughput": {
                              "type": "int",
                              "defaultValue": 400,
                              "metadata": {
                                "description": "Optional. Request Units per second. Setting throughput at the database level is only recommended for development/test or when workload across all collections in the shared throughput database is uniform. For best performance for large production workloads, it is recommended to set dedicated throughput (autoscale or manual) at the collection level and not at the database level."
                              }
                            },
                            "collections": {
                              "type": "array",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Collections in the mongodb database."
                              }
                            },
                            "tags": {
                              "type": "object",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Tags of the resource."
                              }
                            }
                          },
                          "resources": {
                            "databaseAccount": {
                              "existing": true,
                              "type": "Microsoft.DocumentDB/databaseAccounts",
                              "apiVersion": "2024-11-15",
                              "name": "[parameters('databaseAccountName')]"
                            },
                            "mongodbDatabase": {
                              "type": "Microsoft.DocumentDB/databaseAccounts/mongodbDatabases",
                              "apiVersion": "2024-11-15",
                              "name": "[format('{0}/{1}', parameters('databaseAccountName'), parameters('name'))]",
                              "tags": "[parameters('tags')]",
                              "properties": {
                                "resource": {
                                  "id": "[parameters('name')]"
                                },
                                "options": "[if(contains(reference('databaseAccount').capabilities, createObject('name', 'EnableServerless')), null(), createObject('throughput', parameters('throughput')))]"
                              },
                              "dependsOn": [
                                "databaseAccount"
                              ]
                            },
                            "mongodbDatabase_collections": {
                              "copy": {
                                "name": "mongodbDatabase_collections",
                                "count": "[length(coalesce(parameters('collections'), createArray()))]"
                              },
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('{0}-collection-{1}', uniqueString(deployment().name, parameters('name')), coalesce(parameters('collections'), createArray())[copyIndex()].name)]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "databaseAccountName": {
                                    "value": "[parameters('databaseAccountName')]"
                                  },
                                  "mongodbDatabaseName": {
                                    "value": "[parameters('name')]"
                                  },
                                  "name": {
                                    "value": "[coalesce(parameters('collections'), createArray())[copyIndex()].name]"
                                  },
                                  "indexes": {
                                    "value": "[coalesce(parameters('collections'), createArray())[copyIndex()].indexes]"
                                  },
                                  "shardKey": {
                                    "value": "[coalesce(parameters('collections'), createArray())[copyIndex()].shardKey]"
                                  },
                                  "throughput": {
                                    "value": "[tryGet(coalesce(parameters('collections'), createArray())[copyIndex()], 'throughput')]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.35.1.17967",
                                      "templateHash": "7802955893269337475"
                                    },
                                    "name": "DocumentDB Database Account MongoDB Database Collections",
                                    "description": "This module deploys a MongoDB Database Collection."
                                  },
                                  "parameters": {
                                    "databaseAccountName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Conditional. The name of the parent Cosmos DB database account. Required if the template is used in a standalone deployment."
                                      }
                                    },
                                    "mongodbDatabaseName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Conditional. The name of the parent mongodb database. Required if the template is used in a standalone deployment."
                                      }
                                    },
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. Name of the collection."
                                      }
                                    },
                                    "throughput": {
                                      "type": "int",
                                      "defaultValue": 400,
                                      "metadata": {
                                        "description": "Optional. Request Units per second. For best performance for large production workloads, it is recommended to set dedicated throughput (autoscale or manual) at the collection level and not at the database level."
                                      }
                                    },
                                    "indexes": {
                                      "type": "array",
                                      "metadata": {
                                        "description": "Required. Indexes for the collection."
                                      }
                                    },
                                    "shardKey": {
                                      "type": "object",
                                      "metadata": {
                                        "description": "Required. ShardKey for the collection."
                                      }
                                    }
                                  },
                                  "resources": [
                                    {
                                      "type": "Microsoft.DocumentDB/databaseAccounts/mongodbDatabases/collections",
                                      "apiVersion": "2024-11-15",
                                      "name": "[format('{0}/{1}/{2}', parameters('databaseAccountName'), parameters('mongodbDatabaseName'), parameters('name'))]",
                                      "properties": {
                                        "options": "[if(contains(reference(resourceId('Microsoft.DocumentDB/databaseAccounts', parameters('databaseAccountName')), '2024-11-15').capabilities, createObject('name', 'EnableServerless')), null(), createObject('throughput', parameters('throughput')))]",
                                        "resource": {
                                          "id": "[parameters('name')]",
                                          "indexes": "[parameters('indexes')]",
                                          "shardKey": "[parameters('shardKey')]"
                                        }
                                      }
                                    }
                                  ],
                                  "outputs": {
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the mongodb database collection."
                                      },
                                      "value": "[parameters('name')]"
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource ID of the mongodb database collection."
                                      },
                                      "value": "[resourceId('Microsoft.DocumentDB/databaseAccounts/mongodbDatabases/collections', parameters('databaseAccountName'), parameters('mongodbDatabaseName'), parameters('name'))]"
                                    },
                                    "resourceGroupName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the resource group the mongodb database collection was created in."
                                      },
                                      "value": "[resourceGroup().name]"
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "mongodbDatabase"
                              ]
                            }
                          },
                          "outputs": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the mongodb database."
                              },
                              "value": "[parameters('name')]"
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource ID of the mongodb database."
                              },
                              "value": "[resourceId('Microsoft.DocumentDB/databaseAccounts/mongodbDatabases', parameters('databaseAccountName'), parameters('name'))]"
                            },
                            "resourceGroupName": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the resource group the mongodb database was created in."
                              },
                              "value": "[resourceGroup().name]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "databaseAccount"
                      ]
                    },
                    "databaseAccount_gremlinDatabases": {
                      "copy": {
                        "name": "databaseAccount_gremlinDatabases",
                        "count": "[length(coalesce(parameters('gremlinDatabases'), createArray()))]"
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('{0}-gremlin-{1}', uniqueString(deployment().name, parameters('location')), coalesce(parameters('gremlinDatabases'), createArray())[copyIndex()].name)]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "databaseAccountName": {
                            "value": "[parameters('name')]"
                          },
                          "name": {
                            "value": "[coalesce(parameters('gremlinDatabases'), createArray())[copyIndex()].name]"
                          },
                          "tags": {
                            "value": "[coalesce(tryGet(coalesce(parameters('gremlinDatabases'), createArray())[copyIndex()], 'tags'), parameters('tags'))]"
                          },
                          "graphs": {
                            "value": "[tryGet(coalesce(parameters('gremlinDatabases'), createArray())[copyIndex()], 'graphs')]"
                          },
                          "maxThroughput": {
                            "value": "[tryGet(coalesce(parameters('gremlinDatabases'), createArray())[copyIndex()], 'maxThroughput')]"
                          },
                          "throughput": {
                            "value": "[tryGet(coalesce(parameters('gremlinDatabases'), createArray())[copyIndex()], 'throughput')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "languageVersion": "2.0",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.35.1.17967",
                              "templateHash": "4743052544503629108"
                            },
                            "name": "DocumentDB Database Account Gremlin Databases",
                            "description": "This module deploys a Gremlin Database within a CosmosDB Account."
                          },
                          "parameters": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. Name of the Gremlin database."
                              }
                            },
                            "tags": {
                              "type": "object",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Tags of the Gremlin database resource."
                              }
                            },
                            "databaseAccountName": {
                              "type": "string",
                              "metadata": {
                                "description": "Conditional. The name of the parent Gremlin database. Required if the template is used in a standalone deployment."
                              }
                            },
                            "graphs": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. Array of graphs to deploy in the Gremlin database."
                              }
                            },
                            "maxThroughput": {
                              "type": "int",
                              "defaultValue": 4000,
                              "metadata": {
                                "description": "Optional. Represents maximum throughput, the resource can scale up to. Cannot be set together with `throughput`. If `throughput` is set to something else than -1, this autoscale setting is ignored. Setting throughput at the database level is only recommended for development/test or when workload across all graphs in the shared throughput database is uniform. For best performance for large production workloads, it is recommended to set dedicated throughput (autoscale or manual) at the graph level and not at the database level."
                              }
                            },
                            "throughput": {
                              "type": "int",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Request Units per second (for example 10000). Cannot be set together with `maxThroughput`. Setting throughput at the database level is only recommended for development/test or when workload across all graphs in the shared throughput database is uniform. For best performance for large production workloads, it is recommended to set dedicated throughput (autoscale or manual) at the graph level and not at the database level."
                              }
                            }
                          },
                          "resources": {
                            "databaseAccount": {
                              "existing": true,
                              "type": "Microsoft.DocumentDB/databaseAccounts",
                              "apiVersion": "2024-11-15",
                              "name": "[parameters('databaseAccountName')]"
                            },
                            "gremlinDatabase": {
                              "type": "Microsoft.DocumentDB/databaseAccounts/gremlinDatabases",
                              "apiVersion": "2024-11-15",
                              "name": "[format('{0}/{1}', parameters('databaseAccountName'), parameters('name'))]",
                              "tags": "[parameters('tags')]",
                              "properties": {
                                "options": "[if(contains(reference('databaseAccount').capabilities, createObject('name', 'EnableServerless')), createObject(), createObject('autoscaleSettings', if(equals(parameters('throughput'), null()), createObject('maxThroughput', parameters('maxThroughput')), null()), 'throughput', parameters('throughput')))]",
                                "resource": {
                                  "id": "[parameters('name')]"
                                }
                              },
                              "dependsOn": [
                                "databaseAccount"
                              ]
                            },
                            "gremlinDatabase_gremlinGraphs": {
                              "copy": {
                                "name": "gremlinDatabase_gremlinGraphs",
                                "count": "[length(parameters('graphs'))]"
                              },
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('{0}-gremlindb-{1}', uniqueString(deployment().name, parameters('name')), parameters('graphs')[copyIndex()].name)]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "name": {
                                    "value": "[parameters('graphs')[copyIndex()].name]"
                                  },
                                  "gremlinDatabaseName": {
                                    "value": "[parameters('name')]"
                                  },
                                  "databaseAccountName": {
                                    "value": "[parameters('databaseAccountName')]"
                                  },
                                  "indexingPolicy": {
                                    "value": "[tryGet(parameters('graphs')[copyIndex()], 'indexingPolicy')]"
                                  },
                                  "partitionKeyPaths": "[if(not(empty(parameters('graphs')[copyIndex()].partitionKeyPaths)), createObject('value', parameters('graphs')[copyIndex()].partitionKeyPaths), createObject('value', createArray()))]"
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "languageVersion": "2.0",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.35.1.17967",
                                      "templateHash": "9587717186996793648"
                                    },
                                    "name": "DocumentDB Database Accounts Gremlin Databases Graphs",
                                    "description": "This module deploys a DocumentDB Database Accounts Gremlin Database Graph."
                                  },
                                  "parameters": {
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. Name of the graph."
                                      }
                                    },
                                    "tags": {
                                      "type": "object",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Tags of the Gremlin graph resource."
                                      }
                                    },
                                    "databaseAccountName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Conditional. The name of the parent Database Account. Required if the template is used in a standalone deployment."
                                      }
                                    },
                                    "gremlinDatabaseName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Conditional. The name of the parent Gremlin Database. Required if the template is used in a standalone deployment."
                                      }
                                    },
                                    "indexingPolicy": {
                                      "type": "object",
                                      "defaultValue": {},
                                      "metadata": {
                                        "description": "Optional. Indexing policy of the graph."
                                      }
                                    },
                                    "partitionKeyPaths": {
                                      "type": "array",
                                      "defaultValue": [],
                                      "metadata": {
                                        "description": "Optional. List of paths using which data within the container can be partitioned."
                                      }
                                    }
                                  },
                                  "resources": {
                                    "databaseAccount::gremlinDatabase": {
                                      "existing": true,
                                      "type": "Microsoft.DocumentDB/databaseAccounts/gremlinDatabases",
                                      "apiVersion": "2024-11-15",
                                      "name": "[format('{0}/{1}', parameters('databaseAccountName'), parameters('gremlinDatabaseName'))]"
                                    },
                                    "databaseAccount": {
                                      "existing": true,
                                      "type": "Microsoft.DocumentDB/databaseAccounts",
                                      "apiVersion": "2024-11-15",
                                      "name": "[parameters('databaseAccountName')]"
                                    },
                                    "gremlinGraph": {
                                      "type": "Microsoft.DocumentDB/databaseAccounts/gremlinDatabases/graphs",
                                      "apiVersion": "2024-11-15",
                                      "name": "[format('{0}/{1}/{2}', parameters('databaseAccountName'), parameters('gremlinDatabaseName'), parameters('name'))]",
                                      "tags": "[parameters('tags')]",
                                      "properties": {
                                        "resource": {
                                          "id": "[parameters('name')]",
                                          "indexingPolicy": "[if(not(empty(parameters('indexingPolicy'))), parameters('indexingPolicy'), null())]",
                                          "partitionKey": {
                                            "paths": "[if(not(empty(parameters('partitionKeyPaths'))), parameters('partitionKeyPaths'), null())]"
                                          }
                                        }
                                      }
                                    }
                                  },
                                  "outputs": {
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the graph."
                                      },
                                      "value": "[parameters('name')]"
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource ID of the graph."
                                      },
                                      "value": "[resourceId('Microsoft.DocumentDB/databaseAccounts/gremlinDatabases/graphs', parameters('databaseAccountName'), parameters('gremlinDatabaseName'), parameters('name'))]"
                                    },
                                    "resourceGroupName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the resource group the graph was created in."
                                      },
                                      "value": "[resourceGroup().name]"
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "gremlinDatabase"
                              ]
                            }
                          },
                          "outputs": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the Gremlin database."
                              },
                              "value": "[parameters('name')]"
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource ID of the Gremlin database."
                              },
                              "value": "[resourceId('Microsoft.DocumentDB/databaseAccounts/gremlinDatabases', parameters('databaseAccountName'), parameters('name'))]"
                            },
                            "resourceGroupName": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the resource group the Gremlin database was created in."
                              },
                              "value": "[resourceGroup().name]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "databaseAccount"
                      ]
                    },
                    "databaseAccount_tables": {
                      "copy": {
                        "name": "databaseAccount_tables",
                        "count": "[length(coalesce(parameters('tables'), createArray()))]"
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('{0}-table-{1}', uniqueString(deployment().name, parameters('location')), coalesce(parameters('tables'), createArray())[copyIndex()].name)]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "databaseAccountName": {
                            "value": "[parameters('name')]"
                          },
                          "name": {
                            "value": "[coalesce(parameters('tables'), createArray())[copyIndex()].name]"
                          },
                          "tags": {
                            "value": "[coalesce(tryGet(coalesce(parameters('tables'), createArray())[copyIndex()], 'tags'), parameters('tags'))]"
                          },
                          "maxThroughput": {
                            "value": "[tryGet(coalesce(parameters('tables'), createArray())[copyIndex()], 'maxThroughput')]"
                          },
                          "throughput": {
                            "value": "[tryGet(coalesce(parameters('tables'), createArray())[copyIndex()], 'throughput')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "languageVersion": "2.0",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.35.1.17967",
                              "templateHash": "14106261468136691896"
                            },
                            "name": "Azure Cosmos DB account tables",
                            "description": "This module deploys a table within an Azure Cosmos DB Account."
                          },
                          "parameters": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. Name of the table."
                              }
                            },
                            "tags": {
                              "type": "object",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Tags for the table."
                              }
                            },
                            "databaseAccountName": {
                              "type": "string",
                              "metadata": {
                                "description": "Conditional. The name of the parent Azure Cosmos DB account. Required if the template is used in a standalone deployment."
                              }
                            },
                            "maxThroughput": {
                              "type": "int",
                              "defaultValue": 4000,
                              "metadata": {
                                "description": "Optional. Represents maximum throughput, the resource can scale up to. Cannot be set together with `throughput`. If `throughput` is set to something else than -1, this autoscale setting is ignored."
                              }
                            },
                            "throughput": {
                              "type": "int",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Request Units per second (for example 10000). Cannot be set together with `maxThroughput`."
                              }
                            }
                          },
                          "resources": {
                            "databaseAccount": {
                              "existing": true,
                              "type": "Microsoft.DocumentDB/databaseAccounts",
                              "apiVersion": "2024-11-15",
                              "name": "[parameters('databaseAccountName')]"
                            },
                            "table": {
                              "type": "Microsoft.DocumentDB/databaseAccounts/tables",
                              "apiVersion": "2024-11-15",
                              "name": "[format('{0}/{1}', parameters('databaseAccountName'), parameters('name'))]",
                              "tags": "[parameters('tags')]",
                              "properties": {
                                "options": "[if(contains(reference('databaseAccount').capabilities, createObject('name', 'EnableServerless')), createObject(), createObject('autoscaleSettings', if(equals(parameters('throughput'), null()), createObject('maxThroughput', parameters('maxThroughput')), null()), 'throughput', parameters('throughput')))]",
                                "resource": {
                                  "id": "[parameters('name')]"
                                }
                              },
                              "dependsOn": [
                                "databaseAccount"
                              ]
                            }
                          },
                          "outputs": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the table."
                              },
                              "value": "[parameters('name')]"
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource ID of the table."
                              },
                              "value": "[resourceId('Microsoft.DocumentDB/databaseAccounts/tables', parameters('databaseAccountName'), parameters('name'))]"
                            },
                            "resourceGroupName": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the resource group the table was created in."
                              },
                              "value": "[resourceGroup().name]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "databaseAccount"
                      ]
                    },
                    "databaseAccount_privateEndpoints": {
                      "copy": {
                        "name": "databaseAccount_privateEndpoints",
                        "count": "[length(coalesce(parameters('privateEndpoints'), createArray()))]"
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('{0}-dbAccount-PrivateEndpoint-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                      "subscriptionId": "[split(coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'resourceGroupResourceId'), resourceGroup().id), '/')[2]]",
                      "resourceGroup": "[split(coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'resourceGroupResourceId'), resourceGroup().id), '/')[4]]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "name": {
                            "value": "[coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'name'), format('pep-{0}-{1}-{2}', last(split(resourceId('Microsoft.DocumentDB/databaseAccounts', parameters('name')), '/')), coalesce(parameters('privateEndpoints'), createArray())[copyIndex()].service, copyIndex()))]"
                          },
                          "privateLinkServiceConnections": "[if(not(equals(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'isManualConnection'), true())), createObject('value', createArray(createObject('name', coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'privateLinkServiceConnectionName'), format('{0}-{1}-{2}', last(split(resourceId('Microsoft.DocumentDB/databaseAccounts', parameters('name')), '/')), coalesce(parameters('privateEndpoints'), createArray())[copyIndex()].service, copyIndex())), 'properties', createObject('privateLinkServiceId', resourceId('Microsoft.DocumentDB/databaseAccounts', parameters('name')), 'groupIds', createArray(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()].service))))), createObject('value', null()))]",
                          "manualPrivateLinkServiceConnections": "[if(equals(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'isManualConnection'), true()), createObject('value', createArray(createObject('name', coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'privateLinkServiceConnectionName'), format('{0}-{1}-{2}', last(split(resourceId('Microsoft.DocumentDB/databaseAccounts', parameters('name')), '/')), coalesce(parameters('privateEndpoints'), createArray())[copyIndex()].service, copyIndex())), 'properties', createObject('privateLinkServiceId', resourceId('Microsoft.DocumentDB/databaseAccounts', parameters('name')), 'groupIds', createArray(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()].service), 'requestMessage', coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'manualConnectionRequestMessage'), 'Manual approval required.'))))), createObject('value', null()))]",
                          "subnetResourceId": {
                            "value": "[coalesce(parameters('privateEndpoints'), createArray())[copyIndex()].subnetResourceId]"
                          },
                          "enableTelemetry": {
                            "value": "[variables('enableReferencedModulesTelemetry')]"
                          },
                          "location": {
                            "value": "[coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'location'), reference(split(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()].subnetResourceId, '/subnets/')[0], '2020-06-01', 'Full').location)]"
                          },
                          "lock": {
                            "value": "[coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'lock'), parameters('lock'))]"
                          },
                          "privateDnsZoneGroup": {
                            "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'privateDnsZoneGroup')]"
                          },
                          "roleAssignments": {
                            "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'roleAssignments')]"
                          },
                          "tags": {
                            "value": "[coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'tags'), parameters('tags'))]"
                          },
                          "customDnsConfigs": {
                            "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'customDnsConfigs')]"
                          },
                          "ipConfigurations": {
                            "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'ipConfigurations')]"
                          },
                          "applicationSecurityGroupResourceIds": {
                            "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'applicationSecurityGroupResourceIds')]"
                          },
                          "customNetworkInterfaceName": {
                            "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'customNetworkInterfaceName')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "languageVersion": "2.0",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.33.13.18514",
                              "templateHash": "15954548978129725136"
                            },
                            "name": "Private Endpoints",
                            "description": "This module deploys a Private Endpoint."
                          },
                          "definitions": {
                            "privateDnsZoneGroupType": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The name of the Private DNS Zone Group."
                                  }
                                },
                                "privateDnsZoneGroupConfigs": {
                                  "type": "array",
                                  "items": {
                                    "$ref": "#/definitions/privateDnsZoneGroupConfigType"
                                  },
                                  "metadata": {
                                    "description": "Required. The private DNS zone groups to associate the private endpoint. A DNS zone group can support up to 5 DNS zones."
                                  }
                                }
                              },
                              "metadata": {
                                "__bicep_export!": true
                              }
                            },
                            "ipConfigurationType": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. The name of the resource that is unique within a resource group."
                                  }
                                },
                                "properties": {
                                  "type": "object",
                                  "properties": {
                                    "groupId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The ID of a group obtained from the remote resource that this private endpoint should connect to. If used with private link service connection, this property must be defined as empty string."
                                      }
                                    },
                                    "memberName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The member name of a group obtained from the remote resource that this private endpoint should connect to. If used with private link service connection, this property must be defined as empty string."
                                      }
                                    },
                                    "privateIPAddress": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. A private IP address obtained from the private endpoint's subnet."
                                      }
                                    }
                                  },
                                  "metadata": {
                                    "description": "Required. Properties of private endpoint IP configurations."
                                  }
                                }
                              },
                              "metadata": {
                                "__bicep_export!": true
                              }
                            },
                            "privateLinkServiceConnectionType": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. The name of the private link service connection."
                                  }
                                },
                                "properties": {
                                  "type": "object",
                                  "properties": {
                                    "groupIds": {
                                      "type": "array",
                                      "items": {
                                        "type": "string"
                                      },
                                      "metadata": {
                                        "description": "Required. The ID of a group obtained from the remote resource that this private endpoint should connect to. If used with private link service connection, this property must be defined as empty string array `[]`."
                                      }
                                    },
                                    "privateLinkServiceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The resource id of private link service."
                                      }
                                    },
                                    "requestMessage": {
                                      "type": "string",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. A message passed to the owner of the remote resource with this connection request. Restricted to 140 chars."
                                      }
                                    }
                                  },
                                  "metadata": {
                                    "description": "Required. Properties of private link service connection."
                                  }
                                }
                              },
                              "metadata": {
                                "__bicep_export!": true
                              }
                            },
                            "customDnsConfigType": {
                              "type": "object",
                              "properties": {
                                "fqdn": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. FQDN that resolves to private endpoint IP address."
                                  }
                                },
                                "ipAddresses": {
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  },
                                  "metadata": {
                                    "description": "Required. A list of private IP addresses of the private endpoint."
                                  }
                                }
                              },
                              "metadata": {
                                "__bicep_export!": true
                              }
                            },
                            "lockType": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Specify the name of lock."
                                  }
                                },
                                "kind": {
                                  "type": "string",
                                  "allowedValues": [
                                    "CanNotDelete",
                                    "None",
                                    "ReadOnly"
                                  ],
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Specify the type of lock."
                                  }
                                }
                              },
                              "metadata": {
                                "description": "An AVM-aligned type for a lock.",
                                "__bicep_imported_from!": {
                                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
                                }
                              }
                            },
                            "privateDnsZoneGroupConfigType": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The name of the private DNS zone group config."
                                  }
                                },
                                "privateDnsZoneResourceId": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. The resource id of the private DNS zone."
                                  }
                                }
                              },
                              "metadata": {
                                "__bicep_imported_from!": {
                                  "sourceTemplate": "private-dns-zone-group/main.bicep"
                                }
                              }
                            },
                            "roleAssignmentType": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The name (as GUID) of the role assignment. If not provided, a GUID will be generated."
                                  }
                                },
                                "roleDefinitionIdOrName": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                                  }
                                },
                                "principalId": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                                  }
                                },
                                "principalType": {
                                  "type": "string",
                                  "allowedValues": [
                                    "Device",
                                    "ForeignGroup",
                                    "Group",
                                    "ServicePrincipal",
                                    "User"
                                  ],
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The principal type of the assigned principal ID."
                                  }
                                },
                                "description": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The description of the role assignment."
                                  }
                                },
                                "condition": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                                  }
                                },
                                "conditionVersion": {
                                  "type": "string",
                                  "allowedValues": [
                                    "2.0"
                                  ],
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Version of the condition."
                                  }
                                },
                                "delegatedManagedIdentityResourceId": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The Resource Id of the delegated managed identity resource."
                                  }
                                }
                              },
                              "metadata": {
                                "description": "An AVM-aligned type for a role assignment.",
                                "__bicep_imported_from!": {
                                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
                                }
                              }
                            }
                          },
                          "parameters": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. Name of the private endpoint resource to create."
                              }
                            },
                            "subnetResourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. Resource ID of the subnet where the endpoint needs to be created."
                              }
                            },
                            "applicationSecurityGroupResourceIds": {
                              "type": "array",
                              "items": {
                                "type": "string"
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Application security groups in which the private endpoint IP configuration is included."
                              }
                            },
                            "customNetworkInterfaceName": {
                              "type": "string",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The custom name of the network interface attached to the private endpoint."
                              }
                            },
                            "ipConfigurations": {
                              "type": "array",
                              "items": {
                                "$ref": "#/definitions/ipConfigurationType"
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. A list of IP configurations of the private endpoint. This will be used to map to the First Party Service endpoints."
                              }
                            },
                            "privateDnsZoneGroup": {
                              "$ref": "#/definitions/privateDnsZoneGroupType",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The private DNS zone group to configure for the private endpoint."
                              }
                            },
                            "location": {
                              "type": "string",
                              "defaultValue": "[resourceGroup().location]",
                              "metadata": {
                                "description": "Optional. Location for all Resources."
                              }
                            },
                            "lock": {
                              "$ref": "#/definitions/lockType",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The lock settings of the service."
                              }
                            },
                            "roleAssignments": {
                              "type": "array",
                              "items": {
                                "$ref": "#/definitions/roleAssignmentType"
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Array of role assignments to create."
                              }
                            },
                            "tags": {
                              "type": "object",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Tags to be applied on all resources/resource groups in this deployment."
                              }
                            },
                            "customDnsConfigs": {
                              "type": "array",
                              "items": {
                                "$ref": "#/definitions/customDnsConfigType"
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Custom DNS configurations."
                              }
                            },
                            "manualPrivateLinkServiceConnections": {
                              "type": "array",
                              "items": {
                                "$ref": "#/definitions/privateLinkServiceConnectionType"
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Conditional. A grouping of information about the connection to the remote resource. Used when the network admin does not have access to approve connections to the remote resource. Required if `privateLinkServiceConnections` is empty."
                              }
                            },
                            "privateLinkServiceConnections": {
                              "type": "array",
                              "items": {
                                "$ref": "#/definitions/privateLinkServiceConnectionType"
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Conditional. A grouping of information about the connection to the remote resource. Required if `manualPrivateLinkServiceConnections` is empty."
                              }
                            },
                            "enableTelemetry": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Optional. Enable/Disable usage telemetry for module."
                              }
                            }
                          },
                          "variables": {
                            "copy": [
                              {
                                "name": "formattedRoleAssignments",
                                "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]",
                                "input": "[union(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')], createObject('roleDefinitionId', coalesce(tryGet(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName), if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName)))))]"
                              }
                            ],
                            "builtInRoleNames": {
                              "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                              "DNS Resolver Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '0f2ebee7-ffd4-4fc0-b3b7-664099fdad5d')]",
                              "DNS Zone Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'befefa01-2a29-4197-83a8-272ff33ce314')]",
                              "Domain Services Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'eeaeda52-9324-47f6-8069-5d5bade478b2')]",
                              "Domain Services Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '361898ef-9ed1-48c2-849c-a832951106bb')]",
                              "Network Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4d97b98b-1d4f-4787-a291-c67834d212e7')]",
                              "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                              "Private DNS Zone Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b12aa53e-6015-4669-85d0-8515ebb3ae7f')]",
                              "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                              "Role Based Access Control Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]"
                            }
                          },
                          "resources": {
                            "avmTelemetry": {
                              "condition": "[parameters('enableTelemetry')]",
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2024-03-01",
                              "name": "[format('46d3xbcp.res.network-privateendpoint.{0}.{1}', replace('0.10.1', '.', '-'), substring(uniqueString(deployment().name, parameters('location')), 0, 4))]",
                              "properties": {
                                "mode": "Incremental",
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "resources": [],
                                  "outputs": {
                                    "telemetry": {
                                      "type": "String",
                                      "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                                    }
                                  }
                                }
                              }
                            },
                            "privateEndpoint": {
                              "type": "Microsoft.Network/privateEndpoints",
                              "apiVersion": "2023-11-01",
                              "name": "[parameters('name')]",
                              "location": "[parameters('location')]",
                              "tags": "[parameters('tags')]",
                              "properties": {
                                "copy": [
                                  {
                                    "name": "applicationSecurityGroups",
                                    "count": "[length(coalesce(parameters('applicationSecurityGroupResourceIds'), createArray()))]",
                                    "input": {
                                      "id": "[coalesce(parameters('applicationSecurityGroupResourceIds'), createArray())[copyIndex('applicationSecurityGroups')]]"
                                    }
                                  }
                                ],
                                "customDnsConfigs": "[coalesce(parameters('customDnsConfigs'), createArray())]",
                                "customNetworkInterfaceName": "[coalesce(parameters('customNetworkInterfaceName'), '')]",
                                "ipConfigurations": "[coalesce(parameters('ipConfigurations'), createArray())]",
                                "manualPrivateLinkServiceConnections": "[coalesce(parameters('manualPrivateLinkServiceConnections'), createArray())]",
                                "privateLinkServiceConnections": "[coalesce(parameters('privateLinkServiceConnections'), createArray())]",
                                "subnet": {
                                  "id": "[parameters('subnetResourceId')]"
                                }
                              }
                            },
                            "privateEndpoint_lock": {
                              "condition": "[and(not(empty(coalesce(parameters('lock'), createObject()))), not(equals(tryGet(parameters('lock'), 'kind'), 'None')))]",
                              "type": "Microsoft.Authorization/locks",
                              "apiVersion": "2020-05-01",
                              "scope": "[format('Microsoft.Network/privateEndpoints/{0}', parameters('name'))]",
                              "name": "[coalesce(tryGet(parameters('lock'), 'name'), format('lock-{0}', parameters('name')))]",
                              "properties": {
                                "level": "[coalesce(tryGet(parameters('lock'), 'kind'), '')]",
                                "notes": "[if(equals(tryGet(parameters('lock'), 'kind'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot delete or modify the resource or child resources.')]"
                              },
                              "dependsOn": [
                                "privateEndpoint"
                              ]
                            },
                            "privateEndpoint_roleAssignments": {
                              "copy": {
                                "name": "privateEndpoint_roleAssignments",
                                "count": "[length(coalesce(variables('formattedRoleAssignments'), createArray()))]"
                              },
                              "type": "Microsoft.Authorization/roleAssignments",
                              "apiVersion": "2022-04-01",
                              "scope": "[format('Microsoft.Network/privateEndpoints/{0}', parameters('name'))]",
                              "name": "[coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'name'), guid(resourceId('Microsoft.Network/privateEndpoints', parameters('name')), coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId, coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId))]",
                              "properties": {
                                "roleDefinitionId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId]",
                                "principalId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId]",
                                "description": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'description')]",
                                "principalType": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'principalType')]",
                                "condition": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition')]",
                                "conditionVersion": "[if(not(empty(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                                "delegatedManagedIdentityResourceId": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                              },
                              "dependsOn": [
                                "privateEndpoint"
                              ]
                            },
                            "privateEndpoint_privateDnsZoneGroup": {
                              "condition": "[not(empty(parameters('privateDnsZoneGroup')))]",
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('{0}-PrivateEndpoint-PrivateDnsZoneGroup', uniqueString(deployment().name))]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "name": {
                                    "value": "[tryGet(parameters('privateDnsZoneGroup'), 'name')]"
                                  },
                                  "privateEndpointName": {
                                    "value": "[parameters('name')]"
                                  },
                                  "privateDnsZoneConfigs": {
                                    "value": "[parameters('privateDnsZoneGroup').privateDnsZoneGroupConfigs]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "languageVersion": "2.0",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.33.13.18514",
                                      "templateHash": "5440815542537978381"
                                    },
                                    "name": "Private Endpoint Private DNS Zone Groups",
                                    "description": "This module deploys a Private Endpoint Private DNS Zone Group."
                                  },
                                  "definitions": {
                                    "privateDnsZoneGroupConfigType": {
                                      "type": "object",
                                      "properties": {
                                        "name": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The name of the private DNS zone group config."
                                          }
                                        },
                                        "privateDnsZoneResourceId": {
                                          "type": "string",
                                          "metadata": {
                                            "description": "Required. The resource id of the private DNS zone."
                                          }
                                        }
                                      },
                                      "metadata": {
                                        "__bicep_export!": true
                                      }
                                    }
                                  },
                                  "parameters": {
                                    "privateEndpointName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Conditional. The name of the parent private endpoint. Required if the template is used in a standalone deployment."
                                      }
                                    },
                                    "privateDnsZoneConfigs": {
                                      "type": "array",
                                      "items": {
                                        "$ref": "#/definitions/privateDnsZoneGroupConfigType"
                                      },
                                      "minLength": 1,
                                      "maxLength": 5,
                                      "metadata": {
                                        "description": "Required. Array of private DNS zone configurations of the private DNS zone group. A DNS zone group can support up to 5 DNS zones."
                                      }
                                    },
                                    "name": {
                                      "type": "string",
                                      "defaultValue": "default",
                                      "metadata": {
                                        "description": "Optional. The name of the private DNS zone group."
                                      }
                                    }
                                  },
                                  "variables": {
                                    "copy": [
                                      {
                                        "name": "privateDnsZoneConfigsVar",
                                        "count": "[length(parameters('privateDnsZoneConfigs'))]",
                                        "input": {
                                          "name": "[coalesce(tryGet(parameters('privateDnsZoneConfigs')[copyIndex('privateDnsZoneConfigsVar')], 'name'), last(split(parameters('privateDnsZoneConfigs')[copyIndex('privateDnsZoneConfigsVar')].privateDnsZoneResourceId, '/')))]",
                                          "properties": {
                                            "privateDnsZoneId": "[parameters('privateDnsZoneConfigs')[copyIndex('privateDnsZoneConfigsVar')].privateDnsZoneResourceId]"
                                          }
                                        }
                                      }
                                    ]
                                  },
                                  "resources": {
                                    "privateEndpoint": {
                                      "existing": true,
                                      "type": "Microsoft.Network/privateEndpoints",
                                      "apiVersion": "2023-11-01",
                                      "name": "[parameters('privateEndpointName')]"
                                    },
                                    "privateDnsZoneGroup": {
                                      "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
                                      "apiVersion": "2023-11-01",
                                      "name": "[format('{0}/{1}', parameters('privateEndpointName'), parameters('name'))]",
                                      "properties": {
                                        "privateDnsZoneConfigs": "[variables('privateDnsZoneConfigsVar')]"
                                      }
                                    }
                                  },
                                  "outputs": {
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the private endpoint DNS zone group."
                                      },
                                      "value": "[parameters('name')]"
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource ID of the private endpoint DNS zone group."
                                      },
                                      "value": "[resourceId('Microsoft.Network/privateEndpoints/privateDnsZoneGroups', parameters('privateEndpointName'), parameters('name'))]"
                                    },
                                    "resourceGroupName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource group the private endpoint DNS zone group was deployed into."
                                      },
                                      "value": "[resourceGroup().name]"
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "privateEndpoint"
                              ]
                            }
                          },
                          "outputs": {
                            "resourceGroupName": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource group the private endpoint was deployed into."
                              },
                              "value": "[resourceGroup().name]"
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource ID of the private endpoint."
                              },
                              "value": "[resourceId('Microsoft.Network/privateEndpoints', parameters('name'))]"
                            },
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the private endpoint."
                              },
                              "value": "[parameters('name')]"
                            },
                            "location": {
                              "type": "string",
                              "metadata": {
                                "description": "The location the resource was deployed into."
                              },
                              "value": "[reference('privateEndpoint', '2023-11-01', 'full').location]"
                            },
                            "customDnsConfigs": {
                              "type": "array",
                              "items": {
                                "$ref": "#/definitions/customDnsConfigType"
                              },
                              "metadata": {
                                "description": "The custom DNS configurations of the private endpoint."
                              },
                              "value": "[reference('privateEndpoint').customDnsConfigs]"
                            },
                            "networkInterfaceResourceIds": {
                              "type": "array",
                              "items": {
                                "type": "string"
                              },
                              "metadata": {
                                "description": "The resource IDs of the network interfaces associated with the private endpoint."
                              },
                              "value": "[map(reference('privateEndpoint').networkInterfaces, lambda('nic', lambdaVariables('nic').id))]"
                            },
                            "groupId": {
                              "type": "string",
                              "nullable": true,
                              "metadata": {
                                "description": "The group Id for the private endpoint Group."
                              },
                              "value": "[coalesce(tryGet(tryGet(tryGet(tryGet(reference('privateEndpoint'), 'manualPrivateLinkServiceConnections'), 0, 'properties'), 'groupIds'), 0), tryGet(tryGet(tryGet(tryGet(reference('privateEndpoint'), 'privateLinkServiceConnections'), 0, 'properties'), 'groupIds'), 0))]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "databaseAccount"
                      ]
                    }
                  },
                  "outputs": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the database account."
                      },
                      "value": "[parameters('name')]"
                    },
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the database account."
                      },
                      "value": "[resourceId('Microsoft.DocumentDB/databaseAccounts', parameters('name'))]"
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the resource group the database account was created in."
                      },
                      "value": "[resourceGroup().name]"
                    },
                    "systemAssignedMIPrincipalId": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "The principal ID of the system assigned identity."
                      },
                      "value": "[tryGet(tryGet(reference('databaseAccount', '2024-11-15', 'full'), 'identity'), 'principalId')]"
                    },
                    "location": {
                      "type": "string",
                      "metadata": {
                        "description": "The location the resource was deployed into."
                      },
                      "value": "[reference('databaseAccount', '2024-11-15', 'full').location]"
                    },
                    "endpoint": {
                      "type": "string",
                      "metadata": {
                        "description": "The endpoint of the database account."
                      },
                      "value": "[reference('databaseAccount').documentEndpoint]"
                    },
                    "privateEndpoints": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/privateEndpointOutputType"
                      },
                      "metadata": {
                        "description": "The private endpoints of the database account."
                      },
                      "copy": {
                        "count": "[length(coalesce(parameters('privateEndpoints'), createArray()))]",
                        "input": {
                          "name": "[reference(format('databaseAccount_privateEndpoints[{0}]', copyIndex())).outputs.name.value]",
                          "resourceId": "[reference(format('databaseAccount_privateEndpoints[{0}]', copyIndex())).outputs.resourceId.value]",
                          "groupId": "[tryGet(tryGet(reference(format('databaseAccount_privateEndpoints[{0}]', copyIndex())).outputs, 'groupId'), 'value')]",
                          "customDnsConfigs": "[reference(format('databaseAccount_privateEndpoints[{0}]', copyIndex())).outputs.customDnsConfigs.value]",
                          "networkInterfaceResourceIds": "[reference(format('databaseAccount_privateEndpoints[{0}]', copyIndex())).outputs.networkInterfaceResourceIds.value]"
                        }
                      }
                    },
                    "primaryReadWriteKey": {
                      "type": "securestring",
                      "metadata": {
                        "description": "The primary read-write key."
                      },
                      "value": "[listKeys('databaseAccount', '2024-11-15').primaryMasterKey]"
                    },
                    "primaryReadOnlyKey": {
                      "type": "securestring",
                      "metadata": {
                        "description": "The primary read-only key."
                      },
                      "value": "[listKeys('databaseAccount', '2024-11-15').primaryReadonlyMasterKey]"
                    },
                    "primaryReadWriteConnectionString": {
                      "type": "securestring",
                      "metadata": {
                        "description": "The primary read-write connection string."
                      },
                      "value": "[listConnectionStrings('databaseAccount', '2024-11-15').connectionStrings[0].connectionString]"
                    },
                    "primaryReadOnlyConnectionString": {
                      "type": "securestring",
                      "metadata": {
                        "description": "The primary read-only connection string."
                      },
                      "value": "[listConnectionStrings('databaseAccount', '2024-11-15').connectionStrings[2].connectionString]"
                    },
                    "secondaryReadWriteKey": {
                      "type": "securestring",
                      "metadata": {
                        "description": "The secondary read-write key."
                      },
                      "value": "[listKeys('databaseAccount', '2024-11-15').secondaryMasterKey]"
                    },
                    "secondaryReadOnlyKey": {
                      "type": "securestring",
                      "metadata": {
                        "description": "The secondary read-only key."
                      },
                      "value": "[listKeys('databaseAccount', '2024-11-15').secondaryReadonlyMasterKey]"
                    },
                    "secondaryReadWriteConnectionString": {
                      "type": "securestring",
                      "metadata": {
                        "description": "The secondary read-write connection string."
                      },
                      "value": "[listConnectionStrings('databaseAccount', '2024-11-15').connectionStrings[1].connectionString]"
                    },
                    "secondaryReadOnlyConnectionString": {
                      "type": "securestring",
                      "metadata": {
                        "description": "The secondary read-only connection string."
                      },
                      "value": "[listConnectionStrings('databaseAccount', '2024-11-15').connectionStrings[3].connectionString]"
                    }
                  }
                }
              }
            }
          },
          "outputs": {
            "name": {
              "type": "string",
              "metadata": {
                "description": "Name of the Cosmos DB."
              },
              "value": "[if(empty(parameters('existingResourceId')), reference('cosmosDb').outputs.name.value, variables('existingName'))]"
            },
            "resourceId": {
              "type": "string",
              "metadata": {
                "description": "Resource ID of the Cosmos DB."
              },
              "value": "[if(empty(parameters('existingResourceId')), reference('cosmosDb').outputs.resourceId.value, extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('existingSubscriptionId'), variables('existingResourceGroupName')), 'Microsoft.DocumentDB/databaseAccounts', variables('existingName')))]"
            },
            "subscriptionId": {
              "type": "string",
              "metadata": {
                "description": "Subscription ID of the Cosmos DB."
              },
              "value": "[if(empty(parameters('existingResourceId')), subscription().subscriptionId, variables('existingSubscriptionId'))]"
            },
            "resourceGroupName": {
              "type": "string",
              "metadata": {
                "description": "Resource Group Name of the Cosmos DB."
              },
              "value": "[if(empty(parameters('existingResourceId')), resourceGroup().name, variables('existingResourceGroupName'))]"
            }
          }
        }
      }
    },
    "foundryProject": {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[take(format('module.project.main.{0}', variables('projectName')), 64)]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "name": {
            "value": "[variables('projectName')]"
          },
          "desc": "[if(not(empty(tryGet(tryGet(parameters('aiFoundryConfiguration'), 'project'), 'desc'))), createObject('value', parameters('aiFoundryConfiguration').project.desc), createObject('value', 'This is the default project for AI Foundry.'))]",
          "displayName": "[if(not(empty(tryGet(tryGet(parameters('aiFoundryConfiguration'), 'project'), 'displayName'))), createObject('value', parameters('aiFoundryConfiguration').project.displayName), createObject('value', format('{0} Default Project', parameters('baseName'))))]",
          "accountName": {
            "value": "[reference('foundryAccount').outputs.name.value]"
          },
          "location": {
            "value": "[reference('foundryAccount').outputs.location.value]"
          },
          "createAccountCapabilityHost": {
            "value": "[and(variables('createCapabilityHosts'), empty(tryGet(tryGet(parameters('aiFoundryConfiguration'), 'networking'), 'agentServiceSubnetResourceId')))]"
          },
          "createProjectCapabilityHost": {
            "value": "[variables('createCapabilityHosts')]"
          },
          "storageAccountConnection": "[if(parameters('includeAssociatedResources'), createObject('value', createObject('resourceName', reference('storageAccount').outputs.name.value, 'subscriptionId', reference('storageAccount').outputs.subscriptionId.value, 'resourceGroupName', reference('storageAccount').outputs.resourceGroupName.value)), createObject('value', null()))]",
          "aiSearchConnection": "[if(parameters('includeAssociatedResources'), createObject('value', createObject('resourceName', reference('aiSearch').outputs.name.value, 'subscriptionId', reference('aiSearch').outputs.subscriptionId.value, 'resourceGroupName', reference('aiSearch').outputs.resourceGroupName.value)), createObject('value', null()))]",
          "cosmosDbConnection": "[if(parameters('includeAssociatedResources'), createObject('value', createObject('resourceName', reference('cosmosDb').outputs.name.value, 'subscriptionId', reference('cosmosDb').outputs.subscriptionId.value, 'resourceGroupName', reference('cosmosDb').outputs.resourceGroupName.value)), createObject('value', null()))]",
          "tags": {
            "value": "[parameters('tags')]"
          },
          "lock": {
            "value": "[parameters('lock')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "languageVersion": "2.0",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "8851117120311264419"
            },
            "name": "AI Foundry Project",
            "description": "Creates an AI Foundry project and any associated Azure service connections."
          },
          "definitions": {
            "azureConnectionType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The name of the project connection. Will default to the resource name if not provided."
                  }
                },
                "resourceName": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The resource name of the Azure resource for the connection."
                  }
                },
                "subscriptionId": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The subscription ID of the resource."
                  }
                },
                "resourceGroupName": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The resource group name of the resource."
                  }
                }
              },
              "metadata": {
                "__bicep_export!": true,
                "description": "Type representing values to create an Azure connection to an AI Foundry project."
              }
            },
            "lockType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Specify the name of lock."
                  }
                },
                "kind": {
                  "type": "string",
                  "allowedValues": [
                    "CanNotDelete",
                    "None",
                    "ReadOnly"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Specify the type of lock."
                  }
                },
                "notes": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Specify the notes of the lock."
                  }
                }
              },
              "metadata": {
                "description": "An AVM-aligned type for a lock.",
                "__bicep_imported_from!": {
                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.6.0"
                }
              }
            }
          },
          "parameters": {
            "name": {
              "type": "string",
              "minLength": 2,
              "maxLength": 64,
              "metadata": {
                "description": "Required. The name of the AI Foundry project."
              }
            },
            "displayName": {
              "type": "string",
              "nullable": true,
              "metadata": {
                "description": "Optional. The display name of the AI Foundry project."
              }
            },
            "desc": {
              "type": "string",
              "nullable": true,
              "metadata": {
                "description": "Optional. The description of the AI Foundry project."
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Optional. Specifies the location for all the Azure resources."
              }
            },
            "accountName": {
              "type": "string",
              "metadata": {
                "description": "Required. Name of the existing parent Foundry Account resource."
              }
            },
            "createAccountCapabilityHost": {
              "type": "bool",
              "metadata": {
                "description": "Required. Whether to create the capability host for the Foundry account. Requires associated resource connections to be provided."
              }
            },
            "createProjectCapabilityHost": {
              "type": "bool",
              "metadata": {
                "description": "Required. Whether to create the capability host for the Foundry project. Requires associated resource connections to be provided."
              }
            },
            "cosmosDbConnection": {
              "$ref": "#/definitions/azureConnectionType",
              "nullable": true,
              "metadata": {
                "description": "Optional. Azure Cosmos DB connection for the project."
              }
            },
            "aiSearchConnection": {
              "$ref": "#/definitions/azureConnectionType",
              "nullable": true,
              "metadata": {
                "description": "Optional. Azure Cognitive Search connection for the project."
              }
            },
            "storageAccountConnection": {
              "$ref": "#/definitions/azureConnectionType",
              "nullable": true,
              "metadata": {
                "description": "Optional. Storage Account connection for the project."
              }
            },
            "lock": {
              "$ref": "#/definitions/lockType",
              "nullable": true,
              "metadata": {
                "description": "Optional. The lock settings of the service."
              }
            },
            "tags": {
              "type": "object",
              "metadata": {
                "__bicep_resource_derived_type!": {
                  "source": "Microsoft.Resources/resourceGroups@2025-04-01#properties/tags"
                },
                "description": "Optional. Tags to be applied to the resources."
              },
              "defaultValue": {}
            }
          },
          "variables": {
            "createProjectCapabilityHostInternal": "[and(and(and(parameters('createProjectCapabilityHost'), not(empty(parameters('cosmosDbConnection')))), not(empty(parameters('aiSearchConnection')))), not(empty(parameters('storageAccountConnection'))))]",
            "createAccountCapabilityHostInternal": "[and(and(and(parameters('createAccountCapabilityHost'), not(empty(parameters('cosmosDbConnection')))), not(empty(parameters('aiSearchConnection')))), not(empty(parameters('storageAccountConnection'))))]"
          },
          "resources": {
            "foundryAccount": {
              "existing": true,
              "type": "Microsoft.CognitiveServices/accounts",
              "apiVersion": "2025-06-01",
              "name": "[parameters('accountName')]"
            },
            "storageAccount": {
              "condition": "[not(empty(parameters('storageAccountConnection')))]",
              "existing": true,
              "type": "Microsoft.Storage/storageAccounts",
              "apiVersion": "2025-01-01",
              "subscriptionId": "[parameters('storageAccountConnection').subscriptionId]",
              "resourceGroup": "[parameters('storageAccountConnection').resourceGroupName]",
              "name": "[parameters('storageAccountConnection').resourceName]"
            },
            "aiSearch": {
              "condition": "[not(empty(parameters('aiSearchConnection')))]",
              "existing": true,
              "type": "Microsoft.Search/searchServices",
              "apiVersion": "2025-05-01",
              "subscriptionId": "[parameters('aiSearchConnection').subscriptionId]",
              "resourceGroup": "[parameters('aiSearchConnection').resourceGroupName]",
              "name": "[parameters('aiSearchConnection').resourceName]"
            },
            "cosmosDb": {
              "condition": "[not(empty(parameters('cosmosDbConnection')))]",
              "existing": true,
              "type": "Microsoft.DocumentDB/databaseAccounts",
              "apiVersion": "2025-04-15",
              "subscriptionId": "[parameters('cosmosDbConnection').subscriptionId]",
              "resourceGroup": "[parameters('cosmosDbConnection').resourceGroupName]",
              "name": "[parameters('cosmosDbConnection').resourceName]"
            },
            "project": {
              "type": "Microsoft.CognitiveServices/accounts/projects",
              "apiVersion": "2025-04-01-preview",
              "name": "[format('{0}/{1}', parameters('accountName'), parameters('name'))]",
              "location": "[parameters('location')]",
              "identity": {
                "type": "SystemAssigned"
              },
              "properties": {
                "displayName": "[if(not(empty(parameters('displayName'))), parameters('displayName'), parameters('name'))]",
                "description": "[if(not(empty(parameters('desc'))), parameters('desc'), parameters('name'))]"
              },
              "tags": "[parameters('tags')]"
            },
            "cosmosDbConnectionResource": {
              "condition": "[not(empty(parameters('cosmosDbConnection')))]",
              "type": "Microsoft.CognitiveServices/accounts/projects/connections",
              "apiVersion": "2025-04-01-preview",
              "name": "[format('{0}/{1}/{2}', parameters('accountName'), parameters('name'), parameters('cosmosDbConnection').resourceName)]",
              "properties": {
                "category": "CosmosDB",
                "target": "[reference('cosmosDb').documentEndpoint]",
                "authType": "AAD",
                "metadata": {
                  "ApiType": "Azure",
                  "ResourceId": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('cosmosDbConnection').subscriptionId, parameters('cosmosDbConnection').resourceGroupName), 'Microsoft.DocumentDB/databaseAccounts', parameters('cosmosDbConnection').resourceName)]",
                  "location": "[reference('cosmosDb', '2025-04-15', 'full').location]"
                }
              },
              "dependsOn": [
                "cosmosDb",
                "cosmosDbRoleAssignments",
                "project",
                "waitForProjectScript"
              ]
            },
            "storageAccountConnectionResource": {
              "condition": "[not(empty(parameters('storageAccountConnection')))]",
              "type": "Microsoft.CognitiveServices/accounts/projects/connections",
              "apiVersion": "2025-04-01-preview",
              "name": "[format('{0}/{1}/{2}', parameters('accountName'), parameters('name'), parameters('storageAccountConnection').resourceName)]",
              "properties": {
                "category": "AzureStorageAccount",
                "target": "[reference('storageAccount').primaryEndpoints.blob]",
                "authType": "AAD",
                "metadata": {
                  "ApiType": "Azure",
                  "ResourceId": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('storageAccountConnection').subscriptionId, parameters('storageAccountConnection').resourceGroupName), 'Microsoft.Storage/storageAccounts', parameters('storageAccountConnection').resourceName)]",
                  "location": "[reference('storageAccount', '2025-01-01', 'full').location]"
                }
              },
              "dependsOn": [
                "cosmosDbConnectionResource",
                "project",
                "storageAccount",
                "storageAccountRoleAssignments",
                "waitForProjectScript"
              ]
            },
            "aiSearchConnectionResource": {
              "condition": "[not(empty(parameters('aiSearchConnection')))]",
              "type": "Microsoft.CognitiveServices/accounts/projects/connections",
              "apiVersion": "2025-04-01-preview",
              "name": "[format('{0}/{1}/{2}', parameters('accountName'), parameters('name'), parameters('aiSearchConnection').resourceName)]",
              "properties": {
                "category": "CognitiveSearch",
                "target": "[format('https://{0}.search.windows.net/', parameters('aiSearchConnection').resourceName)]",
                "authType": "AAD",
                "metadata": {
                  "ApiType": "Azure",
                  "ResourceId": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('aiSearchConnection').subscriptionId, parameters('aiSearchConnection').resourceGroupName), 'Microsoft.Search/searchServices', parameters('aiSearchConnection').resourceName)]",
                  "location": "[reference('aiSearch', '2025-05-01', 'full').location]"
                }
              },
              "dependsOn": [
                "aiSearch",
                "aiSearchRoleAssignments",
                "cosmosDbConnectionResource",
                "project",
                "storageAccountConnectionResource",
                "waitForProjectScript"
              ]
            },
            "accountCapabilityHost": {
              "condition": "[variables('createAccountCapabilityHostInternal')]",
              "type": "Microsoft.CognitiveServices/accounts/capabilityHosts",
              "apiVersion": "2025-04-01-preview",
              "name": "[format('{0}/{1}', parameters('accountName'), format('chagent{0}', replace(parameters('accountName'), '-', '')))]",
              "properties": {
                "capabilityHostKind": "Agents",
                "tags": "[parameters('tags')]"
              },
              "dependsOn": [
                "aiSearchConnectionResource",
                "cosmosDbConnectionResource",
                "project",
                "storageAccountConnectionResource",
                "waitForConnectionsScript"
              ]
            },
            "capabilityHost": {
              "condition": "[variables('createProjectCapabilityHostInternal')]",
              "type": "Microsoft.CognitiveServices/accounts/projects/capabilityHosts",
              "apiVersion": "2025-04-01-preview",
              "name": "[format('{0}/{1}/{2}', parameters('accountName'), parameters('name'), format('chagent{0}', replace(parameters('name'), '-', '')))]",
              "properties": {
                "capabilityHostKind": "Agents",
                "threadStorageConnections": [
                  "[format('{0}', parameters('cosmosDbConnection').resourceName)]"
                ],
                "vectorStoreConnections": [
                  "[format('{0}', parameters('aiSearchConnection').resourceName)]"
                ],
                "storageConnections": [
                  "[format('{0}', parameters('storageAccountConnection').resourceName)]"
                ],
                "tags": "[parameters('tags')]"
              },
              "dependsOn": [
                "accountCapabilityHost",
                "aiSearchConnectionResource",
                "cosmosDbConnectionResource",
                "project",
                "storageAccountConnectionResource",
                "waitForConnectionsScript"
              ]
            },
            "projectLock": {
              "condition": "[and(not(empty(coalesce(parameters('lock'), createObject()))), not(equals(tryGet(parameters('lock'), 'kind'), 'None')))]",
              "type": "Microsoft.Authorization/locks",
              "apiVersion": "2020-05-01",
              "scope": "[format('Microsoft.CognitiveServices/accounts/{0}/projects/{1}', parameters('accountName'), parameters('name'))]",
              "name": "[coalesce(tryGet(parameters('lock'), 'name'), format('lock-{0}', parameters('name')))]",
              "properties": {
                "level": "[coalesce(tryGet(parameters('lock'), 'kind'), '')]",
                "notes": "[coalesce(tryGet(parameters('lock'), 'notes'), if(equals(tryGet(parameters('lock'), 'kind'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot delete or modify the resource or child resources.'))]"
              },
              "dependsOn": [
                "capabilityHost",
                "project"
              ]
            },
            "waitForProjectScript": {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[take(format('module.project.waitDeploymentScript.waitForProject.{0}', parameters('name')), 64)]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "[format('script-wait-proj-{0}', parameters('name'))]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "seconds": {
                    "value": 30
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.37.4.10188",
                      "templateHash": "12058385900108541348"
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Name of the deployment script."
                      }
                    },
                    "location": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Location for the deployment script."
                      }
                    },
                    "seconds": {
                      "type": "int",
                      "metadata": {
                        "description": "Required. Sleep/wait time for the deployment script in seconds."
                      }
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Resources/deploymentScripts",
                      "apiVersion": "2023-08-01",
                      "name": "[parameters('name')]",
                      "location": "[parameters('location')]",
                      "kind": "AzurePowerShell",
                      "properties": {
                        "azPowerShellVersion": "11.0",
                        "scriptContent": "[format('Write-Host \"Waiting for {0} seconds...\" ; Start-Sleep -Seconds {1}; Write-Host \"Wait complete.\"', parameters('seconds'), parameters('seconds'))]",
                        "timeout": "P1D",
                        "cleanupPreference": "Always",
                        "retentionInterval": "P1D"
                      }
                    }
                  ]
                }
              },
              "dependsOn": [
                "project"
              ]
            },
            "cosmosDbRoleAssignments": {
              "condition": "[not(empty(parameters('cosmosDbConnection')))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[take(format('module.project.role-assign.cosmosDb.{0}', parameters('name')), 64)]",
              "subscriptionId": "[parameters('cosmosDbConnection').subscriptionId]",
              "resourceGroup": "[parameters('cosmosDbConnection').resourceGroupName]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "cosmosDbName": {
                    "value": "[parameters('cosmosDbConnection').resourceName]"
                  },
                  "projectIdentityPrincipalId": {
                    "value": "[reference('project', '2025-04-01-preview', 'full').identity.principalId]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.37.4.10188",
                      "templateHash": "4343866242768882577"
                    }
                  },
                  "parameters": {
                    "cosmosDbName": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The name of the Cosmos DB account."
                      }
                    },
                    "projectIdentityPrincipalId": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The principal ID of the project identity."
                      }
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Authorization/roleAssignments",
                      "apiVersion": "2022-04-01",
                      "scope": "[format('Microsoft.DocumentDB/databaseAccounts/{0}', parameters('cosmosDbName'))]",
                      "name": "[guid(parameters('projectIdentityPrincipalId'), resourceId('Microsoft.Authorization/roleDefinitions', '230815da-be43-4aae-9cb4-875f7bd000aa'), resourceId('Microsoft.DocumentDB/databaseAccounts', parameters('cosmosDbName')))]",
                      "properties": {
                        "principalId": "[parameters('projectIdentityPrincipalId')]",
                        "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', '230815da-be43-4aae-9cb4-875f7bd000aa')]",
                        "principalType": "ServicePrincipal"
                      }
                    }
                  ]
                }
              },
              "dependsOn": [
                "project",
                "waitForProjectScript"
              ]
            },
            "storageAccountRoleAssignments": {
              "condition": "[not(empty(parameters('storageAccountConnection')))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[take(format('module.project.role-assign.storageAccount.{0}', parameters('name')), 64)]",
              "subscriptionId": "[parameters('storageAccountConnection').subscriptionId]",
              "resourceGroup": "[parameters('storageAccountConnection').resourceGroupName]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "storageAccountName": {
                    "value": "[parameters('storageAccountConnection').resourceName]"
                  },
                  "projectIdentityPrincipalId": {
                    "value": "[reference('project', '2025-04-01-preview', 'full').identity.principalId]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.37.4.10188",
                      "templateHash": "2328866770764276306"
                    }
                  },
                  "parameters": {
                    "storageAccountName": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The name of the storage account."
                      }
                    },
                    "projectIdentityPrincipalId": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The principal ID of the project identity."
                      }
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Authorization/roleAssignments",
                      "apiVersion": "2022-04-01",
                      "scope": "[format('Microsoft.Storage/storageAccounts/{0}', parameters('storageAccountName'))]",
                      "name": "[guid(resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName')), resourceId('Microsoft.Authorization/roleDefinitions', 'ba92f5b4-2d11-453d-a403-e96b0029c9fe'), parameters('storageAccountName'))]",
                      "properties": {
                        "principalId": "[parameters('projectIdentityPrincipalId')]",
                        "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', 'ba92f5b4-2d11-453d-a403-e96b0029c9fe')]",
                        "principalType": "ServicePrincipal"
                      }
                    }
                  ]
                }
              },
              "dependsOn": [
                "project",
                "waitForProjectScript"
              ]
            },
            "aiSearchRoleAssignments": {
              "condition": "[not(empty(parameters('aiSearchConnection')))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[take(format('module.project.role-assign.aiSearch.{0}', parameters('name')), 64)]",
              "subscriptionId": "[parameters('aiSearchConnection').subscriptionId]",
              "resourceGroup": "[parameters('aiSearchConnection').resourceGroupName]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "aiSearchName": {
                    "value": "[parameters('aiSearchConnection').resourceName]"
                  },
                  "projectIdentityPrincipalId": {
                    "value": "[reference('project', '2025-04-01-preview', 'full').identity.principalId]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.37.4.10188",
                      "templateHash": "13253222899830410134"
                    }
                  },
                  "parameters": {
                    "aiSearchName": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The name of the AI Search resource."
                      }
                    },
                    "projectIdentityPrincipalId": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The principal ID of the project identity."
                      }
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Authorization/roleAssignments",
                      "apiVersion": "2022-04-01",
                      "scope": "[format('Microsoft.Search/searchServices/{0}', parameters('aiSearchName'))]",
                      "name": "[guid(parameters('projectIdentityPrincipalId'), resourceId('Microsoft.Authorization/roleDefinitions', '8ebe5a00-799e-43f5-93ac-243d3dce84a7'), resourceId('Microsoft.Search/searchServices', parameters('aiSearchName')))]",
                      "properties": {
                        "principalId": "[parameters('projectIdentityPrincipalId')]",
                        "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', '8ebe5a00-799e-43f5-93ac-243d3dce84a7')]",
                        "principalType": "ServicePrincipal"
                      }
                    },
                    {
                      "type": "Microsoft.Authorization/roleAssignments",
                      "apiVersion": "2022-04-01",
                      "scope": "[format('Microsoft.Search/searchServices/{0}', parameters('aiSearchName'))]",
                      "name": "[guid(parameters('projectIdentityPrincipalId'), resourceId('Microsoft.Authorization/roleDefinitions', '7ca78c08-252a-4471-8644-bb5ff32d4ba0'), resourceId('Microsoft.Search/searchServices', parameters('aiSearchName')))]",
                      "properties": {
                        "principalId": "[parameters('projectIdentityPrincipalId')]",
                        "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', '7ca78c08-252a-4471-8644-bb5ff32d4ba0')]",
                        "principalType": "ServicePrincipal"
                      }
                    }
                  ]
                }
              },
              "dependsOn": [
                "project",
                "waitForProjectScript"
              ]
            },
            "waitForConnectionsScript": {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[take(format('module.project.waitDeploymentScript.waitForConn.{0}', parameters('name')), 64)]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "[format('script-wait-conns-{0}', parameters('name'))]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "seconds": {
                    "value": 60
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.37.4.10188",
                      "templateHash": "12058385900108541348"
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Name of the deployment script."
                      }
                    },
                    "location": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Location for the deployment script."
                      }
                    },
                    "seconds": {
                      "type": "int",
                      "metadata": {
                        "description": "Required. Sleep/wait time for the deployment script in seconds."
                      }
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Resources/deploymentScripts",
                      "apiVersion": "2023-08-01",
                      "name": "[parameters('name')]",
                      "location": "[parameters('location')]",
                      "kind": "AzurePowerShell",
                      "properties": {
                        "azPowerShellVersion": "11.0",
                        "scriptContent": "[format('Write-Host \"Waiting for {0} seconds...\" ; Start-Sleep -Seconds {1}; Write-Host \"Wait complete.\"', parameters('seconds'), parameters('seconds'))]",
                        "timeout": "P1D",
                        "cleanupPreference": "Always",
                        "retentionInterval": "P1D"
                      }
                    }
                  ]
                }
              },
              "dependsOn": [
                "aiSearchConnectionResource",
                "cosmosDbConnectionResource",
                "project",
                "storageAccountConnectionResource",
                "waitForProjectScript"
              ]
            },
            "cosmosDbSqlRoleAssignments": {
              "condition": "[and(not(empty(parameters('cosmosDbConnection'))), variables('createProjectCapabilityHostInternal'))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[take(format('module.project.role-assign.cosmosDbDataPlane.{0}', parameters('name')), 64)]",
              "subscriptionId": "[parameters('cosmosDbConnection').subscriptionId]",
              "resourceGroup": "[parameters('cosmosDbConnection').resourceGroupName]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "cosmosDbName": {
                    "value": "[parameters('cosmosDbConnection').resourceName]"
                  },
                  "projectIdentityPrincipalId": {
                    "value": "[reference('project', '2025-04-01-preview', 'full').identity.principalId]"
                  },
                  "projectWorkspaceId": {
                    "value": "[format('{0}-{1}-{2}-{3}-{4}', if(greaterOrEquals(length(reference('project').internalId), 8), substring(reference('project').internalId, 0, 8), ''), if(greaterOrEquals(length(reference('project').internalId), 12), substring(reference('project').internalId, 8, 4), ''), if(greaterOrEquals(length(reference('project').internalId), 16), substring(reference('project').internalId, 12, 4), ''), if(greaterOrEquals(length(reference('project').internalId), 20), substring(reference('project').internalId, 16, 4), ''), if(greaterOrEquals(length(reference('project').internalId), 32), substring(reference('project').internalId, 20, 12), ''))]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.37.4.10188",
                      "templateHash": "1974052573238970785"
                    }
                  },
                  "parameters": {
                    "cosmosDbName": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The name of the Cosmos DB account."
                      }
                    },
                    "projectIdentityPrincipalId": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The principal ID of the project identity."
                      }
                    },
                    "projectWorkspaceId": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The project workspace ID."
                      }
                    }
                  },
                  "variables": {
                    "cosmosContainerNameSuffixes": [
                      "thread-message-store",
                      "system-thread-message-store",
                      "agent-entity-store"
                    ],
                    "cosmosDefaultSqlRoleDefinitionId": "[resourceId('Microsoft.DocumentDB/databaseAccounts/sqlRoleDefinitions', parameters('cosmosDbName'), '00000000-0000-0000-0000-000000000002')]"
                  },
                  "resources": [
                    {
                      "copy": {
                        "name": "cosmosDataRoleAssigment",
                        "count": "[length(variables('cosmosContainerNameSuffixes'))]",
                        "mode": "serial",
                        "batchSize": 1
                      },
                      "type": "Microsoft.DocumentDB/databaseAccounts/sqlRoleAssignments",
                      "apiVersion": "2025-04-15",
                      "name": "[format('{0}/{1}', parameters('cosmosDbName'), guid(variables('cosmosDefaultSqlRoleDefinitionId'), parameters('cosmosDbName'), variables('cosmosContainerNameSuffixes')[copyIndex()]))]",
                      "properties": {
                        "principalId": "[parameters('projectIdentityPrincipalId')]",
                        "roleDefinitionId": "[variables('cosmosDefaultSqlRoleDefinitionId')]",
                        "scope": "[format('{0}/dbs/enterprise_memory/colls/{1}-{2}', resourceId('Microsoft.DocumentDB/databaseAccounts', parameters('cosmosDbName')), parameters('projectWorkspaceId'), variables('cosmosContainerNameSuffixes')[copyIndex()])]"
                      }
                    }
                  ]
                }
              },
              "dependsOn": [
                "capabilityHost",
                "cosmosDbRoleAssignments",
                "project"
              ]
            },
            "storageAccountContainerRoleAssignments": {
              "condition": "[and(not(empty(parameters('storageAccountConnection'))), variables('createProjectCapabilityHostInternal'))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[take(format('module.project.role-assign.storageAccountDataPlane.{0}', parameters('name')), 64)]",
              "subscriptionId": "[parameters('storageAccountConnection').subscriptionId]",
              "resourceGroup": "[parameters('storageAccountConnection').resourceGroupName]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "storageAccountName": {
                    "value": "[parameters('storageAccountConnection').resourceName]"
                  },
                  "projectIdentityPrincipalId": {
                    "value": "[reference('project', '2025-04-01-preview', 'full').identity.principalId]"
                  },
                  "projectWorkspaceId": {
                    "value": "[format('{0}-{1}-{2}-{3}-{4}', if(greaterOrEquals(length(reference('project').internalId), 8), substring(reference('project').internalId, 0, 8), ''), if(greaterOrEquals(length(reference('project').internalId), 12), substring(reference('project').internalId, 8, 4), ''), if(greaterOrEquals(length(reference('project').internalId), 16), substring(reference('project').internalId, 12, 4), ''), if(greaterOrEquals(length(reference('project').internalId), 20), substring(reference('project').internalId, 16, 4), ''), if(greaterOrEquals(length(reference('project').internalId), 32), substring(reference('project').internalId, 20, 12), ''))]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.37.4.10188",
                      "templateHash": "12946450716069874852"
                    }
                  },
                  "parameters": {
                    "storageAccountName": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The name of the storage account."
                      }
                    },
                    "projectIdentityPrincipalId": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The principal ID of the project identity."
                      }
                    },
                    "projectWorkspaceId": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The project workspace ID."
                      }
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Authorization/roleAssignments",
                      "apiVersion": "2022-04-01",
                      "scope": "[format('Microsoft.Storage/storageAccounts/{0}', parameters('storageAccountName'))]",
                      "name": "[guid(resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName')), resourceId('Microsoft.Authorization/roleDefinitions', 'b7e6dc6d-f1e8-4753-8033-0f276bb0955b'), parameters('storageAccountName'))]",
                      "properties": {
                        "principalId": "[parameters('projectIdentityPrincipalId')]",
                        "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', 'b7e6dc6d-f1e8-4753-8033-0f276bb0955b')]",
                        "principalType": "ServicePrincipal",
                        "conditionVersion": "2.0",
                        "condition": "[replace('      (\n        (\n          !(ActionMatches{''Microsoft.Storage/storageAccounts/blobServices/containers/blobs/tags/read''})\n          AND  !(ActionMatches{''Microsoft.Storage/storageAccounts/blobServices/containers/blobs/filter/action''})\n          AND  !(ActionMatches{''Microsoft.Storage/storageAccounts/blobServices/containers/blobs/tags/write''})\n        )\n        OR\n        (@Resource[Microsoft.Storage/storageAccounts/blobServices/containers:name] StringStartsWithIgnoreCase ''#projectWorkspaceId#''\n        AND @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:name] StringLikeIgnoreCase ''*-azureml-agent'')\n      )\n      ', '#projectWorkspaceId#', parameters('projectWorkspaceId'))]"
                      }
                    }
                  ]
                }
              },
              "dependsOn": [
                "capabilityHost",
                "cosmosDbSqlRoleAssignments",
                "project",
                "storageAccountRoleAssignments"
              ]
            }
          },
          "outputs": {
            "resourceGroupName": {
              "type": "string",
              "metadata": {
                "description": "Name of the deployed Azure Resource Group."
              },
              "value": "[resourceGroup().name]"
            },
            "resourceId": {
              "type": "string",
              "metadata": {
                "description": "Resource ID of the Project."
              },
              "value": "[resourceId('Microsoft.CognitiveServices/accounts/projects', parameters('accountName'), parameters('name'))]"
            },
            "name": {
              "type": "string",
              "metadata": {
                "description": "Name of the Project."
              },
              "value": "[parameters('name')]"
            },
            "displayName": {
              "type": "string",
              "metadata": {
                "description": "Display name of the Project."
              },
              "value": "[reference('project').displayName]"
            },
            "desc": {
              "type": "string",
              "metadata": {
                "description": "Description of the Project."
              },
              "value": "[reference('project').description]"
            }
          }
        }
      },
      "dependsOn": [
        "aiSearch",
        "cosmosDb",
        "foundryAccount",
        "keyVault",
        "storageAccount"
      ]
    }
  },
  "outputs": {
    "resourceGroupName": {
      "type": "string",
      "metadata": {
        "description": "Name of the deployed Azure Resource Group."
      },
      "value": "[resourceGroup().name]"
    },
    "keyVaultName": {
      "type": "string",
      "metadata": {
        "description": "Name of the deployed Azure Key Vault."
      },
      "value": "[if(parameters('includeAssociatedResources'), reference('keyVault').outputs.name.value, '')]"
    },
    "aiServicesName": {
      "type": "string",
      "metadata": {
        "description": "Name of the deployed Azure AI Services account."
      },
      "value": "[reference('foundryAccount').outputs.name.value]"
    },
    "aiSearchName": {
      "type": "string",
      "metadata": {
        "description": "Name of the deployed Azure AI Search service."
      },
      "value": "[if(parameters('includeAssociatedResources'), reference('aiSearch').outputs.name.value, '')]"
    },
    "aiProjectName": {
      "type": "string",
      "metadata": {
        "description": "Name of the deployed Azure AI Project."
      },
      "value": "[reference('foundryProject').outputs.name.value]"
    },
    "storageAccountName": {
      "type": "string",
      "metadata": {
        "description": "Name of the deployed Azure Storage Account."
      },
      "value": "[if(parameters('includeAssociatedResources'), reference('storageAccount').outputs.name.value, '')]"
    },
    "cosmosAccountName": {
      "type": "string",
      "metadata": {
        "description": "Name of the deployed Azure Cosmos DB account."
      },
      "value": "[if(parameters('includeAssociatedResources'), reference('cosmosDb').outputs.name.value, '')]"
    }
  }
}